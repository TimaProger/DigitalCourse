
DigitalCourse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e14  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003ed4  08003ed4  00013ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f74  08003f74  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08003f74  08003f74  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f74  08003f74  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f74  08003f74  00013f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f78  08003f78  00013f78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003f7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000095c  20000078  08003ff4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200009d4  08003ff4  000209d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ba8c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b50  00000000  00000000  0002bb2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ba0  00000000  00000000  0002d680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  0002e220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018eaa  00000000  00000000  0002ed18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd26  00000000  00000000  00047bc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091749  00000000  00000000  000548e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6031  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d58  00000000  00000000  000e6084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003ebc 	.word	0x08003ebc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08003ebc 	.word	0x08003ebc

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <HAL_TIM_PWM_PulseFinishedCallback>:
  int dir = 10;
  _Bool flag = 0;
  char FixText[256][8] = { 0 };

  //Прерывание таймера
  void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim){
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
//	  char *test = "callback\r\n";
//	  HAL_UART_Transmit(&huart1, test, strlen(test), -1);

	  if(htim == &htim2){
 800024c:	687a      	ldr	r2, [r7, #4]
 800024e:	4b11      	ldr	r3, [pc, #68]	; (8000294 <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8000250:	429a      	cmp	r2, r3
 8000252:	d11b      	bne.n	800028c <HAL_TIM_PWM_PulseFinishedCallback+0x48>
		  pulse += dir;
 8000254:	4b10      	ldr	r3, [pc, #64]	; (8000298 <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 8000256:	681a      	ldr	r2, [r3, #0]
 8000258:	4b10      	ldr	r3, [pc, #64]	; (800029c <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	18d2      	adds	r2, r2, r3
 800025e:	4b0e      	ldr	r3, [pc, #56]	; (8000298 <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 8000260:	601a      	str	r2, [r3, #0]
		  if(pulse == 150){
 8000262:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	2b96      	cmp	r3, #150	; 0x96
 8000268:	d104      	bne.n	8000274 <HAL_TIM_PWM_PulseFinishedCallback+0x30>
			  dir = -1;
 800026a:	4b0c      	ldr	r3, [pc, #48]	; (800029c <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 800026c:	2201      	movs	r2, #1
 800026e:	4252      	negs	r2, r2
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	e006      	b.n	8000282 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
		  } else if(pulse == 0){
 8000274:	4b08      	ldr	r3, [pc, #32]	; (8000298 <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2b00      	cmp	r3, #0
 800027a:	d102      	bne.n	8000282 <HAL_TIM_PWM_PulseFinishedCallback+0x3e>
			  dir = 1;
 800027c:	4b07      	ldr	r3, [pc, #28]	; (800029c <HAL_TIM_PWM_PulseFinishedCallback+0x58>)
 800027e:	2201      	movs	r2, #1
 8000280:	601a      	str	r2, [r3, #0]
		  }
		  TIM2->CCR2 = pulse;
 8000282:	4b05      	ldr	r3, [pc, #20]	; (8000298 <HAL_TIM_PWM_PulseFinishedCallback+0x54>)
 8000284:	681a      	ldr	r2, [r3, #0]
 8000286:	2380      	movs	r3, #128	; 0x80
 8000288:	05db      	lsls	r3, r3, #23
 800028a:	639a      	str	r2, [r3, #56]	; 0x38
//			  char *test = "callback end\r\n";
//			  HAL_UART_Transmit(&huart1, test, strlen(test), -1);
//			  flag = 0;
//		  }
//	  }
  }
 800028c:	46c0      	nop			; (mov r8, r8)
 800028e:	46bd      	mov	sp, r7
 8000290:	b002      	add	sp, #8
 8000292:	bd80      	pop	{r7, pc}
 8000294:	20000978 	.word	0x20000978
 8000298:	2000089c 	.word	0x2000089c
 800029c:	20000004 	.word	0x20000004

080002a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002a2:	46c6      	mov	lr, r8
 80002a4:	b500      	push	{lr}
 80002a6:	b090      	sub	sp, #64	; 0x40
 80002a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002aa:	f000 fdc7 	bl	8000e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ae:	f000 fa1f 	bl	80006f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002b2:	f000 fb99 	bl	80009e8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80002b6:	f000 fb67 	bl	8000988 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80002ba:	f000 fa6d 	bl	8000798 <MX_TIM1_Init>
  MX_TIM2_Init();
 80002be:	f000 fb03 	bl	80008c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80002c2:	4bca      	ldr	r3, [pc, #808]	; (80005ec <main+0x34c>)
 80002c4:	2100      	movs	r1, #0
 80002c6:	0018      	movs	r0, r3
 80002c8:	f001 fee2 	bl	8002090 <HAL_TIM_PWM_Start_IT>
	HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_2);
 80002cc:	4bc8      	ldr	r3, [pc, #800]	; (80005f0 <main+0x350>)
 80002ce:	2104      	movs	r1, #4
 80002d0:	0018      	movs	r0, r3
 80002d2:	f001 fedd 	bl	8002090 <HAL_TIM_PWM_Start_IT>

	TIM2->CCR2 = 500;
 80002d6:	2380      	movs	r3, #128	; 0x80
 80002d8:	05db      	lsls	r3, r3, #23
 80002da:	22fa      	movs	r2, #250	; 0xfa
 80002dc:	0052      	lsls	r2, r2, #1
 80002de:	639a      	str	r2, [r3, #56]	; 0x38
	TIM2->ARR = 1000;
 80002e0:	2380      	movs	r3, #128	; 0x80
 80002e2:	05db      	lsls	r3, r3, #23
 80002e4:	22fa      	movs	r2, #250	; 0xfa
 80002e6:	0092      	lsls	r2, r2, #2
 80002e8:	62da      	str	r2, [r3, #44]	; 0x2c
	  //Здороваюсь
	  char *hello = "\r\nAsk me:  ";
 80002ea:	4bc2      	ldr	r3, [pc, #776]	; (80005f4 <main+0x354>)
 80002ec:	627b      	str	r3, [r7, #36]	; 0x24
	  HAL_UART_Transmit(&huart1, hello, strlen(hello), -1);
 80002ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002f0:	0018      	movs	r0, r3
 80002f2:	f7ff ff09 	bl	8000108 <strlen>
 80002f6:	0003      	movs	r3, r0
 80002f8:	b29a      	uxth	r2, r3
 80002fa:	2301      	movs	r3, #1
 80002fc:	425b      	negs	r3, r3
 80002fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000300:	48bd      	ldr	r0, [pc, #756]	; (80005f8 <main+0x358>)
 8000302:	f002 fd2f 	bl	8002d64 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  // Передача данных, если пришло удаление
	  if(HAL_UART_Receive(&huart1, &buf, 1, 0)== HAL_OK) {
 8000306:	49bd      	ldr	r1, [pc, #756]	; (80005fc <main+0x35c>)
 8000308:	48bb      	ldr	r0, [pc, #748]	; (80005f8 <main+0x358>)
 800030a:	2300      	movs	r3, #0
 800030c:	2201      	movs	r2, #1
 800030e:	f002 fdd3 	bl	8002eb8 <HAL_UART_Receive>
 8000312:	1e03      	subs	r3, r0, #0
 8000314:	d1f7      	bne.n	8000306 <main+0x66>
//		  HAL_GPIO_WritePin(LEDTR_GPIO_Port, LEDTR_Pin, GPIO_PIN_SET);

		  if(buf == 127){
 8000316:	4bb9      	ldr	r3, [pc, #740]	; (80005fc <main+0x35c>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	2b7f      	cmp	r3, #127	; 0x7f
 800031c:	d117      	bne.n	800034e <main+0xae>
			  if(StrCounter != 0){
 800031e:	4bb8      	ldr	r3, [pc, #736]	; (8000600 <main+0x360>)
 8000320:	881b      	ldrh	r3, [r3, #0]
 8000322:	2b00      	cmp	r3, #0
 8000324:	d027      	beq.n	8000376 <main+0xd6>
				  HAL_UART_Transmit(&huart1, &briefly, 3, -1);
 8000326:	2301      	movs	r3, #1
 8000328:	425b      	negs	r3, r3
 800032a:	49b6      	ldr	r1, [pc, #728]	; (8000604 <main+0x364>)
 800032c:	48b2      	ldr	r0, [pc, #712]	; (80005f8 <main+0x358>)
 800032e:	2203      	movs	r2, #3
 8000330:	f002 fd18 	bl	8002d64 <HAL_UART_Transmit>
				  string[--StrCounter] = 0;
 8000334:	4bb2      	ldr	r3, [pc, #712]	; (8000600 <main+0x360>)
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	3b01      	subs	r3, #1
 800033a:	b29a      	uxth	r2, r3
 800033c:	4bb0      	ldr	r3, [pc, #704]	; (8000600 <main+0x360>)
 800033e:	801a      	strh	r2, [r3, #0]
 8000340:	4baf      	ldr	r3, [pc, #700]	; (8000600 <main+0x360>)
 8000342:	881b      	ldrh	r3, [r3, #0]
 8000344:	001a      	movs	r2, r3
 8000346:	4bb0      	ldr	r3, [pc, #704]	; (8000608 <main+0x368>)
 8000348:	2100      	movs	r1, #0
 800034a:	5499      	strb	r1, [r3, r2]
 800034c:	e013      	b.n	8000376 <main+0xd6>
			  }
		  } else {
			  HAL_UART_Transmit(&huart1, &buf, 1, -1);
 800034e:	2301      	movs	r3, #1
 8000350:	425b      	negs	r3, r3
 8000352:	49aa      	ldr	r1, [pc, #680]	; (80005fc <main+0x35c>)
 8000354:	48a8      	ldr	r0, [pc, #672]	; (80005f8 <main+0x358>)
 8000356:	2201      	movs	r2, #1
 8000358:	f002 fd04 	bl	8002d64 <HAL_UART_Transmit>
			  string[StrCounter] = buf;
 800035c:	4ba8      	ldr	r3, [pc, #672]	; (8000600 <main+0x360>)
 800035e:	881b      	ldrh	r3, [r3, #0]
 8000360:	001a      	movs	r2, r3
 8000362:	4ba6      	ldr	r3, [pc, #664]	; (80005fc <main+0x35c>)
 8000364:	7819      	ldrb	r1, [r3, #0]
 8000366:	4ba8      	ldr	r3, [pc, #672]	; (8000608 <main+0x368>)
 8000368:	5499      	strb	r1, [r3, r2]
			  StrCounter++;
 800036a:	4ba5      	ldr	r3, [pc, #660]	; (8000600 <main+0x360>)
 800036c:	881b      	ldrh	r3, [r3, #0]
 800036e:	3301      	adds	r3, #1
 8000370:	b29a      	uxth	r2, r3
 8000372:	4ba3      	ldr	r3, [pc, #652]	; (8000600 <main+0x360>)
 8000374:	801a      	strh	r2, [r3, #0]
		  }



	  // Передача данных на компьютер
	  	  if(buf == 13){
 8000376:	4ba1      	ldr	r3, [pc, #644]	; (80005fc <main+0x35c>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b0d      	cmp	r3, #13
 800037c:	d000      	beq.n	8000380 <main+0xe0>
 800037e:	e1a7      	b.n	80006d0 <main+0x430>
 8000380:	466b      	mov	r3, sp
 8000382:	4698      	mov	r8, r3
	  		  StrCounter--;
 8000384:	4b9e      	ldr	r3, [pc, #632]	; (8000600 <main+0x360>)
 8000386:	881b      	ldrh	r3, [r3, #0]
 8000388:	3b01      	subs	r3, #1
 800038a:	b29a      	uxth	r2, r3
 800038c:	4b9c      	ldr	r3, [pc, #624]	; (8000600 <main+0x360>)
 800038e:	801a      	strh	r2, [r3, #0]
	  		  sprintf(text, "\r\nText is: %s\r\n", string);
 8000390:	4a9d      	ldr	r2, [pc, #628]	; (8000608 <main+0x368>)
 8000392:	499e      	ldr	r1, [pc, #632]	; (800060c <main+0x36c>)
 8000394:	4b9e      	ldr	r3, [pc, #632]	; (8000610 <main+0x370>)
 8000396:	0018      	movs	r0, r3
 8000398:	f003 f96a 	bl	8003670 <siprintf>
	  		  HAL_UART_Transmit(&huart1, text, strlen(text), -1);
 800039c:	4b9c      	ldr	r3, [pc, #624]	; (8000610 <main+0x370>)
 800039e:	0018      	movs	r0, r3
 80003a0:	f7ff feb2 	bl	8000108 <strlen>
 80003a4:	0003      	movs	r3, r0
 80003a6:	b29a      	uxth	r2, r3
 80003a8:	2301      	movs	r3, #1
 80003aa:	425b      	negs	r3, r3
 80003ac:	4998      	ldr	r1, [pc, #608]	; (8000610 <main+0x370>)
 80003ae:	4892      	ldr	r0, [pc, #584]	; (80005f8 <main+0x358>)
 80003b0:	f002 fcd8 	bl	8002d64 <HAL_UART_Transmit>

	  		  char FixText[StrCounter][8];
 80003b4:	4b92      	ldr	r3, [pc, #584]	; (8000600 <main+0x360>)
 80003b6:	881b      	ldrh	r3, [r3, #0]
 80003b8:	001a      	movs	r2, r3
 80003ba:	3a01      	subs	r2, #1
 80003bc:	623a      	str	r2, [r7, #32]
 80003be:	60bb      	str	r3, [r7, #8]
 80003c0:	2200      	movs	r2, #0
 80003c2:	60fa      	str	r2, [r7, #12]
 80003c4:	68b8      	ldr	r0, [r7, #8]
 80003c6:	68f9      	ldr	r1, [r7, #12]
 80003c8:	0002      	movs	r2, r0
 80003ca:	0e92      	lsrs	r2, r2, #26
 80003cc:	000e      	movs	r6, r1
 80003ce:	01b5      	lsls	r5, r6, #6
 80003d0:	4315      	orrs	r5, r2
 80003d2:	0002      	movs	r2, r0
 80003d4:	0194      	lsls	r4, r2, #6
 80003d6:	603b      	str	r3, [r7, #0]
 80003d8:	2200      	movs	r2, #0
 80003da:	607a      	str	r2, [r7, #4]
 80003dc:	6838      	ldr	r0, [r7, #0]
 80003de:	6879      	ldr	r1, [r7, #4]
 80003e0:	0002      	movs	r2, r0
 80003e2:	0e92      	lsrs	r2, r2, #26
 80003e4:	000e      	movs	r6, r1
 80003e6:	01b6      	lsls	r6, r6, #6
 80003e8:	617e      	str	r6, [r7, #20]
 80003ea:	697e      	ldr	r6, [r7, #20]
 80003ec:	4316      	orrs	r6, r2
 80003ee:	617e      	str	r6, [r7, #20]
 80003f0:	0002      	movs	r2, r0
 80003f2:	0192      	lsls	r2, r2, #6
 80003f4:	613a      	str	r2, [r7, #16]
 80003f6:	00db      	lsls	r3, r3, #3
 80003f8:	3307      	adds	r3, #7
 80003fa:	08db      	lsrs	r3, r3, #3
 80003fc:	00db      	lsls	r3, r3, #3
 80003fe:	466a      	mov	r2, sp
 8000400:	1ad3      	subs	r3, r2, r3
 8000402:	469d      	mov	sp, r3
 8000404:	466b      	mov	r3, sp
 8000406:	3300      	adds	r3, #0
 8000408:	61fb      	str	r3, [r7, #28]
	  		  for(uint16_t i = 0; i < StrCounter; i++){
 800040a:	231c      	movs	r3, #28
 800040c:	2218      	movs	r2, #24
 800040e:	4694      	mov	ip, r2
 8000410:	44bc      	add	ip, r7
 8000412:	4463      	add	r3, ip
 8000414:	2200      	movs	r2, #0
 8000416:	801a      	strh	r2, [r3, #0]
 8000418:	e02f      	b.n	800047a <main+0x1da>
	  			  for(uint16_t j = 0; j < 8; j++){
 800041a:	231e      	movs	r3, #30
 800041c:	2218      	movs	r2, #24
 800041e:	4694      	mov	ip, r2
 8000420:	44bc      	add	ip, r7
 8000422:	4463      	add	r3, ip
 8000424:	2200      	movs	r2, #0
 8000426:	801a      	strh	r2, [r3, #0]
 8000428:	e016      	b.n	8000458 <main+0x1b8>
	  				  FixText[i][j] = 0;
 800042a:	231c      	movs	r3, #28
 800042c:	2218      	movs	r2, #24
 800042e:	4694      	mov	ip, r2
 8000430:	44bc      	add	ip, r7
 8000432:	4463      	add	r3, ip
 8000434:	881a      	ldrh	r2, [r3, #0]
 8000436:	201e      	movs	r0, #30
 8000438:	2618      	movs	r6, #24
 800043a:	19bb      	adds	r3, r7, r6
 800043c:	181b      	adds	r3, r3, r0
 800043e:	881b      	ldrh	r3, [r3, #0]
 8000440:	69f9      	ldr	r1, [r7, #28]
 8000442:	00d2      	lsls	r2, r2, #3
 8000444:	188a      	adds	r2, r1, r2
 8000446:	2100      	movs	r1, #0
 8000448:	54d1      	strb	r1, [r2, r3]
	  			  for(uint16_t j = 0; j < 8; j++){
 800044a:	19bb      	adds	r3, r7, r6
 800044c:	181b      	adds	r3, r3, r0
 800044e:	881a      	ldrh	r2, [r3, #0]
 8000450:	19bb      	adds	r3, r7, r6
 8000452:	181b      	adds	r3, r3, r0
 8000454:	3201      	adds	r2, #1
 8000456:	801a      	strh	r2, [r3, #0]
 8000458:	231e      	movs	r3, #30
 800045a:	2218      	movs	r2, #24
 800045c:	4694      	mov	ip, r2
 800045e:	44bc      	add	ip, r7
 8000460:	4463      	add	r3, ip
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	2b07      	cmp	r3, #7
 8000466:	d9e0      	bls.n	800042a <main+0x18a>
	  		  for(uint16_t i = 0; i < StrCounter; i++){
 8000468:	211c      	movs	r1, #28
 800046a:	2018      	movs	r0, #24
 800046c:	183b      	adds	r3, r7, r0
 800046e:	185b      	adds	r3, r3, r1
 8000470:	881a      	ldrh	r2, [r3, #0]
 8000472:	183b      	adds	r3, r7, r0
 8000474:	185b      	adds	r3, r3, r1
 8000476:	3201      	adds	r2, #1
 8000478:	801a      	strh	r2, [r3, #0]
 800047a:	4b61      	ldr	r3, [pc, #388]	; (8000600 <main+0x360>)
 800047c:	881b      	ldrh	r3, [r3, #0]
 800047e:	221c      	movs	r2, #28
 8000480:	2118      	movs	r1, #24
 8000482:	468c      	mov	ip, r1
 8000484:	44bc      	add	ip, r7
 8000486:	4462      	add	r2, ip
 8000488:	8812      	ldrh	r2, [r2, #0]
 800048a:	429a      	cmp	r2, r3
 800048c:	d3c5      	bcc.n	800041a <main+0x17a>
	  		  }
			  //Передача строки в PWM
//	  		  char *TR = "Transmitting...\r\n";
//	  		  HAL_UART_Transmit(&huart1, TR, strlen(TR), -1);

	  		  for(uint16_t i = 0; i < StrCounter; i++){
 800048e:	2320      	movs	r3, #32
 8000490:	2218      	movs	r2, #24
 8000492:	4694      	mov	ip, r2
 8000494:	44bc      	add	ip, r7
 8000496:	4463      	add	r3, ip
 8000498:	2200      	movs	r2, #0
 800049a:	801a      	strh	r2, [r3, #0]
 800049c:	e05e      	b.n	800055c <main+0x2bc>


	  			  //Запись символа в 10 системе
	  			  char symbol = string[i]; // 62, 2 ,3, 4
 800049e:	2320      	movs	r3, #32
 80004a0:	2218      	movs	r2, #24
 80004a2:	4694      	mov	ip, r2
 80004a4:	44bc      	add	ip, r7
 80004a6:	4463      	add	r3, ip
 80004a8:	881a      	ldrh	r2, [r3, #0]
 80004aa:	2323      	movs	r3, #35	; 0x23
 80004ac:	2118      	movs	r1, #24
 80004ae:	468c      	mov	ip, r1
 80004b0:	44bc      	add	ip, r7
 80004b2:	4463      	add	r3, ip
 80004b4:	4954      	ldr	r1, [pc, #336]	; (8000608 <main+0x368>)
 80004b6:	5c8a      	ldrb	r2, [r1, r2]
 80004b8:	701a      	strb	r2, [r3, #0]
	  			  int cell = 7;
 80004ba:	2307      	movs	r3, #7
 80004bc:	63fb      	str	r3, [r7, #60]	; 0x3c

	  			  // Перевод символа в двоичную систему
	  			  while(symbol != 0){
 80004be:	e03c      	b.n	800053a <main+0x29a>
	  				  if(symbol % 2 == 0){
 80004c0:	2123      	movs	r1, #35	; 0x23
 80004c2:	2018      	movs	r0, #24
 80004c4:	183b      	adds	r3, r7, r0
 80004c6:	185b      	adds	r3, r3, r1
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2201      	movs	r2, #1
 80004cc:	4013      	ands	r3, r2
 80004ce:	b2db      	uxtb	r3, r3
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d117      	bne.n	8000504 <main+0x264>
	  					  FixText[i][cell] = 0;
 80004d4:	2320      	movs	r3, #32
 80004d6:	2218      	movs	r2, #24
 80004d8:	4694      	mov	ip, r2
 80004da:	44bc      	add	ip, r7
 80004dc:	4463      	add	r3, ip
 80004de:	881b      	ldrh	r3, [r3, #0]
 80004e0:	69fa      	ldr	r2, [r7, #28]
 80004e2:	00db      	lsls	r3, r3, #3
 80004e4:	18d2      	adds	r2, r2, r3
 80004e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004e8:	18d3      	adds	r3, r2, r3
 80004ea:	2200      	movs	r2, #0
 80004ec:	701a      	strb	r2, [r3, #0]
	  					  symbol /= 2;
 80004ee:	183b      	adds	r3, r7, r0
 80004f0:	185b      	adds	r3, r3, r1
 80004f2:	183a      	adds	r2, r7, r0
 80004f4:	1852      	adds	r2, r2, r1
 80004f6:	7812      	ldrb	r2, [r2, #0]
 80004f8:	0852      	lsrs	r2, r2, #1
 80004fa:	701a      	strb	r2, [r3, #0]
	  					  cell--;
 80004fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80004fe:	3b01      	subs	r3, #1
 8000500:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000502:	e01a      	b.n	800053a <main+0x29a>
	  				  } else {
	  					  FixText[i][cell] = 1;
 8000504:	2320      	movs	r3, #32
 8000506:	2218      	movs	r2, #24
 8000508:	4694      	mov	ip, r2
 800050a:	44bc      	add	ip, r7
 800050c:	4463      	add	r3, ip
 800050e:	881b      	ldrh	r3, [r3, #0]
 8000510:	69fa      	ldr	r2, [r7, #28]
 8000512:	00db      	lsls	r3, r3, #3
 8000514:	18d2      	adds	r2, r2, r3
 8000516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000518:	18d3      	adds	r3, r2, r3
 800051a:	2201      	movs	r2, #1
 800051c:	701a      	strb	r2, [r3, #0]
	  					  symbol /= 2;
 800051e:	2223      	movs	r2, #35	; 0x23
 8000520:	2318      	movs	r3, #24
 8000522:	18fb      	adds	r3, r7, r3
 8000524:	189b      	adds	r3, r3, r2
 8000526:	2118      	movs	r1, #24
 8000528:	468c      	mov	ip, r1
 800052a:	44bc      	add	ip, r7
 800052c:	4462      	add	r2, ip
 800052e:	7812      	ldrb	r2, [r2, #0]
 8000530:	0852      	lsrs	r2, r2, #1
 8000532:	701a      	strb	r2, [r3, #0]
	  					  cell--;
 8000534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000536:	3b01      	subs	r3, #1
 8000538:	63fb      	str	r3, [r7, #60]	; 0x3c
	  			  while(symbol != 0){
 800053a:	2323      	movs	r3, #35	; 0x23
 800053c:	2218      	movs	r2, #24
 800053e:	4694      	mov	ip, r2
 8000540:	44bc      	add	ip, r7
 8000542:	4463      	add	r3, ip
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d1ba      	bne.n	80004c0 <main+0x220>
	  		  for(uint16_t i = 0; i < StrCounter; i++){
 800054a:	2120      	movs	r1, #32
 800054c:	2018      	movs	r0, #24
 800054e:	183b      	adds	r3, r7, r0
 8000550:	185b      	adds	r3, r3, r1
 8000552:	881a      	ldrh	r2, [r3, #0]
 8000554:	183b      	adds	r3, r7, r0
 8000556:	185b      	adds	r3, r3, r1
 8000558:	3201      	adds	r2, #1
 800055a:	801a      	strh	r2, [r3, #0]
 800055c:	4b28      	ldr	r3, [pc, #160]	; (8000600 <main+0x360>)
 800055e:	881b      	ldrh	r3, [r3, #0]
 8000560:	2220      	movs	r2, #32
 8000562:	2118      	movs	r1, #24
 8000564:	468c      	mov	ip, r1
 8000566:	44bc      	add	ip, r7
 8000568:	4462      	add	r2, ip
 800056a:	8812      	ldrh	r2, [r2, #0]
 800056c:	429a      	cmp	r2, r3
 800056e:	d396      	bcc.n	800049e <main+0x1fe>

	  		  }
  			  //Работа с таймером PWM
//	  		  flag = 1;

			htim1.Instance->CCR1 = 750;
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <main+0x34c>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a27      	ldr	r2, [pc, #156]	; (8000614 <main+0x374>)
 8000576:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1000);
 8000578:	23fa      	movs	r3, #250	; 0xfa
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	0018      	movs	r0, r3
 800057e:	f000 fcc1 	bl	8000f04 <HAL_Delay>
			htim1.Instance->CCR1 = 250;
 8000582:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <main+0x34c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	22fa      	movs	r2, #250	; 0xfa
 8000588:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1000);
 800058a:	23fa      	movs	r3, #250	; 0xfa
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	0018      	movs	r0, r3
 8000590:	f000 fcb8 	bl	8000f04 <HAL_Delay>
			htim1.Instance->CCR1 = 750;
 8000594:	4b15      	ldr	r3, [pc, #84]	; (80005ec <main+0x34c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a1e      	ldr	r2, [pc, #120]	; (8000614 <main+0x374>)
 800059a:	635a      	str	r2, [r3, #52]	; 0x34
			HAL_Delay(1000);
 800059c:	23fa      	movs	r3, #250	; 0xfa
 800059e:	009b      	lsls	r3, r3, #2
 80005a0:	0018      	movs	r0, r3
 80005a2:	f000 fcaf 	bl	8000f04 <HAL_Delay>

	  		  for(int a = 0; a < StrCounter; a++){
 80005a6:	2300      	movs	r3, #0
 80005a8:	633b      	str	r3, [r7, #48]	; 0x30
 80005aa:	e048      	b.n	800063e <main+0x39e>
	  			  for(int b = 0; b < 8; b++){
 80005ac:	2300      	movs	r3, #0
 80005ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80005b0:	e03f      	b.n	8000632 <main+0x392>
	  				  if(FixText[a][b] == 0){
 80005b2:	69fa      	ldr	r2, [r7, #28]
 80005b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005b6:	00db      	lsls	r3, r3, #3
 80005b8:	18d2      	adds	r2, r2, r3
 80005ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005bc:	18d3      	adds	r3, r2, r3
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d104      	bne.n	80005ce <main+0x32e>
	  					  htim1.Instance->CCR1 = 250;
 80005c4:	4b09      	ldr	r3, [pc, #36]	; (80005ec <main+0x34c>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	22fa      	movs	r2, #250	; 0xfa
 80005ca:	635a      	str	r2, [r3, #52]	; 0x34
 80005cc:	e029      	b.n	8000622 <main+0x382>
	  				  } else if(FixText[a][b] == 1){
 80005ce:	69fa      	ldr	r2, [r7, #28]
 80005d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80005d2:	00db      	lsls	r3, r3, #3
 80005d4:	18d2      	adds	r2, r2, r3
 80005d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005d8:	18d3      	adds	r3, r2, r3
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d11b      	bne.n	8000618 <main+0x378>
	  					  htim1.Instance->CCR1 = 750;
 80005e0:	4b02      	ldr	r3, [pc, #8]	; (80005ec <main+0x34c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a0b      	ldr	r2, [pc, #44]	; (8000614 <main+0x374>)
 80005e6:	635a      	str	r2, [r3, #52]	; 0x34
 80005e8:	e01b      	b.n	8000622 <main+0x382>
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	20000930 	.word	0x20000930
 80005f0:	20000978 	.word	0x20000978
 80005f4:	08003ed4 	.word	0x08003ed4
 80005f8:	200008ac 	.word	0x200008ac
 80005fc:	20000096 	.word	0x20000096
 8000600:	20000094 	.word	0x20000094
 8000604:	20000000 	.word	0x20000000
 8000608:	20000098 	.word	0x20000098
 800060c:	08003ee0 	.word	0x08003ee0
 8000610:	20000498 	.word	0x20000498
 8000614:	000002ee 	.word	0x000002ee
	  				  } else htim1.Instance->CCR1 = 1000;
 8000618:	4b2f      	ldr	r3, [pc, #188]	; (80006d8 <main+0x438>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	22fa      	movs	r2, #250	; 0xfa
 800061e:	0092      	lsls	r2, r2, #2
 8000620:	635a      	str	r2, [r3, #52]	; 0x34
	  				  HAL_Delay(1000);
 8000622:	23fa      	movs	r3, #250	; 0xfa
 8000624:	009b      	lsls	r3, r3, #2
 8000626:	0018      	movs	r0, r3
 8000628:	f000 fc6c 	bl	8000f04 <HAL_Delay>
	  			  for(int b = 0; b < 8; b++){
 800062c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800062e:	3301      	adds	r3, #1
 8000630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000634:	2b07      	cmp	r3, #7
 8000636:	ddbc      	ble.n	80005b2 <main+0x312>
	  		  for(int a = 0; a < StrCounter; a++){
 8000638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800063a:	3301      	adds	r3, #1
 800063c:	633b      	str	r3, [r7, #48]	; 0x30
 800063e:	4b27      	ldr	r3, [pc, #156]	; (80006dc <main+0x43c>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	001a      	movs	r2, r3
 8000644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000646:	4293      	cmp	r3, r2
 8000648:	dbb0      	blt.n	80005ac <main+0x30c>
	  			  }
	  		  }

  			  //Конец работы в PWM
	  		char *EndTR = "End transmittin...\r\n";
 800064a:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <main+0x440>)
 800064c:	61bb      	str	r3, [r7, #24]
	  		HAL_UART_Transmit(&huart1, EndTR, strlen(EndTR), -1);
 800064e:	69bb      	ldr	r3, [r7, #24]
 8000650:	0018      	movs	r0, r3
 8000652:	f7ff fd59 	bl	8000108 <strlen>
 8000656:	0003      	movs	r3, r0
 8000658:	b29a      	uxth	r2, r3
 800065a:	2301      	movs	r3, #1
 800065c:	425b      	negs	r3, r3
 800065e:	69b9      	ldr	r1, [r7, #24]
 8000660:	4820      	ldr	r0, [pc, #128]	; (80006e4 <main+0x444>)
 8000662:	f002 fb7f 	bl	8002d64 <HAL_UART_Transmit>
	  		htim1.Instance->CCR1 = 0;
 8000666:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <main+0x438>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2200      	movs	r2, #0
 800066c:	635a      	str	r2, [r3, #52]	; 0x34

  			  // Очистка массива
	  		  for(uint16_t k = 0; k < 1024; k++){
 800066e:	2312      	movs	r3, #18
 8000670:	2218      	movs	r2, #24
 8000672:	4694      	mov	ip, r2
 8000674:	44bc      	add	ip, r7
 8000676:	4463      	add	r3, ip
 8000678:	2200      	movs	r2, #0
 800067a:	801a      	strh	r2, [r3, #0]
 800067c:	e00e      	b.n	800069c <main+0x3fc>
	  			  string[k] = 0;
 800067e:	2012      	movs	r0, #18
 8000680:	2618      	movs	r6, #24
 8000682:	19bb      	adds	r3, r7, r6
 8000684:	181b      	adds	r3, r3, r0
 8000686:	881b      	ldrh	r3, [r3, #0]
 8000688:	4a17      	ldr	r2, [pc, #92]	; (80006e8 <main+0x448>)
 800068a:	2100      	movs	r1, #0
 800068c:	54d1      	strb	r1, [r2, r3]
	  		  for(uint16_t k = 0; k < 1024; k++){
 800068e:	19bb      	adds	r3, r7, r6
 8000690:	181b      	adds	r3, r3, r0
 8000692:	881a      	ldrh	r2, [r3, #0]
 8000694:	19bb      	adds	r3, r7, r6
 8000696:	181b      	adds	r3, r3, r0
 8000698:	3201      	adds	r2, #1
 800069a:	801a      	strh	r2, [r3, #0]
 800069c:	2312      	movs	r3, #18
 800069e:	2218      	movs	r2, #24
 80006a0:	4694      	mov	ip, r2
 80006a2:	44bc      	add	ip, r7
 80006a4:	4463      	add	r3, ip
 80006a6:	881a      	ldrh	r2, [r3, #0]
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d3e6      	bcc.n	800067e <main+0x3de>
	  		  }
	  		  HAL_UART_Transmit(&huart1, hello, strlen(hello), -1);
 80006b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006b2:	0018      	movs	r0, r3
 80006b4:	f7ff fd28 	bl	8000108 <strlen>
 80006b8:	0003      	movs	r3, r0
 80006ba:	b29a      	uxth	r2, r3
 80006bc:	2301      	movs	r3, #1
 80006be:	425b      	negs	r3, r3
 80006c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80006c2:	4808      	ldr	r0, [pc, #32]	; (80006e4 <main+0x444>)
 80006c4:	f002 fb4e 	bl	8002d64 <HAL_UART_Transmit>
	  		  StrCounter = 0;
 80006c8:	4b04      	ldr	r3, [pc, #16]	; (80006dc <main+0x43c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	801a      	strh	r2, [r3, #0]
 80006ce:	46c5      	mov	sp, r8
	  	  }

	  	  buf = 0;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <main+0x44c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
	  if(HAL_UART_Receive(&huart1, &buf, 1, 0)== HAL_OK) {
 80006d6:	e616      	b.n	8000306 <main+0x66>
 80006d8:	20000930 	.word	0x20000930
 80006dc:	20000094 	.word	0x20000094
 80006e0:	08003ef0 	.word	0x08003ef0
 80006e4:	200008ac 	.word	0x200008ac
 80006e8:	20000098 	.word	0x20000098
 80006ec:	20000096 	.word	0x20000096

080006f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b099      	sub	sp, #100	; 0x64
 80006f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	242c      	movs	r4, #44	; 0x2c
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	0018      	movs	r0, r3
 80006fc:	2334      	movs	r3, #52	; 0x34
 80006fe:	001a      	movs	r2, r3
 8000700:	2100      	movs	r1, #0
 8000702:	f002 ffad 	bl	8003660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000706:	231c      	movs	r3, #28
 8000708:	18fb      	adds	r3, r7, r3
 800070a:	0018      	movs	r0, r3
 800070c:	2310      	movs	r3, #16
 800070e:	001a      	movs	r2, r3
 8000710:	2100      	movs	r1, #0
 8000712:	f002 ffa5 	bl	8003660 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	0018      	movs	r0, r3
 800071a:	2318      	movs	r3, #24
 800071c:	001a      	movs	r2, r3
 800071e:	2100      	movs	r1, #0
 8000720:	f002 ff9e 	bl	8003660 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2220      	movs	r2, #32
 8000728:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2201      	movs	r2, #1
 800072e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000730:	193b      	adds	r3, r7, r4
 8000732:	2200      	movs	r2, #0
 8000734:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000736:	193b      	adds	r3, r7, r4
 8000738:	0018      	movs	r0, r3
 800073a:	f000 fe6b 	bl	8001414 <HAL_RCC_OscConfig>
 800073e:	1e03      	subs	r3, r0, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8000742:	f000 f9a7 	bl	8000a94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000746:	211c      	movs	r1, #28
 8000748:	187b      	adds	r3, r7, r1
 800074a:	2207      	movs	r2, #7
 800074c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800074e:	187b      	adds	r3, r7, r1
 8000750:	2203      	movs	r2, #3
 8000752:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	187b      	adds	r3, r7, r1
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2200      	movs	r2, #0
 800075e:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2101      	movs	r1, #1
 8000764:	0018      	movs	r0, r3
 8000766:	f001 f9db 	bl	8001b20 <HAL_RCC_ClockConfig>
 800076a:	1e03      	subs	r3, r0, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800076e:	f000 f991 	bl	8000a94 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	2201      	movs	r2, #1
 8000776:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000778:	1d3b      	adds	r3, r7, #4
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	0018      	movs	r0, r3
 8000782:	f001 fb47 	bl	8001e14 <HAL_RCCEx_PeriphCLKConfig>
 8000786:	1e03      	subs	r3, r0, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800078a:	f000 f983 	bl	8000a94 <Error_Handler>
  }
}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	46bd      	mov	sp, r7
 8000792:	b019      	add	sp, #100	; 0x64
 8000794:	bd90      	pop	{r4, r7, pc}
	...

08000798 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b092      	sub	sp, #72	; 0x48
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079e:	2340      	movs	r3, #64	; 0x40
 80007a0:	18fb      	adds	r3, r7, r3
 80007a2:	0018      	movs	r0, r3
 80007a4:	2308      	movs	r3, #8
 80007a6:	001a      	movs	r2, r3
 80007a8:	2100      	movs	r1, #0
 80007aa:	f002 ff59 	bl	8003660 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ae:	2324      	movs	r3, #36	; 0x24
 80007b0:	18fb      	adds	r3, r7, r3
 80007b2:	0018      	movs	r0, r3
 80007b4:	231c      	movs	r3, #28
 80007b6:	001a      	movs	r2, r3
 80007b8:	2100      	movs	r1, #0
 80007ba:	f002 ff51 	bl	8003660 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	0018      	movs	r0, r3
 80007c2:	2320      	movs	r3, #32
 80007c4:	001a      	movs	r2, r3
 80007c6:	2100      	movs	r1, #0
 80007c8:	f002 ff4a 	bl	8003660 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007cc:	4b3b      	ldr	r3, [pc, #236]	; (80008bc <MX_TIM1_Init+0x124>)
 80007ce:	4a3c      	ldr	r2, [pc, #240]	; (80008c0 <MX_TIM1_Init+0x128>)
 80007d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 48000-1;
 80007d2:	4b3a      	ldr	r3, [pc, #232]	; (80008bc <MX_TIM1_Init+0x124>)
 80007d4:	4a3b      	ldr	r2, [pc, #236]	; (80008c4 <MX_TIM1_Init+0x12c>)
 80007d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d8:	4b38      	ldr	r3, [pc, #224]	; (80008bc <MX_TIM1_Init+0x124>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80007de:	4b37      	ldr	r3, [pc, #220]	; (80008bc <MX_TIM1_Init+0x124>)
 80007e0:	22fa      	movs	r2, #250	; 0xfa
 80007e2:	0092      	lsls	r2, r2, #2
 80007e4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007e6:	4b35      	ldr	r3, [pc, #212]	; (80008bc <MX_TIM1_Init+0x124>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007ec:	4b33      	ldr	r3, [pc, #204]	; (80008bc <MX_TIM1_Init+0x124>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007f2:	4b32      	ldr	r3, [pc, #200]	; (80008bc <MX_TIM1_Init+0x124>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007f8:	4b30      	ldr	r3, [pc, #192]	; (80008bc <MX_TIM1_Init+0x124>)
 80007fa:	0018      	movs	r0, r3
 80007fc:	f001 fbf8 	bl	8001ff0 <HAL_TIM_PWM_Init>
 8000800:	1e03      	subs	r3, r0, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000804:	f000 f946 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000808:	2140      	movs	r1, #64	; 0x40
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2200      	movs	r2, #0
 8000814:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000816:	187a      	adds	r2, r7, r1
 8000818:	4b28      	ldr	r3, [pc, #160]	; (80008bc <MX_TIM1_Init+0x124>)
 800081a:	0011      	movs	r1, r2
 800081c:	0018      	movs	r0, r3
 800081e:	f002 f987 	bl	8002b30 <HAL_TIMEx_MasterConfigSynchronization>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d001      	beq.n	800082a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000826:	f000 f935 	bl	8000a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082a:	2124      	movs	r1, #36	; 0x24
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2260      	movs	r2, #96	; 0x60
 8000830:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2200      	movs	r2, #0
 8000836:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2200      	movs	r2, #0
 800083c:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2200      	movs	r2, #0
 8000842:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000856:	1879      	adds	r1, r7, r1
 8000858:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_TIM1_Init+0x124>)
 800085a:	2200      	movs	r2, #0
 800085c:	0018      	movs	r0, r3
 800085e:	f001 fe11 	bl	8002484 <HAL_TIM_PWM_ConfigChannel>
 8000862:	1e03      	subs	r3, r0, #0
 8000864:	d001      	beq.n	800086a <MX_TIM1_Init+0xd2>
  {
    Error_Handler();
 8000866:	f000 f915 	bl	8000a94 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000882:	1d3b      	adds	r3, r7, #4
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2280      	movs	r2, #128	; 0x80
 800088c:	0192      	lsls	r2, r2, #6
 800088e:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000896:	1d3a      	adds	r2, r7, #4
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <MX_TIM1_Init+0x124>)
 800089a:	0011      	movs	r1, r2
 800089c:	0018      	movs	r0, r3
 800089e:	f002 f99f 	bl	8002be0 <HAL_TIMEx_ConfigBreakDeadTime>
 80008a2:	1e03      	subs	r3, r0, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM1_Init+0x112>
  {
    Error_Handler();
 80008a6:	f000 f8f5 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008aa:	4b04      	ldr	r3, [pc, #16]	; (80008bc <MX_TIM1_Init+0x124>)
 80008ac:	0018      	movs	r0, r3
 80008ae:	f000 f95d 	bl	8000b6c <HAL_TIM_MspPostInit>

}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	46bd      	mov	sp, r7
 80008b6:	b012      	add	sp, #72	; 0x48
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	46c0      	nop			; (mov r8, r8)
 80008bc:	20000930 	.word	0x20000930
 80008c0:	40012c00 	.word	0x40012c00
 80008c4:	0000bb7f 	.word	0x0000bb7f

080008c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ce:	2320      	movs	r3, #32
 80008d0:	18fb      	adds	r3, r7, r3
 80008d2:	0018      	movs	r0, r3
 80008d4:	2308      	movs	r3, #8
 80008d6:	001a      	movs	r2, r3
 80008d8:	2100      	movs	r1, #0
 80008da:	f002 fec1 	bl	8003660 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	0018      	movs	r0, r3
 80008e2:	231c      	movs	r3, #28
 80008e4:	001a      	movs	r2, r3
 80008e6:	2100      	movs	r1, #0
 80008e8:	f002 feba 	bl	8003660 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008ec:	4b25      	ldr	r3, [pc, #148]	; (8000984 <MX_TIM2_Init+0xbc>)
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	05d2      	lsls	r2, r2, #23
 80008f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 480-1;
 80008f4:	4b23      	ldr	r3, [pc, #140]	; (8000984 <MX_TIM2_Init+0xbc>)
 80008f6:	22e0      	movs	r2, #224	; 0xe0
 80008f8:	32ff      	adds	r2, #255	; 0xff
 80008fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fc:	4b21      	ldr	r3, [pc, #132]	; (8000984 <MX_TIM2_Init+0xbc>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8000902:	4b20      	ldr	r3, [pc, #128]	; (8000984 <MX_TIM2_Init+0xbc>)
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000908:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <MX_TIM2_Init+0xbc>)
 800090a:	2200      	movs	r2, #0
 800090c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <MX_TIM2_Init+0xbc>)
 8000910:	2200      	movs	r2, #0
 8000912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <MX_TIM2_Init+0xbc>)
 8000916:	0018      	movs	r0, r3
 8000918:	f001 fb6a 	bl	8001ff0 <HAL_TIM_PWM_Init>
 800091c:	1e03      	subs	r3, r0, #0
 800091e:	d001      	beq.n	8000924 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000920:	f000 f8b8 	bl	8000a94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000924:	2120      	movs	r1, #32
 8000926:	187b      	adds	r3, r7, r1
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800092c:	187b      	adds	r3, r7, r1
 800092e:	2200      	movs	r2, #0
 8000930:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000932:	187a      	adds	r2, r7, r1
 8000934:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_TIM2_Init+0xbc>)
 8000936:	0011      	movs	r1, r2
 8000938:	0018      	movs	r0, r3
 800093a:	f002 f8f9 	bl	8002b30 <HAL_TIMEx_MasterConfigSynchronization>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000942:	f000 f8a7 	bl	8000a94 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000946:	1d3b      	adds	r3, r7, #4
 8000948:	2260      	movs	r2, #96	; 0x60
 800094a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2200      	movs	r2, #0
 8000950:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000952:	1d3b      	adds	r3, r7, #4
 8000954:	2200      	movs	r2, #0
 8000956:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	2200      	movs	r2, #0
 800095c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800095e:	1d39      	adds	r1, r7, #4
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_TIM2_Init+0xbc>)
 8000962:	2204      	movs	r2, #4
 8000964:	0018      	movs	r0, r3
 8000966:	f001 fd8d 	bl	8002484 <HAL_TIM_PWM_ConfigChannel>
 800096a:	1e03      	subs	r3, r0, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800096e:	f000 f891 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000972:	4b04      	ldr	r3, [pc, #16]	; (8000984 <MX_TIM2_Init+0xbc>)
 8000974:	0018      	movs	r0, r3
 8000976:	f000 f8f9 	bl	8000b6c <HAL_TIM_MspPostInit>

}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	46bd      	mov	sp, r7
 800097e:	b00a      	add	sp, #40	; 0x28
 8000980:	bd80      	pop	{r7, pc}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	20000978 	.word	0x20000978

08000988 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800098c:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_USART1_UART_Init+0x58>)
 800098e:	4a15      	ldr	r2, [pc, #84]	; (80009e4 <MX_USART1_UART_Init+0x5c>)
 8000990:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_USART1_UART_Init+0x58>)
 8000994:	22e1      	movs	r2, #225	; 0xe1
 8000996:	0252      	lsls	r2, r2, #9
 8000998:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_USART1_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_USART1_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_USART1_UART_Init+0x58>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <MX_USART1_UART_Init+0x58>)
 80009ae:	220c      	movs	r2, #12
 80009b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_USART1_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b8:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <MX_USART1_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009be:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_USART1_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <MX_USART1_UART_Init+0x58>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <MX_USART1_UART_Init+0x58>)
 80009cc:	0018      	movs	r0, r3
 80009ce:	f002 f975 	bl	8002cbc <HAL_UART_Init>
 80009d2:	1e03      	subs	r3, r0, #0
 80009d4:	d001      	beq.n	80009da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009d6:	f000 f85d 	bl	8000a94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200008ac 	.word	0x200008ac
 80009e4:	40013800 	.word	0x40013800

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b089      	sub	sp, #36	; 0x24
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	240c      	movs	r4, #12
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	0018      	movs	r0, r3
 80009f4:	2314      	movs	r3, #20
 80009f6:	001a      	movs	r2, r3
 80009f8:	2100      	movs	r1, #0
 80009fa:	f002 fe31 	bl	8003660 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009fe:	4b23      	ldr	r3, [pc, #140]	; (8000a8c <MX_GPIO_Init+0xa4>)
 8000a00:	695a      	ldr	r2, [r3, #20]
 8000a02:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <MX_GPIO_Init+0xa4>)
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	03c9      	lsls	r1, r1, #15
 8000a08:	430a      	orrs	r2, r1
 8000a0a:	615a      	str	r2, [r3, #20]
 8000a0c:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <MX_GPIO_Init+0xa4>)
 8000a0e:	695a      	ldr	r2, [r3, #20]
 8000a10:	2380      	movs	r3, #128	; 0x80
 8000a12:	03db      	lsls	r3, r3, #15
 8000a14:	4013      	ands	r3, r2
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1a:	4b1c      	ldr	r3, [pc, #112]	; (8000a8c <MX_GPIO_Init+0xa4>)
 8000a1c:	695a      	ldr	r2, [r3, #20]
 8000a1e:	4b1b      	ldr	r3, [pc, #108]	; (8000a8c <MX_GPIO_Init+0xa4>)
 8000a20:	2180      	movs	r1, #128	; 0x80
 8000a22:	0289      	lsls	r1, r1, #10
 8000a24:	430a      	orrs	r2, r1
 8000a26:	615a      	str	r2, [r3, #20]
 8000a28:	4b18      	ldr	r3, [pc, #96]	; (8000a8c <MX_GPIO_Init+0xa4>)
 8000a2a:	695a      	ldr	r2, [r3, #20]
 8000a2c:	2380      	movs	r3, #128	; 0x80
 8000a2e:	029b      	lsls	r3, r3, #10
 8000a30:	4013      	ands	r3, r2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <MX_GPIO_Init+0xa4>)
 8000a38:	695a      	ldr	r2, [r3, #20]
 8000a3a:	4b14      	ldr	r3, [pc, #80]	; (8000a8c <MX_GPIO_Init+0xa4>)
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	02c9      	lsls	r1, r1, #11
 8000a40:	430a      	orrs	r2, r1
 8000a42:	615a      	str	r2, [r3, #20]
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <MX_GPIO_Init+0xa4>)
 8000a46:	695a      	ldr	r2, [r3, #20]
 8000a48:	2380      	movs	r3, #128	; 0x80
 8000a4a:	02db      	lsls	r3, r3, #11
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	603b      	str	r3, [r7, #0]
 8000a50:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LEDTR_GPIO_Port, LEDTR_Pin, GPIO_PIN_RESET);
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_GPIO_Init+0xa8>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	2110      	movs	r1, #16
 8000a58:	0018      	movs	r0, r3
 8000a5a:	f000 fcbd 	bl	80013d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LEDTR_Pin */
  GPIO_InitStruct.Pin = LEDTR_Pin;
 8000a5e:	0021      	movs	r1, r4
 8000a60:	187b      	adds	r3, r7, r1
 8000a62:	2210      	movs	r2, #16
 8000a64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a66:	187b      	adds	r3, r7, r1
 8000a68:	2201      	movs	r2, #1
 8000a6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2200      	movs	r2, #0
 8000a76:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LEDTR_GPIO_Port, &GPIO_InitStruct);
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <MX_GPIO_Init+0xa8>)
 8000a7c:	0019      	movs	r1, r3
 8000a7e:	0010      	movs	r0, r2
 8000a80:	f000 fb42 	bl	8001108 <HAL_GPIO_Init>

}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b009      	add	sp, #36	; 0x24
 8000a8a:	bd90      	pop	{r4, r7, pc}
 8000a8c:	40021000 	.word	0x40021000
 8000a90:	48000400 	.word	0x48000400

08000a94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <Error_Handler+0x8>
	...

08000aa0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_MspInit+0x44>)
 8000aa8:	699a      	ldr	r2, [r3, #24]
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <HAL_MspInit+0x44>)
 8000aac:	2101      	movs	r1, #1
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	619a      	str	r2, [r3, #24]
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	4013      	ands	r3, r2
 8000aba:	607b      	str	r3, [r7, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000abe:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ac0:	69da      	ldr	r2, [r3, #28]
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ac4:	2180      	movs	r1, #128	; 0x80
 8000ac6:	0549      	lsls	r1, r1, #21
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	61da      	str	r2, [r3, #28]
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <HAL_MspInit+0x44>)
 8000ace:	69da      	ldr	r2, [r3, #28]
 8000ad0:	2380      	movs	r3, #128	; 0x80
 8000ad2:	055b      	lsls	r3, r3, #21
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	46bd      	mov	sp, r7
 8000ade:	b002      	add	sp, #8
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	40021000 	.word	0x40021000

08000ae8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a1b      	ldr	r2, [pc, #108]	; (8000b64 <HAL_TIM_PWM_MspInit+0x7c>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d116      	bne.n	8000b28 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000afa:	4b1b      	ldr	r3, [pc, #108]	; (8000b68 <HAL_TIM_PWM_MspInit+0x80>)
 8000afc:	699a      	ldr	r2, [r3, #24]
 8000afe:	4b1a      	ldr	r3, [pc, #104]	; (8000b68 <HAL_TIM_PWM_MspInit+0x80>)
 8000b00:	2180      	movs	r1, #128	; 0x80
 8000b02:	0109      	lsls	r1, r1, #4
 8000b04:	430a      	orrs	r2, r1
 8000b06:	619a      	str	r2, [r3, #24]
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <HAL_TIM_PWM_MspInit+0x80>)
 8000b0a:	699a      	ldr	r2, [r3, #24]
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	011b      	lsls	r3, r3, #4
 8000b10:	4013      	ands	r3, r2
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000b16:	2200      	movs	r2, #0
 8000b18:	2100      	movs	r1, #0
 8000b1a:	200e      	movs	r0, #14
 8000b1c:	f000 fac2 	bl	80010a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000b20:	200e      	movs	r0, #14
 8000b22:	f000 fad4 	bl	80010ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b26:	e019      	b.n	8000b5c <HAL_TIM_PWM_MspInit+0x74>
  else if(htim_pwm->Instance==TIM2)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681a      	ldr	r2, [r3, #0]
 8000b2c:	2380      	movs	r3, #128	; 0x80
 8000b2e:	05db      	lsls	r3, r3, #23
 8000b30:	429a      	cmp	r2, r3
 8000b32:	d113      	bne.n	8000b5c <HAL_TIM_PWM_MspInit+0x74>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <HAL_TIM_PWM_MspInit+0x80>)
 8000b36:	69da      	ldr	r2, [r3, #28]
 8000b38:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <HAL_TIM_PWM_MspInit+0x80>)
 8000b3a:	2101      	movs	r1, #1
 8000b3c:	430a      	orrs	r2, r1
 8000b3e:	61da      	str	r2, [r3, #28]
 8000b40:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <HAL_TIM_PWM_MspInit+0x80>)
 8000b42:	69db      	ldr	r3, [r3, #28]
 8000b44:	2201      	movs	r2, #1
 8000b46:	4013      	ands	r3, r2
 8000b48:	60bb      	str	r3, [r7, #8]
 8000b4a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	200f      	movs	r0, #15
 8000b52:	f000 faa7 	bl	80010a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b56:	200f      	movs	r0, #15
 8000b58:	f000 fab9 	bl	80010ce <HAL_NVIC_EnableIRQ>
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b004      	add	sp, #16
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	40012c00 	.word	0x40012c00
 8000b68:	40021000 	.word	0x40021000

08000b6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b6c:	b590      	push	{r4, r7, lr}
 8000b6e:	b08b      	sub	sp, #44	; 0x2c
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	2414      	movs	r4, #20
 8000b76:	193b      	adds	r3, r7, r4
 8000b78:	0018      	movs	r0, r3
 8000b7a:	2314      	movs	r3, #20
 8000b7c:	001a      	movs	r2, r3
 8000b7e:	2100      	movs	r1, #0
 8000b80:	f002 fd6e 	bl	8003660 <memset>
  if(htim->Instance==TIM1)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a2b      	ldr	r2, [pc, #172]	; (8000c38 <HAL_TIM_MspPostInit+0xcc>)
 8000b8a:	4293      	cmp	r3, r2
 8000b8c:	d126      	bne.n	8000bdc <HAL_TIM_MspPostInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8e:	4b2b      	ldr	r3, [pc, #172]	; (8000c3c <HAL_TIM_MspPostInit+0xd0>)
 8000b90:	695a      	ldr	r2, [r3, #20]
 8000b92:	4b2a      	ldr	r3, [pc, #168]	; (8000c3c <HAL_TIM_MspPostInit+0xd0>)
 8000b94:	2180      	movs	r1, #128	; 0x80
 8000b96:	0289      	lsls	r1, r1, #10
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	615a      	str	r2, [r3, #20]
 8000b9c:	4b27      	ldr	r3, [pc, #156]	; (8000c3c <HAL_TIM_MspPostInit+0xd0>)
 8000b9e:	695a      	ldr	r2, [r3, #20]
 8000ba0:	2380      	movs	r3, #128	; 0x80
 8000ba2:	029b      	lsls	r3, r3, #10
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000baa:	193b      	adds	r3, r7, r4
 8000bac:	2280      	movs	r2, #128	; 0x80
 8000bae:	0052      	lsls	r2, r2, #1
 8000bb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb2:	0021      	movs	r1, r4
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	2202      	movs	r2, #2
 8000bb8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	187b      	adds	r3, r7, r1
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	187b      	adds	r3, r7, r1
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000bc6:	187b      	adds	r3, r7, r1
 8000bc8:	2202      	movs	r2, #2
 8000bca:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	187a      	adds	r2, r7, r1
 8000bce:	2390      	movs	r3, #144	; 0x90
 8000bd0:	05db      	lsls	r3, r3, #23
 8000bd2:	0011      	movs	r1, r2
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f000 fa97 	bl	8001108 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000bda:	e029      	b.n	8000c30 <HAL_TIM_MspPostInit+0xc4>
  else if(htim->Instance==TIM2)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	05db      	lsls	r3, r3, #23
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d123      	bne.n	8000c30 <HAL_TIM_MspPostInit+0xc4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <HAL_TIM_MspPostInit+0xd0>)
 8000bea:	695a      	ldr	r2, [r3, #20]
 8000bec:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <HAL_TIM_MspPostInit+0xd0>)
 8000bee:	2180      	movs	r1, #128	; 0x80
 8000bf0:	02c9      	lsls	r1, r1, #11
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	615a      	str	r2, [r3, #20]
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <HAL_TIM_MspPostInit+0xd0>)
 8000bf8:	695a      	ldr	r2, [r3, #20]
 8000bfa:	2380      	movs	r3, #128	; 0x80
 8000bfc:	02db      	lsls	r3, r3, #11
 8000bfe:	4013      	ands	r3, r2
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c04:	2114      	movs	r1, #20
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	2208      	movs	r2, #8
 8000c0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2202      	movs	r2, #2
 8000c10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2202      	movs	r2, #2
 8000c22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	4a06      	ldr	r2, [pc, #24]	; (8000c40 <HAL_TIM_MspPostInit+0xd4>)
 8000c28:	0019      	movs	r1, r3
 8000c2a:	0010      	movs	r0, r2
 8000c2c:	f000 fa6c 	bl	8001108 <HAL_GPIO_Init>
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b00b      	add	sp, #44	; 0x2c
 8000c36:	bd90      	pop	{r4, r7, pc}
 8000c38:	40012c00 	.word	0x40012c00
 8000c3c:	40021000 	.word	0x40021000
 8000c40:	48000400 	.word	0x48000400

08000c44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c44:	b590      	push	{r4, r7, lr}
 8000c46:	b08b      	sub	sp, #44	; 0x2c
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	2414      	movs	r4, #20
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	0018      	movs	r0, r3
 8000c52:	2314      	movs	r3, #20
 8000c54:	001a      	movs	r2, r3
 8000c56:	2100      	movs	r1, #0
 8000c58:	f002 fd02 	bl	8003660 <memset>
  if(huart->Instance==USART1)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a1d      	ldr	r2, [pc, #116]	; (8000cd8 <HAL_UART_MspInit+0x94>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d133      	bne.n	8000cce <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <HAL_UART_MspInit+0x98>)
 8000c68:	699a      	ldr	r2, [r3, #24]
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <HAL_UART_MspInit+0x98>)
 8000c6c:	2180      	movs	r1, #128	; 0x80
 8000c6e:	01c9      	lsls	r1, r1, #7
 8000c70:	430a      	orrs	r2, r1
 8000c72:	619a      	str	r2, [r3, #24]
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <HAL_UART_MspInit+0x98>)
 8000c76:	699a      	ldr	r2, [r3, #24]
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	01db      	lsls	r3, r3, #7
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <HAL_UART_MspInit+0x98>)
 8000c84:	695a      	ldr	r2, [r3, #20]
 8000c86:	4b15      	ldr	r3, [pc, #84]	; (8000cdc <HAL_UART_MspInit+0x98>)
 8000c88:	2180      	movs	r1, #128	; 0x80
 8000c8a:	0289      	lsls	r1, r1, #10
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	615a      	str	r2, [r3, #20]
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_UART_MspInit+0x98>)
 8000c92:	695a      	ldr	r2, [r3, #20]
 8000c94:	2380      	movs	r3, #128	; 0x80
 8000c96:	029b      	lsls	r3, r3, #10
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	22c0      	movs	r2, #192	; 0xc0
 8000ca2:	00d2      	lsls	r2, r2, #3
 8000ca4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca6:	0021      	movs	r1, r4
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	2202      	movs	r2, #2
 8000cac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	187b      	adds	r3, r7, r1
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cb4:	187b      	adds	r3, r7, r1
 8000cb6:	2203      	movs	r2, #3
 8000cb8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc0:	187a      	adds	r2, r7, r1
 8000cc2:	2390      	movs	r3, #144	; 0x90
 8000cc4:	05db      	lsls	r3, r3, #23
 8000cc6:	0011      	movs	r1, r2
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f000 fa1d 	bl	8001108 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b00b      	add	sp, #44	; 0x2c
 8000cd4:	bd90      	pop	{r4, r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	40013800 	.word	0x40013800
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <NMI_Handler+0x4>

08000ce6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cea:	e7fe      	b.n	8000cea <HardFault_Handler+0x4>

08000cec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d04:	f000 f8e2 	bl	8000ecc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bd80      	pop	{r7, pc}
	...

08000d10 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d14:	4b03      	ldr	r3, [pc, #12]	; (8000d24 <TIM1_CC_IRQHandler+0x14>)
 8000d16:	0018      	movs	r0, r3
 8000d18:	f001 fa9e 	bl	8002258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	46c0      	nop			; (mov r8, r8)
 8000d24:	20000930 	.word	0x20000930

08000d28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d2c:	4b03      	ldr	r3, [pc, #12]	; (8000d3c <TIM2_IRQHandler+0x14>)
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f001 fa92 	bl	8002258 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	20000978 	.word	0x20000978

08000d40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d48:	4a14      	ldr	r2, [pc, #80]	; (8000d9c <_sbrk+0x5c>)
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <_sbrk+0x60>)
 8000d4c:	1ad3      	subs	r3, r2, r3
 8000d4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d54:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <_sbrk+0x64>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d102      	bne.n	8000d62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <_sbrk+0x64>)
 8000d5e:	4a12      	ldr	r2, [pc, #72]	; (8000da8 <_sbrk+0x68>)
 8000d60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d62:	4b10      	ldr	r3, [pc, #64]	; (8000da4 <_sbrk+0x64>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	18d3      	adds	r3, r2, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d207      	bcs.n	8000d80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d70:	f002 fc4c 	bl	800360c <__errno>
 8000d74:	0003      	movs	r3, r0
 8000d76:	220c      	movs	r2, #12
 8000d78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	425b      	negs	r3, r3
 8000d7e:	e009      	b.n	8000d94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d80:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <_sbrk+0x64>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <_sbrk+0x64>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	18d2      	adds	r2, r2, r3
 8000d8e:	4b05      	ldr	r3, [pc, #20]	; (8000da4 <_sbrk+0x64>)
 8000d90:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000d92:	68fb      	ldr	r3, [r7, #12]
}
 8000d94:	0018      	movs	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b006      	add	sp, #24
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	20001800 	.word	0x20001800
 8000da0:	00000400 	.word	0x00000400
 8000da4:	200008a0 	.word	0x200008a0
 8000da8:	200009d8 	.word	0x200009d8

08000dac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000db0:	46c0      	nop			; (mov r8, r8)
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000db8:	4813      	ldr	r0, [pc, #76]	; (8000e08 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dba:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000dbc:	4813      	ldr	r0, [pc, #76]	; (8000e0c <LoopForever+0x6>)
    LDR R1, [R0]
 8000dbe:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000dc0:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000dc2:	4a13      	ldr	r2, [pc, #76]	; (8000e10 <LoopForever+0xa>)
    CMP R1, R2
 8000dc4:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000dc6:	d105      	bne.n	8000dd4 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000dc8:	4812      	ldr	r0, [pc, #72]	; (8000e14 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000dca:	4913      	ldr	r1, [pc, #76]	; (8000e18 <LoopForever+0x12>)
    STR R1, [R0]
 8000dcc:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000dce:	4813      	ldr	r0, [pc, #76]	; (8000e1c <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000dd0:	4913      	ldr	r1, [pc, #76]	; (8000e20 <LoopForever+0x1a>)
    STR R1, [R0]
 8000dd2:	6001      	str	r1, [r0, #0]

08000dd4 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd4:	4813      	ldr	r0, [pc, #76]	; (8000e24 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000dd6:	4914      	ldr	r1, [pc, #80]	; (8000e28 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000dd8:	4a14      	ldr	r2, [pc, #80]	; (8000e2c <LoopForever+0x26>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a11      	ldr	r2, [pc, #68]	; (8000e30 <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000dec:	4c11      	ldr	r4, [pc, #68]	; (8000e34 <LoopForever+0x2e>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dfa:	f7ff ffd7 	bl	8000dac <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000dfe:	f002 fc0b 	bl	8003618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e02:	f7ff fa4d 	bl	80002a0 <main>

08000e06 <LoopForever>:

LoopForever:
    b LoopForever
 8000e06:	e7fe      	b.n	8000e06 <LoopForever>
  ldr   r0, =_estack
 8000e08:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000e0c:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000e10:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000e14:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000e18:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000e1c:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000e20:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e28:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e2c:	08003f7c 	.word	0x08003f7c
  ldr r2, =_sbss
 8000e30:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e34:	200009d4 	.word	0x200009d4

08000e38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e38:	e7fe      	b.n	8000e38 <ADC1_IRQHandler>
	...

08000e3c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e40:	4b07      	ldr	r3, [pc, #28]	; (8000e60 <HAL_Init+0x24>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_Init+0x24>)
 8000e46:	2110      	movs	r1, #16
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f000 f809 	bl	8000e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e52:	f7ff fe25 	bl	8000aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	0018      	movs	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	40022000 	.word	0x40022000

08000e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b590      	push	{r4, r7, lr}
 8000e66:	b083      	sub	sp, #12
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <HAL_InitTick+0x5c>)
 8000e6e:	681c      	ldr	r4, [r3, #0]
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <HAL_InitTick+0x60>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	0019      	movs	r1, r3
 8000e76:	23fa      	movs	r3, #250	; 0xfa
 8000e78:	0098      	lsls	r0, r3, #2
 8000e7a:	f7ff f957 	bl	800012c <__udivsi3>
 8000e7e:	0003      	movs	r3, r0
 8000e80:	0019      	movs	r1, r3
 8000e82:	0020      	movs	r0, r4
 8000e84:	f7ff f952 	bl	800012c <__udivsi3>
 8000e88:	0003      	movs	r3, r0
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	f000 f92f 	bl	80010ee <HAL_SYSTICK_Config>
 8000e90:	1e03      	subs	r3, r0, #0
 8000e92:	d001      	beq.n	8000e98 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e00f      	b.n	8000eb8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d80b      	bhi.n	8000eb6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9e:	6879      	ldr	r1, [r7, #4]
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	425b      	negs	r3, r3
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	0018      	movs	r0, r3
 8000ea8:	f000 f8fc 	bl	80010a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_InitTick+0x64>)
 8000eae:	687a      	ldr	r2, [r7, #4]
 8000eb0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	e000      	b.n	8000eb8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	0018      	movs	r0, r3
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b003      	add	sp, #12
 8000ebe:	bd90      	pop	{r4, r7, pc}
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	20000010 	.word	0x20000010
 8000ec8:	2000000c 	.word	0x2000000c

08000ecc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ed0:	4b05      	ldr	r3, [pc, #20]	; (8000ee8 <HAL_IncTick+0x1c>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	001a      	movs	r2, r3
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_IncTick+0x20>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	18d2      	adds	r2, r2, r3
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_IncTick+0x20>)
 8000ede:	601a      	str	r2, [r3, #0]
}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	46c0      	nop			; (mov r8, r8)
 8000ee8:	20000010 	.word	0x20000010
 8000eec:	200009c0 	.word	0x200009c0

08000ef0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ef4:	4b02      	ldr	r3, [pc, #8]	; (8000f00 <HAL_GetTick+0x10>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
}
 8000ef8:	0018      	movs	r0, r3
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	200009c0 	.word	0x200009c0

08000f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f0c:	f7ff fff0 	bl	8000ef0 <HAL_GetTick>
 8000f10:	0003      	movs	r3, r0
 8000f12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	3301      	adds	r3, #1
 8000f1c:	d005      	beq.n	8000f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1e:	4b0a      	ldr	r3, [pc, #40]	; (8000f48 <HAL_Delay+0x44>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	001a      	movs	r2, r3
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	189b      	adds	r3, r3, r2
 8000f28:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000f2a:	46c0      	nop			; (mov r8, r8)
 8000f2c:	f7ff ffe0 	bl	8000ef0 <HAL_GetTick>
 8000f30:	0002      	movs	r2, r0
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	68fa      	ldr	r2, [r7, #12]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d8f7      	bhi.n	8000f2c <HAL_Delay+0x28>
  {
  }
}
 8000f3c:	46c0      	nop			; (mov r8, r8)
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	46bd      	mov	sp, r7
 8000f42:	b004      	add	sp, #16
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	20000010 	.word	0x20000010

08000f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	0002      	movs	r2, r0
 8000f54:	1dfb      	adds	r3, r7, #7
 8000f56:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f58:	1dfb      	adds	r3, r7, #7
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	2b7f      	cmp	r3, #127	; 0x7f
 8000f5e:	d809      	bhi.n	8000f74 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f60:	1dfb      	adds	r3, r7, #7
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	001a      	movs	r2, r3
 8000f66:	231f      	movs	r3, #31
 8000f68:	401a      	ands	r2, r3
 8000f6a:	4b04      	ldr	r3, [pc, #16]	; (8000f7c <__NVIC_EnableIRQ+0x30>)
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	4091      	lsls	r1, r2
 8000f70:	000a      	movs	r2, r1
 8000f72:	601a      	str	r2, [r3, #0]
  }
}
 8000f74:	46c0      	nop			; (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	b002      	add	sp, #8
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	e000e100 	.word	0xe000e100

08000f80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	0002      	movs	r2, r0
 8000f88:	6039      	str	r1, [r7, #0]
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b7f      	cmp	r3, #127	; 0x7f
 8000f94:	d828      	bhi.n	8000fe8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f96:	4a2f      	ldr	r2, [pc, #188]	; (8001054 <__NVIC_SetPriority+0xd4>)
 8000f98:	1dfb      	adds	r3, r7, #7
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	089b      	lsrs	r3, r3, #2
 8000fa0:	33c0      	adds	r3, #192	; 0xc0
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	589b      	ldr	r3, [r3, r2]
 8000fa6:	1dfa      	adds	r2, r7, #7
 8000fa8:	7812      	ldrb	r2, [r2, #0]
 8000faa:	0011      	movs	r1, r2
 8000fac:	2203      	movs	r2, #3
 8000fae:	400a      	ands	r2, r1
 8000fb0:	00d2      	lsls	r2, r2, #3
 8000fb2:	21ff      	movs	r1, #255	; 0xff
 8000fb4:	4091      	lsls	r1, r2
 8000fb6:	000a      	movs	r2, r1
 8000fb8:	43d2      	mvns	r2, r2
 8000fba:	401a      	ands	r2, r3
 8000fbc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	019b      	lsls	r3, r3, #6
 8000fc2:	22ff      	movs	r2, #255	; 0xff
 8000fc4:	401a      	ands	r2, r3
 8000fc6:	1dfb      	adds	r3, r7, #7
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	0018      	movs	r0, r3
 8000fcc:	2303      	movs	r3, #3
 8000fce:	4003      	ands	r3, r0
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fd4:	481f      	ldr	r0, [pc, #124]	; (8001054 <__NVIC_SetPriority+0xd4>)
 8000fd6:	1dfb      	adds	r3, r7, #7
 8000fd8:	781b      	ldrb	r3, [r3, #0]
 8000fda:	b25b      	sxtb	r3, r3
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	33c0      	adds	r3, #192	; 0xc0
 8000fe2:	009b      	lsls	r3, r3, #2
 8000fe4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000fe6:	e031      	b.n	800104c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fe8:	4a1b      	ldr	r2, [pc, #108]	; (8001058 <__NVIC_SetPriority+0xd8>)
 8000fea:	1dfb      	adds	r3, r7, #7
 8000fec:	781b      	ldrb	r3, [r3, #0]
 8000fee:	0019      	movs	r1, r3
 8000ff0:	230f      	movs	r3, #15
 8000ff2:	400b      	ands	r3, r1
 8000ff4:	3b08      	subs	r3, #8
 8000ff6:	089b      	lsrs	r3, r3, #2
 8000ff8:	3306      	adds	r3, #6
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	18d3      	adds	r3, r2, r3
 8000ffe:	3304      	adds	r3, #4
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	1dfa      	adds	r2, r7, #7
 8001004:	7812      	ldrb	r2, [r2, #0]
 8001006:	0011      	movs	r1, r2
 8001008:	2203      	movs	r2, #3
 800100a:	400a      	ands	r2, r1
 800100c:	00d2      	lsls	r2, r2, #3
 800100e:	21ff      	movs	r1, #255	; 0xff
 8001010:	4091      	lsls	r1, r2
 8001012:	000a      	movs	r2, r1
 8001014:	43d2      	mvns	r2, r2
 8001016:	401a      	ands	r2, r3
 8001018:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	019b      	lsls	r3, r3, #6
 800101e:	22ff      	movs	r2, #255	; 0xff
 8001020:	401a      	ands	r2, r3
 8001022:	1dfb      	adds	r3, r7, #7
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	0018      	movs	r0, r3
 8001028:	2303      	movs	r3, #3
 800102a:	4003      	ands	r3, r0
 800102c:	00db      	lsls	r3, r3, #3
 800102e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001030:	4809      	ldr	r0, [pc, #36]	; (8001058 <__NVIC_SetPriority+0xd8>)
 8001032:	1dfb      	adds	r3, r7, #7
 8001034:	781b      	ldrb	r3, [r3, #0]
 8001036:	001c      	movs	r4, r3
 8001038:	230f      	movs	r3, #15
 800103a:	4023      	ands	r3, r4
 800103c:	3b08      	subs	r3, #8
 800103e:	089b      	lsrs	r3, r3, #2
 8001040:	430a      	orrs	r2, r1
 8001042:	3306      	adds	r3, #6
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	18c3      	adds	r3, r0, r3
 8001048:	3304      	adds	r3, #4
 800104a:	601a      	str	r2, [r3, #0]
}
 800104c:	46c0      	nop			; (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	b003      	add	sp, #12
 8001052:	bd90      	pop	{r4, r7, pc}
 8001054:	e000e100 	.word	0xe000e100
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	1e5a      	subs	r2, r3, #1
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	045b      	lsls	r3, r3, #17
 800106c:	429a      	cmp	r2, r3
 800106e:	d301      	bcc.n	8001074 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001070:	2301      	movs	r3, #1
 8001072:	e010      	b.n	8001096 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001074:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <SysTick_Config+0x44>)
 8001076:	687a      	ldr	r2, [r7, #4]
 8001078:	3a01      	subs	r2, #1
 800107a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800107c:	2301      	movs	r3, #1
 800107e:	425b      	negs	r3, r3
 8001080:	2103      	movs	r1, #3
 8001082:	0018      	movs	r0, r3
 8001084:	f7ff ff7c 	bl	8000f80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <SysTick_Config+0x44>)
 800108a:	2200      	movs	r2, #0
 800108c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800108e:	4b04      	ldr	r3, [pc, #16]	; (80010a0 <SysTick_Config+0x44>)
 8001090:	2207      	movs	r2, #7
 8001092:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001094:	2300      	movs	r3, #0
}
 8001096:	0018      	movs	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	b002      	add	sp, #8
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	e000e010 	.word	0xe000e010

080010a4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	210f      	movs	r1, #15
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	1c02      	adds	r2, r0, #0
 80010b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	187b      	adds	r3, r7, r1
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b25b      	sxtb	r3, r3
 80010be:	0011      	movs	r1, r2
 80010c0:	0018      	movs	r0, r3
 80010c2:	f7ff ff5d 	bl	8000f80 <__NVIC_SetPriority>
}
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	46bd      	mov	sp, r7
 80010ca:	b004      	add	sp, #16
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	0002      	movs	r2, r0
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	b25b      	sxtb	r3, r3
 80010e0:	0018      	movs	r0, r3
 80010e2:	f7ff ff33 	bl	8000f4c <__NVIC_EnableIRQ>
}
 80010e6:	46c0      	nop			; (mov r8, r8)
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b002      	add	sp, #8
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	0018      	movs	r0, r3
 80010fa:	f7ff ffaf 	bl	800105c <SysTick_Config>
 80010fe:	0003      	movs	r3, r0
}
 8001100:	0018      	movs	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	b002      	add	sp, #8
 8001106:	bd80      	pop	{r7, pc}

08001108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001116:	e149      	b.n	80013ac <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2101      	movs	r1, #1
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	4091      	lsls	r1, r2
 8001122:	000a      	movs	r2, r1
 8001124:	4013      	ands	r3, r2
 8001126:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d100      	bne.n	8001130 <HAL_GPIO_Init+0x28>
 800112e:	e13a      	b.n	80013a6 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d00b      	beq.n	8001150 <HAL_GPIO_Init+0x48>
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d007      	beq.n	8001150 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001144:	2b11      	cmp	r3, #17
 8001146:	d003      	beq.n	8001150 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	2b12      	cmp	r3, #18
 800114e:	d130      	bne.n	80011b2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	2203      	movs	r2, #3
 800115c:	409a      	lsls	r2, r3
 800115e:	0013      	movs	r3, r2
 8001160:	43da      	mvns	r2, r3
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4013      	ands	r3, r2
 8001166:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68da      	ldr	r2, [r3, #12]
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	409a      	lsls	r2, r3
 8001172:	0013      	movs	r3, r2
 8001174:	693a      	ldr	r2, [r7, #16]
 8001176:	4313      	orrs	r3, r2
 8001178:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001186:	2201      	movs	r2, #1
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	409a      	lsls	r2, r3
 800118c:	0013      	movs	r3, r2
 800118e:	43da      	mvns	r2, r3
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	091b      	lsrs	r3, r3, #4
 800119c:	2201      	movs	r2, #1
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
 80011a4:	0013      	movs	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	2203      	movs	r2, #3
 80011be:	409a      	lsls	r2, r3
 80011c0:	0013      	movs	r3, r2
 80011c2:	43da      	mvns	r2, r3
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	4013      	ands	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	409a      	lsls	r2, r3
 80011d4:	0013      	movs	r3, r2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0xea>
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b12      	cmp	r3, #18
 80011f0:	d123      	bne.n	800123a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	08da      	lsrs	r2, r3, #3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3208      	adds	r2, #8
 80011fa:	0092      	lsls	r2, r2, #2
 80011fc:	58d3      	ldr	r3, [r2, r3]
 80011fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	2207      	movs	r2, #7
 8001204:	4013      	ands	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	220f      	movs	r2, #15
 800120a:	409a      	lsls	r2, r3
 800120c:	0013      	movs	r3, r2
 800120e:	43da      	mvns	r2, r3
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4013      	ands	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	691a      	ldr	r2, [r3, #16]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2107      	movs	r1, #7
 800121e:	400b      	ands	r3, r1
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	409a      	lsls	r2, r3
 8001224:	0013      	movs	r3, r2
 8001226:	693a      	ldr	r2, [r7, #16]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	08da      	lsrs	r2, r3, #3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3208      	adds	r2, #8
 8001234:	0092      	lsls	r2, r2, #2
 8001236:	6939      	ldr	r1, [r7, #16]
 8001238:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	2203      	movs	r2, #3
 8001246:	409a      	lsls	r2, r3
 8001248:	0013      	movs	r3, r2
 800124a:	43da      	mvns	r2, r3
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	4013      	ands	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	685b      	ldr	r3, [r3, #4]
 8001256:	2203      	movs	r2, #3
 8001258:	401a      	ands	r2, r3
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	409a      	lsls	r2, r3
 8001260:	0013      	movs	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	685a      	ldr	r2, [r3, #4]
 8001272:	2380      	movs	r3, #128	; 0x80
 8001274:	055b      	lsls	r3, r3, #21
 8001276:	4013      	ands	r3, r2
 8001278:	d100      	bne.n	800127c <HAL_GPIO_Init+0x174>
 800127a:	e094      	b.n	80013a6 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127c:	4b51      	ldr	r3, [pc, #324]	; (80013c4 <HAL_GPIO_Init+0x2bc>)
 800127e:	699a      	ldr	r2, [r3, #24]
 8001280:	4b50      	ldr	r3, [pc, #320]	; (80013c4 <HAL_GPIO_Init+0x2bc>)
 8001282:	2101      	movs	r1, #1
 8001284:	430a      	orrs	r2, r1
 8001286:	619a      	str	r2, [r3, #24]
 8001288:	4b4e      	ldr	r3, [pc, #312]	; (80013c4 <HAL_GPIO_Init+0x2bc>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	2201      	movs	r2, #1
 800128e:	4013      	ands	r3, r2
 8001290:	60bb      	str	r3, [r7, #8]
 8001292:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001294:	4a4c      	ldr	r2, [pc, #304]	; (80013c8 <HAL_GPIO_Init+0x2c0>)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	3302      	adds	r3, #2
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	589b      	ldr	r3, [r3, r2]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	2203      	movs	r2, #3
 80012a6:	4013      	ands	r3, r2
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	220f      	movs	r2, #15
 80012ac:	409a      	lsls	r2, r3
 80012ae:	0013      	movs	r3, r2
 80012b0:	43da      	mvns	r2, r3
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012b8:	687a      	ldr	r2, [r7, #4]
 80012ba:	2390      	movs	r3, #144	; 0x90
 80012bc:	05db      	lsls	r3, r3, #23
 80012be:	429a      	cmp	r2, r3
 80012c0:	d00d      	beq.n	80012de <HAL_GPIO_Init+0x1d6>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4a41      	ldr	r2, [pc, #260]	; (80013cc <HAL_GPIO_Init+0x2c4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d007      	beq.n	80012da <HAL_GPIO_Init+0x1d2>
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4a40      	ldr	r2, [pc, #256]	; (80013d0 <HAL_GPIO_Init+0x2c8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d101      	bne.n	80012d6 <HAL_GPIO_Init+0x1ce>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e004      	b.n	80012e0 <HAL_GPIO_Init+0x1d8>
 80012d6:	2305      	movs	r3, #5
 80012d8:	e002      	b.n	80012e0 <HAL_GPIO_Init+0x1d8>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <HAL_GPIO_Init+0x1d8>
 80012de:	2300      	movs	r3, #0
 80012e0:	697a      	ldr	r2, [r7, #20]
 80012e2:	2103      	movs	r1, #3
 80012e4:	400a      	ands	r2, r1
 80012e6:	0092      	lsls	r2, r2, #2
 80012e8:	4093      	lsls	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80012f0:	4935      	ldr	r1, [pc, #212]	; (80013c8 <HAL_GPIO_Init+0x2c0>)
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012fe:	4b35      	ldr	r3, [pc, #212]	; (80013d4 <HAL_GPIO_Init+0x2cc>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	43da      	mvns	r2, r3
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	4013      	ands	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	025b      	lsls	r3, r3, #9
 8001316:	4013      	ands	r3, r2
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001322:	4b2c      	ldr	r3, [pc, #176]	; (80013d4 <HAL_GPIO_Init+0x2cc>)
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001328:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <HAL_GPIO_Init+0x2cc>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	43da      	mvns	r2, r3
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4013      	ands	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	029b      	lsls	r3, r3, #10
 8001340:	4013      	ands	r3, r2
 8001342:	d003      	beq.n	800134c <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001344:	693a      	ldr	r2, [r7, #16]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	4313      	orrs	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800134c:	4b21      	ldr	r3, [pc, #132]	; (80013d4 <HAL_GPIO_Init+0x2cc>)
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <HAL_GPIO_Init+0x2cc>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	43da      	mvns	r2, r3
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685a      	ldr	r2, [r3, #4]
 8001366:	2380      	movs	r3, #128	; 0x80
 8001368:	035b      	lsls	r3, r3, #13
 800136a:	4013      	ands	r3, r2
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001376:	4b17      	ldr	r3, [pc, #92]	; (80013d4 <HAL_GPIO_Init+0x2cc>)
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800137c:	4b15      	ldr	r3, [pc, #84]	; (80013d4 <HAL_GPIO_Init+0x2cc>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43da      	mvns	r2, r3
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	039b      	lsls	r3, r3, #14
 8001394:	4013      	ands	r3, r2
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <HAL_GPIO_Init+0x2cc>)
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	3301      	adds	r3, #1
 80013aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	40da      	lsrs	r2, r3
 80013b4:	1e13      	subs	r3, r2, #0
 80013b6:	d000      	beq.n	80013ba <HAL_GPIO_Init+0x2b2>
 80013b8:	e6ae      	b.n	8001118 <HAL_GPIO_Init+0x10>
  } 
}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	46c0      	nop			; (mov r8, r8)
 80013be:	46bd      	mov	sp, r7
 80013c0:	b006      	add	sp, #24
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010000 	.word	0x40010000
 80013cc:	48000400 	.word	0x48000400
 80013d0:	48000800 	.word	0x48000800
 80013d4:	40010400 	.word	0x40010400

080013d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	0008      	movs	r0, r1
 80013e2:	0011      	movs	r1, r2
 80013e4:	1cbb      	adds	r3, r7, #2
 80013e6:	1c02      	adds	r2, r0, #0
 80013e8:	801a      	strh	r2, [r3, #0]
 80013ea:	1c7b      	adds	r3, r7, #1
 80013ec:	1c0a      	adds	r2, r1, #0
 80013ee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013f0:	1c7b      	adds	r3, r7, #1
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d004      	beq.n	8001402 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013f8:	1cbb      	adds	r3, r7, #2
 80013fa:	881a      	ldrh	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001400:	e003      	b.n	800140a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001402:	1cbb      	adds	r3, r7, #2
 8001404:	881a      	ldrh	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	629a      	str	r2, [r3, #40]	; 0x28
}
 800140a:	46c0      	nop			; (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	b002      	add	sp, #8
 8001410:	bd80      	pop	{r7, pc}
	...

08001414 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b088      	sub	sp, #32
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d102      	bne.n	8001428 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	f000 fb76 	bl	8001b14 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2201      	movs	r2, #1
 800142e:	4013      	ands	r3, r2
 8001430:	d100      	bne.n	8001434 <HAL_RCC_OscConfig+0x20>
 8001432:	e08e      	b.n	8001552 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001434:	4bc5      	ldr	r3, [pc, #788]	; (800174c <HAL_RCC_OscConfig+0x338>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	220c      	movs	r2, #12
 800143a:	4013      	ands	r3, r2
 800143c:	2b04      	cmp	r3, #4
 800143e:	d00e      	beq.n	800145e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001440:	4bc2      	ldr	r3, [pc, #776]	; (800174c <HAL_RCC_OscConfig+0x338>)
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	220c      	movs	r2, #12
 8001446:	4013      	ands	r3, r2
 8001448:	2b08      	cmp	r3, #8
 800144a:	d117      	bne.n	800147c <HAL_RCC_OscConfig+0x68>
 800144c:	4bbf      	ldr	r3, [pc, #764]	; (800174c <HAL_RCC_OscConfig+0x338>)
 800144e:	685a      	ldr	r2, [r3, #4]
 8001450:	23c0      	movs	r3, #192	; 0xc0
 8001452:	025b      	lsls	r3, r3, #9
 8001454:	401a      	ands	r2, r3
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	025b      	lsls	r3, r3, #9
 800145a:	429a      	cmp	r2, r3
 800145c:	d10e      	bne.n	800147c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800145e:	4bbb      	ldr	r3, [pc, #748]	; (800174c <HAL_RCC_OscConfig+0x338>)
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	029b      	lsls	r3, r3, #10
 8001466:	4013      	ands	r3, r2
 8001468:	d100      	bne.n	800146c <HAL_RCC_OscConfig+0x58>
 800146a:	e071      	b.n	8001550 <HAL_RCC_OscConfig+0x13c>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d000      	beq.n	8001476 <HAL_RCC_OscConfig+0x62>
 8001474:	e06c      	b.n	8001550 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	f000 fb4c 	bl	8001b14 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d107      	bne.n	8001494 <HAL_RCC_OscConfig+0x80>
 8001484:	4bb1      	ldr	r3, [pc, #708]	; (800174c <HAL_RCC_OscConfig+0x338>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	4bb0      	ldr	r3, [pc, #704]	; (800174c <HAL_RCC_OscConfig+0x338>)
 800148a:	2180      	movs	r1, #128	; 0x80
 800148c:	0249      	lsls	r1, r1, #9
 800148e:	430a      	orrs	r2, r1
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	e02f      	b.n	80014f4 <HAL_RCC_OscConfig+0xe0>
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d10c      	bne.n	80014b6 <HAL_RCC_OscConfig+0xa2>
 800149c:	4bab      	ldr	r3, [pc, #684]	; (800174c <HAL_RCC_OscConfig+0x338>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4baa      	ldr	r3, [pc, #680]	; (800174c <HAL_RCC_OscConfig+0x338>)
 80014a2:	49ab      	ldr	r1, [pc, #684]	; (8001750 <HAL_RCC_OscConfig+0x33c>)
 80014a4:	400a      	ands	r2, r1
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	4ba8      	ldr	r3, [pc, #672]	; (800174c <HAL_RCC_OscConfig+0x338>)
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	4ba7      	ldr	r3, [pc, #668]	; (800174c <HAL_RCC_OscConfig+0x338>)
 80014ae:	49a9      	ldr	r1, [pc, #676]	; (8001754 <HAL_RCC_OscConfig+0x340>)
 80014b0:	400a      	ands	r2, r1
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	e01e      	b.n	80014f4 <HAL_RCC_OscConfig+0xe0>
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2b05      	cmp	r3, #5
 80014bc:	d10e      	bne.n	80014dc <HAL_RCC_OscConfig+0xc8>
 80014be:	4ba3      	ldr	r3, [pc, #652]	; (800174c <HAL_RCC_OscConfig+0x338>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4ba2      	ldr	r3, [pc, #648]	; (800174c <HAL_RCC_OscConfig+0x338>)
 80014c4:	2180      	movs	r1, #128	; 0x80
 80014c6:	02c9      	lsls	r1, r1, #11
 80014c8:	430a      	orrs	r2, r1
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	4b9f      	ldr	r3, [pc, #636]	; (800174c <HAL_RCC_OscConfig+0x338>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b9e      	ldr	r3, [pc, #632]	; (800174c <HAL_RCC_OscConfig+0x338>)
 80014d2:	2180      	movs	r1, #128	; 0x80
 80014d4:	0249      	lsls	r1, r1, #9
 80014d6:	430a      	orrs	r2, r1
 80014d8:	601a      	str	r2, [r3, #0]
 80014da:	e00b      	b.n	80014f4 <HAL_RCC_OscConfig+0xe0>
 80014dc:	4b9b      	ldr	r3, [pc, #620]	; (800174c <HAL_RCC_OscConfig+0x338>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b9a      	ldr	r3, [pc, #616]	; (800174c <HAL_RCC_OscConfig+0x338>)
 80014e2:	499b      	ldr	r1, [pc, #620]	; (8001750 <HAL_RCC_OscConfig+0x33c>)
 80014e4:	400a      	ands	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	4b98      	ldr	r3, [pc, #608]	; (800174c <HAL_RCC_OscConfig+0x338>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b97      	ldr	r3, [pc, #604]	; (800174c <HAL_RCC_OscConfig+0x338>)
 80014ee:	4999      	ldr	r1, [pc, #612]	; (8001754 <HAL_RCC_OscConfig+0x340>)
 80014f0:	400a      	ands	r2, r1
 80014f2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d014      	beq.n	8001526 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fc:	f7ff fcf8 	bl	8000ef0 <HAL_GetTick>
 8001500:	0003      	movs	r3, r0
 8001502:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001506:	f7ff fcf3 	bl	8000ef0 <HAL_GetTick>
 800150a:	0002      	movs	r2, r0
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b64      	cmp	r3, #100	; 0x64
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e2fd      	b.n	8001b14 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001518:	4b8c      	ldr	r3, [pc, #560]	; (800174c <HAL_RCC_OscConfig+0x338>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	2380      	movs	r3, #128	; 0x80
 800151e:	029b      	lsls	r3, r3, #10
 8001520:	4013      	ands	r3, r2
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0xf2>
 8001524:	e015      	b.n	8001552 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001526:	f7ff fce3 	bl	8000ef0 <HAL_GetTick>
 800152a:	0003      	movs	r3, r0
 800152c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152e:	e008      	b.n	8001542 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001530:	f7ff fcde 	bl	8000ef0 <HAL_GetTick>
 8001534:	0002      	movs	r2, r0
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	2b64      	cmp	r3, #100	; 0x64
 800153c:	d901      	bls.n	8001542 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e2e8      	b.n	8001b14 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001542:	4b82      	ldr	r3, [pc, #520]	; (800174c <HAL_RCC_OscConfig+0x338>)
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	2380      	movs	r3, #128	; 0x80
 8001548:	029b      	lsls	r3, r3, #10
 800154a:	4013      	ands	r3, r2
 800154c:	d1f0      	bne.n	8001530 <HAL_RCC_OscConfig+0x11c>
 800154e:	e000      	b.n	8001552 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001550:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2202      	movs	r2, #2
 8001558:	4013      	ands	r3, r2
 800155a:	d100      	bne.n	800155e <HAL_RCC_OscConfig+0x14a>
 800155c:	e06c      	b.n	8001638 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800155e:	4b7b      	ldr	r3, [pc, #492]	; (800174c <HAL_RCC_OscConfig+0x338>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	220c      	movs	r2, #12
 8001564:	4013      	ands	r3, r2
 8001566:	d00e      	beq.n	8001586 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001568:	4b78      	ldr	r3, [pc, #480]	; (800174c <HAL_RCC_OscConfig+0x338>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	220c      	movs	r2, #12
 800156e:	4013      	ands	r3, r2
 8001570:	2b08      	cmp	r3, #8
 8001572:	d11f      	bne.n	80015b4 <HAL_RCC_OscConfig+0x1a0>
 8001574:	4b75      	ldr	r3, [pc, #468]	; (800174c <HAL_RCC_OscConfig+0x338>)
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	23c0      	movs	r3, #192	; 0xc0
 800157a:	025b      	lsls	r3, r3, #9
 800157c:	401a      	ands	r2, r3
 800157e:	2380      	movs	r3, #128	; 0x80
 8001580:	021b      	lsls	r3, r3, #8
 8001582:	429a      	cmp	r2, r3
 8001584:	d116      	bne.n	80015b4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001586:	4b71      	ldr	r3, [pc, #452]	; (800174c <HAL_RCC_OscConfig+0x338>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2202      	movs	r2, #2
 800158c:	4013      	ands	r3, r2
 800158e:	d005      	beq.n	800159c <HAL_RCC_OscConfig+0x188>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d001      	beq.n	800159c <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e2bb      	b.n	8001b14 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159c:	4b6b      	ldr	r3, [pc, #428]	; (800174c <HAL_RCC_OscConfig+0x338>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	22f8      	movs	r2, #248	; 0xf8
 80015a2:	4393      	bics	r3, r2
 80015a4:	0019      	movs	r1, r3
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	00da      	lsls	r2, r3, #3
 80015ac:	4b67      	ldr	r3, [pc, #412]	; (800174c <HAL_RCC_OscConfig+0x338>)
 80015ae:	430a      	orrs	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015b2:	e041      	b.n	8001638 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d024      	beq.n	8001606 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015bc:	4b63      	ldr	r3, [pc, #396]	; (800174c <HAL_RCC_OscConfig+0x338>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b62      	ldr	r3, [pc, #392]	; (800174c <HAL_RCC_OscConfig+0x338>)
 80015c2:	2101      	movs	r1, #1
 80015c4:	430a      	orrs	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c8:	f7ff fc92 	bl	8000ef0 <HAL_GetTick>
 80015cc:	0003      	movs	r3, r0
 80015ce:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d2:	f7ff fc8d 	bl	8000ef0 <HAL_GetTick>
 80015d6:	0002      	movs	r2, r0
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e297      	b.n	8001b14 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e4:	4b59      	ldr	r3, [pc, #356]	; (800174c <HAL_RCC_OscConfig+0x338>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	2202      	movs	r2, #2
 80015ea:	4013      	ands	r3, r2
 80015ec:	d0f1      	beq.n	80015d2 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ee:	4b57      	ldr	r3, [pc, #348]	; (800174c <HAL_RCC_OscConfig+0x338>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	22f8      	movs	r2, #248	; 0xf8
 80015f4:	4393      	bics	r3, r2
 80015f6:	0019      	movs	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	00da      	lsls	r2, r3, #3
 80015fe:	4b53      	ldr	r3, [pc, #332]	; (800174c <HAL_RCC_OscConfig+0x338>)
 8001600:	430a      	orrs	r2, r1
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	e018      	b.n	8001638 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001606:	4b51      	ldr	r3, [pc, #324]	; (800174c <HAL_RCC_OscConfig+0x338>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b50      	ldr	r3, [pc, #320]	; (800174c <HAL_RCC_OscConfig+0x338>)
 800160c:	2101      	movs	r1, #1
 800160e:	438a      	bics	r2, r1
 8001610:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001612:	f7ff fc6d 	bl	8000ef0 <HAL_GetTick>
 8001616:	0003      	movs	r3, r0
 8001618:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800161c:	f7ff fc68 	bl	8000ef0 <HAL_GetTick>
 8001620:	0002      	movs	r2, r0
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e272      	b.n	8001b14 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800162e:	4b47      	ldr	r3, [pc, #284]	; (800174c <HAL_RCC_OscConfig+0x338>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2202      	movs	r2, #2
 8001634:	4013      	ands	r3, r2
 8001636:	d1f1      	bne.n	800161c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2208      	movs	r2, #8
 800163e:	4013      	ands	r3, r2
 8001640:	d036      	beq.n	80016b0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69db      	ldr	r3, [r3, #28]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d019      	beq.n	800167e <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800164a:	4b40      	ldr	r3, [pc, #256]	; (800174c <HAL_RCC_OscConfig+0x338>)
 800164c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800164e:	4b3f      	ldr	r3, [pc, #252]	; (800174c <HAL_RCC_OscConfig+0x338>)
 8001650:	2101      	movs	r1, #1
 8001652:	430a      	orrs	r2, r1
 8001654:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001656:	f7ff fc4b 	bl	8000ef0 <HAL_GetTick>
 800165a:	0003      	movs	r3, r0
 800165c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001660:	f7ff fc46 	bl	8000ef0 <HAL_GetTick>
 8001664:	0002      	movs	r2, r0
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e250      	b.n	8001b14 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001672:	4b36      	ldr	r3, [pc, #216]	; (800174c <HAL_RCC_OscConfig+0x338>)
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	2202      	movs	r2, #2
 8001678:	4013      	ands	r3, r2
 800167a:	d0f1      	beq.n	8001660 <HAL_RCC_OscConfig+0x24c>
 800167c:	e018      	b.n	80016b0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800167e:	4b33      	ldr	r3, [pc, #204]	; (800174c <HAL_RCC_OscConfig+0x338>)
 8001680:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001682:	4b32      	ldr	r3, [pc, #200]	; (800174c <HAL_RCC_OscConfig+0x338>)
 8001684:	2101      	movs	r1, #1
 8001686:	438a      	bics	r2, r1
 8001688:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168a:	f7ff fc31 	bl	8000ef0 <HAL_GetTick>
 800168e:	0003      	movs	r3, r0
 8001690:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001694:	f7ff fc2c 	bl	8000ef0 <HAL_GetTick>
 8001698:	0002      	movs	r2, r0
 800169a:	69bb      	ldr	r3, [r7, #24]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e236      	b.n	8001b14 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a6:	4b29      	ldr	r3, [pc, #164]	; (800174c <HAL_RCC_OscConfig+0x338>)
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	2202      	movs	r2, #2
 80016ac:	4013      	ands	r3, r2
 80016ae:	d1f1      	bne.n	8001694 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2204      	movs	r2, #4
 80016b6:	4013      	ands	r3, r2
 80016b8:	d100      	bne.n	80016bc <HAL_RCC_OscConfig+0x2a8>
 80016ba:	e0b5      	b.n	8001828 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016bc:	201f      	movs	r0, #31
 80016be:	183b      	adds	r3, r7, r0
 80016c0:	2200      	movs	r2, #0
 80016c2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <HAL_RCC_OscConfig+0x338>)
 80016c6:	69da      	ldr	r2, [r3, #28]
 80016c8:	2380      	movs	r3, #128	; 0x80
 80016ca:	055b      	lsls	r3, r3, #21
 80016cc:	4013      	ands	r3, r2
 80016ce:	d110      	bne.n	80016f2 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016d0:	4b1e      	ldr	r3, [pc, #120]	; (800174c <HAL_RCC_OscConfig+0x338>)
 80016d2:	69da      	ldr	r2, [r3, #28]
 80016d4:	4b1d      	ldr	r3, [pc, #116]	; (800174c <HAL_RCC_OscConfig+0x338>)
 80016d6:	2180      	movs	r1, #128	; 0x80
 80016d8:	0549      	lsls	r1, r1, #21
 80016da:	430a      	orrs	r2, r1
 80016dc:	61da      	str	r2, [r3, #28]
 80016de:	4b1b      	ldr	r3, [pc, #108]	; (800174c <HAL_RCC_OscConfig+0x338>)
 80016e0:	69da      	ldr	r2, [r3, #28]
 80016e2:	2380      	movs	r3, #128	; 0x80
 80016e4:	055b      	lsls	r3, r3, #21
 80016e6:	4013      	ands	r3, r2
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80016ec:	183b      	adds	r3, r7, r0
 80016ee:	2201      	movs	r2, #1
 80016f0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f2:	4b19      	ldr	r3, [pc, #100]	; (8001758 <HAL_RCC_OscConfig+0x344>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4013      	ands	r3, r2
 80016fc:	d11a      	bne.n	8001734 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016fe:	4b16      	ldr	r3, [pc, #88]	; (8001758 <HAL_RCC_OscConfig+0x344>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_RCC_OscConfig+0x344>)
 8001704:	2180      	movs	r1, #128	; 0x80
 8001706:	0049      	lsls	r1, r1, #1
 8001708:	430a      	orrs	r2, r1
 800170a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800170c:	f7ff fbf0 	bl	8000ef0 <HAL_GetTick>
 8001710:	0003      	movs	r3, r0
 8001712:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001716:	f7ff fbeb 	bl	8000ef0 <HAL_GetTick>
 800171a:	0002      	movs	r2, r0
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b64      	cmp	r3, #100	; 0x64
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e1f5      	b.n	8001b14 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_RCC_OscConfig+0x344>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	2380      	movs	r3, #128	; 0x80
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	4013      	ands	r3, r2
 8001732:	d0f0      	beq.n	8001716 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d10f      	bne.n	800175c <HAL_RCC_OscConfig+0x348>
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <HAL_RCC_OscConfig+0x338>)
 800173e:	6a1a      	ldr	r2, [r3, #32]
 8001740:	4b02      	ldr	r3, [pc, #8]	; (800174c <HAL_RCC_OscConfig+0x338>)
 8001742:	2101      	movs	r1, #1
 8001744:	430a      	orrs	r2, r1
 8001746:	621a      	str	r2, [r3, #32]
 8001748:	e036      	b.n	80017b8 <HAL_RCC_OscConfig+0x3a4>
 800174a:	46c0      	nop			; (mov r8, r8)
 800174c:	40021000 	.word	0x40021000
 8001750:	fffeffff 	.word	0xfffeffff
 8001754:	fffbffff 	.word	0xfffbffff
 8001758:	40007000 	.word	0x40007000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10c      	bne.n	800177e <HAL_RCC_OscConfig+0x36a>
 8001764:	4bca      	ldr	r3, [pc, #808]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001766:	6a1a      	ldr	r2, [r3, #32]
 8001768:	4bc9      	ldr	r3, [pc, #804]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 800176a:	2101      	movs	r1, #1
 800176c:	438a      	bics	r2, r1
 800176e:	621a      	str	r2, [r3, #32]
 8001770:	4bc7      	ldr	r3, [pc, #796]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001772:	6a1a      	ldr	r2, [r3, #32]
 8001774:	4bc6      	ldr	r3, [pc, #792]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001776:	2104      	movs	r1, #4
 8001778:	438a      	bics	r2, r1
 800177a:	621a      	str	r2, [r3, #32]
 800177c:	e01c      	b.n	80017b8 <HAL_RCC_OscConfig+0x3a4>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2b05      	cmp	r3, #5
 8001784:	d10c      	bne.n	80017a0 <HAL_RCC_OscConfig+0x38c>
 8001786:	4bc2      	ldr	r3, [pc, #776]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001788:	6a1a      	ldr	r2, [r3, #32]
 800178a:	4bc1      	ldr	r3, [pc, #772]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 800178c:	2104      	movs	r1, #4
 800178e:	430a      	orrs	r2, r1
 8001790:	621a      	str	r2, [r3, #32]
 8001792:	4bbf      	ldr	r3, [pc, #764]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001794:	6a1a      	ldr	r2, [r3, #32]
 8001796:	4bbe      	ldr	r3, [pc, #760]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001798:	2101      	movs	r1, #1
 800179a:	430a      	orrs	r2, r1
 800179c:	621a      	str	r2, [r3, #32]
 800179e:	e00b      	b.n	80017b8 <HAL_RCC_OscConfig+0x3a4>
 80017a0:	4bbb      	ldr	r3, [pc, #748]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 80017a2:	6a1a      	ldr	r2, [r3, #32]
 80017a4:	4bba      	ldr	r3, [pc, #744]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 80017a6:	2101      	movs	r1, #1
 80017a8:	438a      	bics	r2, r1
 80017aa:	621a      	str	r2, [r3, #32]
 80017ac:	4bb8      	ldr	r3, [pc, #736]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 80017ae:	6a1a      	ldr	r2, [r3, #32]
 80017b0:	4bb7      	ldr	r3, [pc, #732]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 80017b2:	2104      	movs	r1, #4
 80017b4:	438a      	bics	r2, r1
 80017b6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d014      	beq.n	80017ea <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017c0:	f7ff fb96 	bl	8000ef0 <HAL_GetTick>
 80017c4:	0003      	movs	r3, r0
 80017c6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017c8:	e009      	b.n	80017de <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ca:	f7ff fb91 	bl	8000ef0 <HAL_GetTick>
 80017ce:	0002      	movs	r2, r0
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	4aaf      	ldr	r2, [pc, #700]	; (8001a94 <HAL_RCC_OscConfig+0x680>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d901      	bls.n	80017de <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80017da:	2303      	movs	r3, #3
 80017dc:	e19a      	b.n	8001b14 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017de:	4bac      	ldr	r3, [pc, #688]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	2202      	movs	r2, #2
 80017e4:	4013      	ands	r3, r2
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x3b6>
 80017e8:	e013      	b.n	8001812 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ea:	f7ff fb81 	bl	8000ef0 <HAL_GetTick>
 80017ee:	0003      	movs	r3, r0
 80017f0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f2:	e009      	b.n	8001808 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017f4:	f7ff fb7c 	bl	8000ef0 <HAL_GetTick>
 80017f8:	0002      	movs	r2, r0
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	4aa5      	ldr	r2, [pc, #660]	; (8001a94 <HAL_RCC_OscConfig+0x680>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e185      	b.n	8001b14 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001808:	4ba1      	ldr	r3, [pc, #644]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 800180a:	6a1b      	ldr	r3, [r3, #32]
 800180c:	2202      	movs	r2, #2
 800180e:	4013      	ands	r3, r2
 8001810:	d1f0      	bne.n	80017f4 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001812:	231f      	movs	r3, #31
 8001814:	18fb      	adds	r3, r7, r3
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d105      	bne.n	8001828 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800181c:	4b9c      	ldr	r3, [pc, #624]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 800181e:	69da      	ldr	r2, [r3, #28]
 8001820:	4b9b      	ldr	r3, [pc, #620]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001822:	499d      	ldr	r1, [pc, #628]	; (8001a98 <HAL_RCC_OscConfig+0x684>)
 8001824:	400a      	ands	r2, r1
 8001826:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2210      	movs	r2, #16
 800182e:	4013      	ands	r3, r2
 8001830:	d063      	beq.n	80018fa <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d12a      	bne.n	8001890 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800183a:	4b95      	ldr	r3, [pc, #596]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 800183c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800183e:	4b94      	ldr	r3, [pc, #592]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001840:	2104      	movs	r1, #4
 8001842:	430a      	orrs	r2, r1
 8001844:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001846:	4b92      	ldr	r3, [pc, #584]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800184a:	4b91      	ldr	r3, [pc, #580]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 800184c:	2101      	movs	r1, #1
 800184e:	430a      	orrs	r2, r1
 8001850:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001852:	f7ff fb4d 	bl	8000ef0 <HAL_GetTick>
 8001856:	0003      	movs	r3, r0
 8001858:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800185c:	f7ff fb48 	bl	8000ef0 <HAL_GetTick>
 8001860:	0002      	movs	r2, r0
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b02      	cmp	r3, #2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e152      	b.n	8001b14 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800186e:	4b88      	ldr	r3, [pc, #544]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001872:	2202      	movs	r2, #2
 8001874:	4013      	ands	r3, r2
 8001876:	d0f1      	beq.n	800185c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001878:	4b85      	ldr	r3, [pc, #532]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 800187a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800187c:	22f8      	movs	r2, #248	; 0xf8
 800187e:	4393      	bics	r3, r2
 8001880:	0019      	movs	r1, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	00da      	lsls	r2, r3, #3
 8001888:	4b81      	ldr	r3, [pc, #516]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 800188a:	430a      	orrs	r2, r1
 800188c:	635a      	str	r2, [r3, #52]	; 0x34
 800188e:	e034      	b.n	80018fa <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	695b      	ldr	r3, [r3, #20]
 8001894:	3305      	adds	r3, #5
 8001896:	d111      	bne.n	80018bc <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001898:	4b7d      	ldr	r3, [pc, #500]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 800189a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800189c:	4b7c      	ldr	r3, [pc, #496]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 800189e:	2104      	movs	r1, #4
 80018a0:	438a      	bics	r2, r1
 80018a2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80018a4:	4b7a      	ldr	r3, [pc, #488]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 80018a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018a8:	22f8      	movs	r2, #248	; 0xf8
 80018aa:	4393      	bics	r3, r2
 80018ac:	0019      	movs	r1, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	00da      	lsls	r2, r3, #3
 80018b4:	4b76      	ldr	r3, [pc, #472]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 80018b6:	430a      	orrs	r2, r1
 80018b8:	635a      	str	r2, [r3, #52]	; 0x34
 80018ba:	e01e      	b.n	80018fa <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80018bc:	4b74      	ldr	r3, [pc, #464]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 80018be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018c0:	4b73      	ldr	r3, [pc, #460]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 80018c2:	2104      	movs	r1, #4
 80018c4:	430a      	orrs	r2, r1
 80018c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80018c8:	4b71      	ldr	r3, [pc, #452]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 80018ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018cc:	4b70      	ldr	r3, [pc, #448]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 80018ce:	2101      	movs	r1, #1
 80018d0:	438a      	bics	r2, r1
 80018d2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7ff fb0c 	bl	8000ef0 <HAL_GetTick>
 80018d8:	0003      	movs	r3, r0
 80018da:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80018de:	f7ff fb07 	bl	8000ef0 <HAL_GetTick>
 80018e2:	0002      	movs	r2, r0
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e111      	b.n	8001b14 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80018f0:	4b67      	ldr	r3, [pc, #412]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 80018f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f4:	2202      	movs	r2, #2
 80018f6:	4013      	ands	r3, r2
 80018f8:	d1f1      	bne.n	80018de <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2220      	movs	r2, #32
 8001900:	4013      	ands	r3, r2
 8001902:	d05c      	beq.n	80019be <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001904:	4b62      	ldr	r3, [pc, #392]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	220c      	movs	r2, #12
 800190a:	4013      	ands	r3, r2
 800190c:	2b0c      	cmp	r3, #12
 800190e:	d00e      	beq.n	800192e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001910:	4b5f      	ldr	r3, [pc, #380]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	220c      	movs	r2, #12
 8001916:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001918:	2b08      	cmp	r3, #8
 800191a:	d114      	bne.n	8001946 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800191c:	4b5c      	ldr	r3, [pc, #368]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	23c0      	movs	r3, #192	; 0xc0
 8001922:	025b      	lsls	r3, r3, #9
 8001924:	401a      	ands	r2, r3
 8001926:	23c0      	movs	r3, #192	; 0xc0
 8001928:	025b      	lsls	r3, r3, #9
 800192a:	429a      	cmp	r2, r3
 800192c:	d10b      	bne.n	8001946 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800192e:	4b58      	ldr	r3, [pc, #352]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001930:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001932:	2380      	movs	r3, #128	; 0x80
 8001934:	025b      	lsls	r3, r3, #9
 8001936:	4013      	ands	r3, r2
 8001938:	d040      	beq.n	80019bc <HAL_RCC_OscConfig+0x5a8>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d03c      	beq.n	80019bc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e0e6      	b.n	8001b14 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d01b      	beq.n	8001986 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800194e:	4b50      	ldr	r3, [pc, #320]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001950:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001952:	4b4f      	ldr	r3, [pc, #316]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001954:	2180      	movs	r1, #128	; 0x80
 8001956:	0249      	lsls	r1, r1, #9
 8001958:	430a      	orrs	r2, r1
 800195a:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800195c:	f7ff fac8 	bl	8000ef0 <HAL_GetTick>
 8001960:	0003      	movs	r3, r0
 8001962:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001966:	f7ff fac3 	bl	8000ef0 <HAL_GetTick>
 800196a:	0002      	movs	r2, r0
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e0cd      	b.n	8001b14 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001978:	4b45      	ldr	r3, [pc, #276]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 800197a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	025b      	lsls	r3, r3, #9
 8001980:	4013      	ands	r3, r2
 8001982:	d0f0      	beq.n	8001966 <HAL_RCC_OscConfig+0x552>
 8001984:	e01b      	b.n	80019be <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001986:	4b42      	ldr	r3, [pc, #264]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800198a:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 800198c:	4943      	ldr	r1, [pc, #268]	; (8001a9c <HAL_RCC_OscConfig+0x688>)
 800198e:	400a      	ands	r2, r1
 8001990:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001992:	f7ff faad 	bl	8000ef0 <HAL_GetTick>
 8001996:	0003      	movs	r3, r0
 8001998:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800199c:	f7ff faa8 	bl	8000ef0 <HAL_GetTick>
 80019a0:	0002      	movs	r2, r0
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e0b2      	b.n	8001b14 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80019ae:	4b38      	ldr	r3, [pc, #224]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 80019b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019b2:	2380      	movs	r3, #128	; 0x80
 80019b4:	025b      	lsls	r3, r3, #9
 80019b6:	4013      	ands	r3, r2
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x588>
 80019ba:	e000      	b.n	80019be <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80019bc:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d100      	bne.n	80019c8 <HAL_RCC_OscConfig+0x5b4>
 80019c6:	e0a4      	b.n	8001b12 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019c8:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	220c      	movs	r2, #12
 80019ce:	4013      	ands	r3, r2
 80019d0:	2b08      	cmp	r3, #8
 80019d2:	d100      	bne.n	80019d6 <HAL_RCC_OscConfig+0x5c2>
 80019d4:	e078      	b.n	8001ac8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d14c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019de:	4b2c      	ldr	r3, [pc, #176]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	4b2b      	ldr	r3, [pc, #172]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 80019e4:	492e      	ldr	r1, [pc, #184]	; (8001aa0 <HAL_RCC_OscConfig+0x68c>)
 80019e6:	400a      	ands	r2, r1
 80019e8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ea:	f7ff fa81 	bl	8000ef0 <HAL_GetTick>
 80019ee:	0003      	movs	r3, r0
 80019f0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff fa7c 	bl	8000ef0 <HAL_GetTick>
 80019f8:	0002      	movs	r2, r0
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e086      	b.n	8001b14 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a06:	4b22      	ldr	r3, [pc, #136]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	049b      	lsls	r3, r3, #18
 8001a0e:	4013      	ands	r3, r2
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a12:	4b1f      	ldr	r3, [pc, #124]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a16:	220f      	movs	r2, #15
 8001a18:	4393      	bics	r3, r2
 8001a1a:	0019      	movs	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001a22:	430a      	orrs	r2, r1
 8001a24:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a26:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	4a1e      	ldr	r2, [pc, #120]	; (8001aa4 <HAL_RCC_OscConfig+0x690>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	0019      	movs	r1, r3
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a38:	431a      	orrs	r2, r3
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001a46:	2180      	movs	r1, #128	; 0x80
 8001a48:	0449      	lsls	r1, r1, #17
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a4e:	f7ff fa4f 	bl	8000ef0 <HAL_GetTick>
 8001a52:	0003      	movs	r3, r0
 8001a54:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a58:	f7ff fa4a 	bl	8000ef0 <HAL_GetTick>
 8001a5c:	0002      	movs	r2, r0
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e054      	b.n	8001b14 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	049b      	lsls	r3, r3, #18
 8001a72:	4013      	ands	r3, r2
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x644>
 8001a76:	e04c      	b.n	8001b12 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a78:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <HAL_RCC_OscConfig+0x67c>)
 8001a7e:	4908      	ldr	r1, [pc, #32]	; (8001aa0 <HAL_RCC_OscConfig+0x68c>)
 8001a80:	400a      	ands	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff fa34 	bl	8000ef0 <HAL_GetTick>
 8001a88:	0003      	movs	r3, r0
 8001a8a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8c:	e015      	b.n	8001aba <HAL_RCC_OscConfig+0x6a6>
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	40021000 	.word	0x40021000
 8001a94:	00001388 	.word	0x00001388
 8001a98:	efffffff 	.word	0xefffffff
 8001a9c:	fffeffff 	.word	0xfffeffff
 8001aa0:	feffffff 	.word	0xfeffffff
 8001aa4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff fa22 	bl	8000ef0 <HAL_GetTick>
 8001aac:	0002      	movs	r2, r0
 8001aae:	69bb      	ldr	r3, [r7, #24]
 8001ab0:	1ad3      	subs	r3, r2, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e02c      	b.n	8001b14 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aba:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <HAL_RCC_OscConfig+0x708>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	2380      	movs	r3, #128	; 0x80
 8001ac0:	049b      	lsls	r3, r3, #18
 8001ac2:	4013      	ands	r3, r2
 8001ac4:	d1f0      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x694>
 8001ac6:	e024      	b.n	8001b12 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e01f      	b.n	8001b14 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001ad4:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <HAL_RCC_OscConfig+0x708>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001ada:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <HAL_RCC_OscConfig+0x708>)
 8001adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ade:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	23c0      	movs	r3, #192	; 0xc0
 8001ae4:	025b      	lsls	r3, r3, #9
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d10e      	bne.n	8001b0e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	220f      	movs	r2, #15
 8001af4:	401a      	ands	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d107      	bne.n	8001b0e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	23f0      	movs	r3, #240	; 0xf0
 8001b02:	039b      	lsls	r3, r3, #14
 8001b04:	401a      	ands	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d001      	beq.n	8001b12 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	0018      	movs	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	b008      	add	sp, #32
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40021000 	.word	0x40021000

08001b20 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d101      	bne.n	8001b34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e0bf      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b34:	4b61      	ldr	r3, [pc, #388]	; (8001cbc <HAL_RCC_ClockConfig+0x19c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d911      	bls.n	8001b66 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b42:	4b5e      	ldr	r3, [pc, #376]	; (8001cbc <HAL_RCC_ClockConfig+0x19c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2201      	movs	r2, #1
 8001b48:	4393      	bics	r3, r2
 8001b4a:	0019      	movs	r1, r3
 8001b4c:	4b5b      	ldr	r3, [pc, #364]	; (8001cbc <HAL_RCC_ClockConfig+0x19c>)
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	430a      	orrs	r2, r1
 8001b52:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b54:	4b59      	ldr	r3, [pc, #356]	; (8001cbc <HAL_RCC_ClockConfig+0x19c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2201      	movs	r2, #1
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d001      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e0a6      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d015      	beq.n	8001b9c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2204      	movs	r2, #4
 8001b76:	4013      	ands	r3, r2
 8001b78:	d006      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001b7a:	4b51      	ldr	r3, [pc, #324]	; (8001cc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001b7c:	685a      	ldr	r2, [r3, #4]
 8001b7e:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001b80:	21e0      	movs	r1, #224	; 0xe0
 8001b82:	00c9      	lsls	r1, r1, #3
 8001b84:	430a      	orrs	r2, r1
 8001b86:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b88:	4b4d      	ldr	r3, [pc, #308]	; (8001cc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	22f0      	movs	r2, #240	; 0xf0
 8001b8e:	4393      	bics	r3, r2
 8001b90:	0019      	movs	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	4b4a      	ldr	r3, [pc, #296]	; (8001cc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001b98:	430a      	orrs	r2, r1
 8001b9a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	d04c      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	d107      	bne.n	8001bbe <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bae:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	2380      	movs	r3, #128	; 0x80
 8001bb4:	029b      	lsls	r3, r3, #10
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	d120      	bne.n	8001bfc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e07a      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d107      	bne.n	8001bd6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc6:	4b3e      	ldr	r3, [pc, #248]	; (8001cc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	2380      	movs	r3, #128	; 0x80
 8001bcc:	049b      	lsls	r3, r3, #18
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d114      	bne.n	8001bfc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e06e      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d107      	bne.n	8001bee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001bde:	4b38      	ldr	r3, [pc, #224]	; (8001cc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001be0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001be2:	2380      	movs	r3, #128	; 0x80
 8001be4:	025b      	lsls	r3, r3, #9
 8001be6:	4013      	ands	r3, r2
 8001be8:	d108      	bne.n	8001bfc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e062      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bee:	4b34      	ldr	r3, [pc, #208]	; (8001cc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e05b      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bfc:	4b30      	ldr	r3, [pc, #192]	; (8001cc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	2203      	movs	r2, #3
 8001c02:	4393      	bics	r3, r2
 8001c04:	0019      	movs	r1, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	4b2d      	ldr	r3, [pc, #180]	; (8001cc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c10:	f7ff f96e 	bl	8000ef0 <HAL_GetTick>
 8001c14:	0003      	movs	r3, r0
 8001c16:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c18:	e009      	b.n	8001c2e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c1a:	f7ff f969 	bl	8000ef0 <HAL_GetTick>
 8001c1e:	0002      	movs	r2, r0
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	4a27      	ldr	r2, [pc, #156]	; (8001cc4 <HAL_RCC_ClockConfig+0x1a4>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e042      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c2e:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	220c      	movs	r2, #12
 8001c34:	401a      	ands	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d1ec      	bne.n	8001c1a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c40:	4b1e      	ldr	r3, [pc, #120]	; (8001cbc <HAL_RCC_ClockConfig+0x19c>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2201      	movs	r2, #1
 8001c46:	4013      	ands	r3, r2
 8001c48:	683a      	ldr	r2, [r7, #0]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d211      	bcs.n	8001c72 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c4e:	4b1b      	ldr	r3, [pc, #108]	; (8001cbc <HAL_RCC_ClockConfig+0x19c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2201      	movs	r2, #1
 8001c54:	4393      	bics	r3, r2
 8001c56:	0019      	movs	r1, r3
 8001c58:	4b18      	ldr	r3, [pc, #96]	; (8001cbc <HAL_RCC_ClockConfig+0x19c>)
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c60:	4b16      	ldr	r3, [pc, #88]	; (8001cbc <HAL_RCC_ClockConfig+0x19c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2201      	movs	r2, #1
 8001c66:	4013      	ands	r3, r2
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d001      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e020      	b.n	8001cb4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2204      	movs	r2, #4
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d009      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001c7c:	4b10      	ldr	r3, [pc, #64]	; (8001cc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	4a11      	ldr	r2, [pc, #68]	; (8001cc8 <HAL_RCC_ClockConfig+0x1a8>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	0019      	movs	r1, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68da      	ldr	r2, [r3, #12]
 8001c8a:	4b0d      	ldr	r3, [pc, #52]	; (8001cc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001c90:	f000 f820 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 8001c94:	0001      	movs	r1, r0
 8001c96:	4b0a      	ldr	r3, [pc, #40]	; (8001cc0 <HAL_RCC_ClockConfig+0x1a0>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	091b      	lsrs	r3, r3, #4
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	4a0a      	ldr	r2, [pc, #40]	; (8001ccc <HAL_RCC_ClockConfig+0x1ac>)
 8001ca2:	5cd3      	ldrb	r3, [r2, r3]
 8001ca4:	000a      	movs	r2, r1
 8001ca6:	40da      	lsrs	r2, r3
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_RCC_ClockConfig+0x1b0>)
 8001caa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001cac:	2000      	movs	r0, #0
 8001cae:	f7ff f8d9 	bl	8000e64 <HAL_InitTick>
  
  return HAL_OK;
 8001cb2:	2300      	movs	r3, #0
}
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	b004      	add	sp, #16
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	40022000 	.word	0x40022000
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	00001388 	.word	0x00001388
 8001cc8:	fffff8ff 	.word	0xfffff8ff
 8001ccc:	08003f28 	.word	0x08003f28
 8001cd0:	20000008 	.word	0x20000008

08001cd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b08f      	sub	sp, #60	; 0x3c
 8001cd8:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001cda:	2314      	movs	r3, #20
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	4a38      	ldr	r2, [pc, #224]	; (8001dc0 <HAL_RCC_GetSysClockFreq+0xec>)
 8001ce0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001ce2:	c313      	stmia	r3!, {r0, r1, r4}
 8001ce4:	6812      	ldr	r2, [r2, #0]
 8001ce6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001ce8:	1d3b      	adds	r3, r7, #4
 8001cea:	4a36      	ldr	r2, [pc, #216]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001cec:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001cee:	c313      	stmia	r3!, {r0, r1, r4}
 8001cf0:	6812      	ldr	r2, [r2, #0]
 8001cf2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	637b      	str	r3, [r7, #52]	; 0x34
 8001d00:	2300      	movs	r3, #0
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001d08:	4b2f      	ldr	r3, [pc, #188]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d10:	220c      	movs	r2, #12
 8001d12:	4013      	ands	r3, r2
 8001d14:	2b0c      	cmp	r3, #12
 8001d16:	d047      	beq.n	8001da8 <HAL_RCC_GetSysClockFreq+0xd4>
 8001d18:	d849      	bhi.n	8001dae <HAL_RCC_GetSysClockFreq+0xda>
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	d002      	beq.n	8001d24 <HAL_RCC_GetSysClockFreq+0x50>
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d003      	beq.n	8001d2a <HAL_RCC_GetSysClockFreq+0x56>
 8001d22:	e044      	b.n	8001dae <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d24:	4b29      	ldr	r3, [pc, #164]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d28:	e044      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d2c:	0c9b      	lsrs	r3, r3, #18
 8001d2e:	220f      	movs	r2, #15
 8001d30:	4013      	ands	r3, r2
 8001d32:	2214      	movs	r2, #20
 8001d34:	18ba      	adds	r2, r7, r2
 8001d36:	5cd3      	ldrb	r3, [r2, r3]
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d3a:	4b23      	ldr	r3, [pc, #140]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3e:	220f      	movs	r2, #15
 8001d40:	4013      	ands	r3, r2
 8001d42:	1d3a      	adds	r2, r7, #4
 8001d44:	5cd3      	ldrb	r3, [r2, r3]
 8001d46:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001d48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d4a:	23c0      	movs	r3, #192	; 0xc0
 8001d4c:	025b      	lsls	r3, r3, #9
 8001d4e:	401a      	ands	r2, r3
 8001d50:	2380      	movs	r3, #128	; 0x80
 8001d52:	025b      	lsls	r3, r3, #9
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d109      	bne.n	8001d6c <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d5a:	481c      	ldr	r0, [pc, #112]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d5c:	f7fe f9e6 	bl	800012c <__udivsi3>
 8001d60:	0003      	movs	r3, r0
 8001d62:	001a      	movs	r2, r3
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	4353      	muls	r3, r2
 8001d68:	637b      	str	r3, [r7, #52]	; 0x34
 8001d6a:	e01a      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001d6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d6e:	23c0      	movs	r3, #192	; 0xc0
 8001d70:	025b      	lsls	r3, r3, #9
 8001d72:	401a      	ands	r2, r3
 8001d74:	23c0      	movs	r3, #192	; 0xc0
 8001d76:	025b      	lsls	r3, r3, #9
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d109      	bne.n	8001d90 <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d7e:	4814      	ldr	r0, [pc, #80]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001d80:	f7fe f9d4 	bl	800012c <__udivsi3>
 8001d84:	0003      	movs	r3, r0
 8001d86:	001a      	movs	r2, r3
 8001d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8a:	4353      	muls	r3, r2
 8001d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001d90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d92:	480e      	ldr	r0, [pc, #56]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001d94:	f7fe f9ca 	bl	800012c <__udivsi3>
 8001d98:	0003      	movs	r3, r0
 8001d9a:	001a      	movs	r2, r3
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	4353      	muls	r3, r2
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001da6:	e005      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001da8:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8001daa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001dac:	e002      	b.n	8001db4 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001dae:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <HAL_RCC_GetSysClockFreq+0xf8>)
 8001db0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001db2:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001db6:	0018      	movs	r0, r3
 8001db8:	46bd      	mov	sp, r7
 8001dba:	b00f      	add	sp, #60	; 0x3c
 8001dbc:	bd90      	pop	{r4, r7, pc}
 8001dbe:	46c0      	nop			; (mov r8, r8)
 8001dc0:	08003f08 	.word	0x08003f08
 8001dc4:	08003f18 	.word	0x08003f18
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	007a1200 	.word	0x007a1200
 8001dd0:	02dc6c00 	.word	0x02dc6c00

08001dd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd8:	4b02      	ldr	r3, [pc, #8]	; (8001de4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dda:	681b      	ldr	r3, [r3, #0]
}
 8001ddc:	0018      	movs	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	46c0      	nop			; (mov r8, r8)
 8001de4:	20000008 	.word	0x20000008

08001de8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001dec:	f7ff fff2 	bl	8001dd4 <HAL_RCC_GetHCLKFreq>
 8001df0:	0001      	movs	r1, r0
 8001df2:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	0a1b      	lsrs	r3, r3, #8
 8001df8:	2207      	movs	r2, #7
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dfe:	5cd3      	ldrb	r3, [r2, r3]
 8001e00:	40d9      	lsrs	r1, r3
 8001e02:	000b      	movs	r3, r1
}    
 8001e04:	0018      	movs	r0, r3
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	46c0      	nop			; (mov r8, r8)
 8001e0c:	40021000 	.word	0x40021000
 8001e10:	08003f38 	.word	0x08003f38

08001e14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b086      	sub	sp, #24
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2380      	movs	r3, #128	; 0x80
 8001e2a:	025b      	lsls	r3, r3, #9
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	d100      	bne.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001e30:	e08e      	b.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001e32:	2017      	movs	r0, #23
 8001e34:	183b      	adds	r3, r7, r0
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e3a:	4b67      	ldr	r3, [pc, #412]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e3c:	69da      	ldr	r2, [r3, #28]
 8001e3e:	2380      	movs	r3, #128	; 0x80
 8001e40:	055b      	lsls	r3, r3, #21
 8001e42:	4013      	ands	r3, r2
 8001e44:	d110      	bne.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e46:	4b64      	ldr	r3, [pc, #400]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e48:	69da      	ldr	r2, [r3, #28]
 8001e4a:	4b63      	ldr	r3, [pc, #396]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e4c:	2180      	movs	r1, #128	; 0x80
 8001e4e:	0549      	lsls	r1, r1, #21
 8001e50:	430a      	orrs	r2, r1
 8001e52:	61da      	str	r2, [r3, #28]
 8001e54:	4b60      	ldr	r3, [pc, #384]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001e56:	69da      	ldr	r2, [r3, #28]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	055b      	lsls	r3, r3, #21
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	60bb      	str	r3, [r7, #8]
 8001e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e62:	183b      	adds	r3, r7, r0
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e68:	4b5c      	ldr	r3, [pc, #368]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	005b      	lsls	r3, r3, #1
 8001e70:	4013      	ands	r3, r2
 8001e72:	d11a      	bne.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e74:	4b59      	ldr	r3, [pc, #356]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	4b58      	ldr	r3, [pc, #352]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001e7a:	2180      	movs	r1, #128	; 0x80
 8001e7c:	0049      	lsls	r1, r1, #1
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e82:	f7ff f835 	bl	8000ef0 <HAL_GetTick>
 8001e86:	0003      	movs	r3, r0
 8001e88:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8a:	e008      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e8c:	f7ff f830 	bl	8000ef0 <HAL_GetTick>
 8001e90:	0002      	movs	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b64      	cmp	r3, #100	; 0x64
 8001e98:	d901      	bls.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e097      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x1ba>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e9e:	4b4f      	ldr	r3, [pc, #316]	; (8001fdc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	2380      	movs	r3, #128	; 0x80
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001eaa:	4b4b      	ldr	r3, [pc, #300]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001eac:	6a1a      	ldr	r2, [r3, #32]
 8001eae:	23c0      	movs	r3, #192	; 0xc0
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d034      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	23c0      	movs	r3, #192	; 0xc0
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	68fa      	ldr	r2, [r7, #12]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d02c      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ecc:	4b42      	ldr	r3, [pc, #264]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	4a43      	ldr	r2, [pc, #268]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001ed6:	4b40      	ldr	r3, [pc, #256]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ed8:	6a1a      	ldr	r2, [r3, #32]
 8001eda:	4b3f      	ldr	r3, [pc, #252]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001edc:	2180      	movs	r1, #128	; 0x80
 8001ede:	0249      	lsls	r1, r1, #9
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ee4:	4b3c      	ldr	r3, [pc, #240]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ee6:	6a1a      	ldr	r2, [r3, #32]
 8001ee8:	4b3b      	ldr	r3, [pc, #236]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001eea:	493e      	ldr	r1, [pc, #248]	; (8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eec:	400a      	ands	r2, r1
 8001eee:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001ef0:	4b39      	ldr	r3, [pc, #228]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001ef2:	68fa      	ldr	r2, [r7, #12]
 8001ef4:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	4013      	ands	r3, r2
 8001efc:	d013      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efe:	f7fe fff7 	bl	8000ef0 <HAL_GetTick>
 8001f02:	0003      	movs	r3, r0
 8001f04:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f06:	e009      	b.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f08:	f7fe fff2 	bl	8000ef0 <HAL_GetTick>
 8001f0c:	0002      	movs	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	4a35      	ldr	r2, [pc, #212]	; (8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e058      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f1c:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	2202      	movs	r2, #2
 8001f22:	4013      	ands	r3, r2
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f26:	4b2c      	ldr	r3, [pc, #176]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	4a2d      	ldr	r2, [pc, #180]	; (8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	0019      	movs	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	4b28      	ldr	r3, [pc, #160]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f36:	430a      	orrs	r2, r1
 8001f38:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f3a:	2317      	movs	r3, #23
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d105      	bne.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f44:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f46:	69da      	ldr	r2, [r3, #28]
 8001f48:	4b23      	ldr	r3, [pc, #140]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f4a:	4928      	ldr	r1, [pc, #160]	; (8001fec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001f4c:	400a      	ands	r2, r1
 8001f4e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2201      	movs	r2, #1
 8001f56:	4013      	ands	r3, r2
 8001f58:	d009      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f5a:	4b1f      	ldr	r3, [pc, #124]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	2203      	movs	r2, #3
 8001f60:	4393      	bics	r3, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2220      	movs	r2, #32
 8001f74:	4013      	ands	r3, r2
 8001f76:	d009      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f78:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	2210      	movs	r2, #16
 8001f7e:	4393      	bics	r3, r2
 8001f80:	0019      	movs	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68da      	ldr	r2, [r3, #12]
 8001f86:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	029b      	lsls	r3, r3, #10
 8001f94:	4013      	ands	r3, r2
 8001f96:	d009      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f98:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9c:	2280      	movs	r2, #128	; 0x80
 8001f9e:	4393      	bics	r3, r2
 8001fa0:	0019      	movs	r1, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695a      	ldr	r2, [r3, #20]
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d009      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001fb8:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbc:	2240      	movs	r2, #64	; 0x40
 8001fbe:	4393      	bics	r3, r2
 8001fc0:	0019      	movs	r1, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	691a      	ldr	r2, [r3, #16]
 8001fc6:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001fc8:	430a      	orrs	r2, r1
 8001fca:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	0018      	movs	r0, r3
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	b006      	add	sp, #24
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	40021000 	.word	0x40021000
 8001fdc:	40007000 	.word	0x40007000
 8001fe0:	fffffcff 	.word	0xfffffcff
 8001fe4:	fffeffff 	.word	0xfffeffff
 8001fe8:	00001388 	.word	0x00001388
 8001fec:	efffffff 	.word	0xefffffff

08001ff0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d101      	bne.n	8002002 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e042      	b.n	8002088 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	223d      	movs	r2, #61	; 0x3d
 8002006:	5c9b      	ldrb	r3, [r3, r2]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d107      	bne.n	800201e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	223c      	movs	r2, #60	; 0x3c
 8002012:	2100      	movs	r1, #0
 8002014:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	0018      	movs	r0, r3
 800201a:	f7fe fd65 	bl	8000ae8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	223d      	movs	r2, #61	; 0x3d
 8002022:	2102      	movs	r1, #2
 8002024:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3304      	adds	r3, #4
 800202e:	0019      	movs	r1, r3
 8002030:	0010      	movs	r0, r2
 8002032:	f000 fb03 	bl	800263c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2246      	movs	r2, #70	; 0x46
 800203a:	2101      	movs	r1, #1
 800203c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	223e      	movs	r2, #62	; 0x3e
 8002042:	2101      	movs	r1, #1
 8002044:	5499      	strb	r1, [r3, r2]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	223f      	movs	r2, #63	; 0x3f
 800204a:	2101      	movs	r1, #1
 800204c:	5499      	strb	r1, [r3, r2]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2240      	movs	r2, #64	; 0x40
 8002052:	2101      	movs	r1, #1
 8002054:	5499      	strb	r1, [r3, r2]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2241      	movs	r2, #65	; 0x41
 800205a:	2101      	movs	r1, #1
 800205c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2242      	movs	r2, #66	; 0x42
 8002062:	2101      	movs	r1, #1
 8002064:	5499      	strb	r1, [r3, r2]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2243      	movs	r2, #67	; 0x43
 800206a:	2101      	movs	r1, #1
 800206c:	5499      	strb	r1, [r3, r2]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2244      	movs	r2, #68	; 0x44
 8002072:	2101      	movs	r1, #1
 8002074:	5499      	strb	r1, [r3, r2]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2245      	movs	r2, #69	; 0x45
 800207a:	2101      	movs	r1, #1
 800207c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	223d      	movs	r2, #61	; 0x3d
 8002082:	2101      	movs	r1, #1
 8002084:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	0018      	movs	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	b002      	add	sp, #8
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d108      	bne.n	80020b2 <HAL_TIM_PWM_Start_IT+0x22>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	223e      	movs	r2, #62	; 0x3e
 80020a4:	5c9b      	ldrb	r3, [r3, r2]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	3b01      	subs	r3, #1
 80020aa:	1e5a      	subs	r2, r3, #1
 80020ac:	4193      	sbcs	r3, r2
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	e01f      	b.n	80020f2 <HAL_TIM_PWM_Start_IT+0x62>
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	2b04      	cmp	r3, #4
 80020b6:	d108      	bne.n	80020ca <HAL_TIM_PWM_Start_IT+0x3a>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	223f      	movs	r2, #63	; 0x3f
 80020bc:	5c9b      	ldrb	r3, [r3, r2]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	3b01      	subs	r3, #1
 80020c2:	1e5a      	subs	r2, r3, #1
 80020c4:	4193      	sbcs	r3, r2
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	e013      	b.n	80020f2 <HAL_TIM_PWM_Start_IT+0x62>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d108      	bne.n	80020e2 <HAL_TIM_PWM_Start_IT+0x52>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2240      	movs	r2, #64	; 0x40
 80020d4:	5c9b      	ldrb	r3, [r3, r2]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	3b01      	subs	r3, #1
 80020da:	1e5a      	subs	r2, r3, #1
 80020dc:	4193      	sbcs	r3, r2
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	e007      	b.n	80020f2 <HAL_TIM_PWM_Start_IT+0x62>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2241      	movs	r2, #65	; 0x41
 80020e6:	5c9b      	ldrb	r3, [r3, r2]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	3b01      	subs	r3, #1
 80020ec:	1e5a      	subs	r2, r3, #1
 80020ee:	4193      	sbcs	r3, r2
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_TIM_PWM_Start_IT+0x6a>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e0a2      	b.n	8002240 <HAL_TIM_PWM_Start_IT+0x1b0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d104      	bne.n	800210a <HAL_TIM_PWM_Start_IT+0x7a>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	223e      	movs	r2, #62	; 0x3e
 8002104:	2102      	movs	r1, #2
 8002106:	5499      	strb	r1, [r3, r2]
 8002108:	e013      	b.n	8002132 <HAL_TIM_PWM_Start_IT+0xa2>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b04      	cmp	r3, #4
 800210e:	d104      	bne.n	800211a <HAL_TIM_PWM_Start_IT+0x8a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	223f      	movs	r2, #63	; 0x3f
 8002114:	2102      	movs	r1, #2
 8002116:	5499      	strb	r1, [r3, r2]
 8002118:	e00b      	b.n	8002132 <HAL_TIM_PWM_Start_IT+0xa2>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b08      	cmp	r3, #8
 800211e:	d104      	bne.n	800212a <HAL_TIM_PWM_Start_IT+0x9a>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2240      	movs	r2, #64	; 0x40
 8002124:	2102      	movs	r1, #2
 8002126:	5499      	strb	r1, [r3, r2]
 8002128:	e003      	b.n	8002132 <HAL_TIM_PWM_Start_IT+0xa2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2241      	movs	r2, #65	; 0x41
 800212e:	2102      	movs	r1, #2
 8002130:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b0c      	cmp	r3, #12
 8002136:	d02a      	beq.n	800218e <HAL_TIM_PWM_Start_IT+0xfe>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2b0c      	cmp	r3, #12
 800213c:	d830      	bhi.n	80021a0 <HAL_TIM_PWM_Start_IT+0x110>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b08      	cmp	r3, #8
 8002142:	d01b      	beq.n	800217c <HAL_TIM_PWM_Start_IT+0xec>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2b08      	cmp	r3, #8
 8002148:	d82a      	bhi.n	80021a0 <HAL_TIM_PWM_Start_IT+0x110>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d003      	beq.n	8002158 <HAL_TIM_PWM_Start_IT+0xc8>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	2b04      	cmp	r3, #4
 8002154:	d009      	beq.n	800216a <HAL_TIM_PWM_Start_IT+0xda>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 8002156:	e023      	b.n	80021a0 <HAL_TIM_PWM_Start_IT+0x110>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	68da      	ldr	r2, [r3, #12]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2102      	movs	r1, #2
 8002164:	430a      	orrs	r2, r1
 8002166:	60da      	str	r2, [r3, #12]
      break;
 8002168:	e01b      	b.n	80021a2 <HAL_TIM_PWM_Start_IT+0x112>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2104      	movs	r1, #4
 8002176:	430a      	orrs	r2, r1
 8002178:	60da      	str	r2, [r3, #12]
      break;
 800217a:	e012      	b.n	80021a2 <HAL_TIM_PWM_Start_IT+0x112>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2108      	movs	r1, #8
 8002188:	430a      	orrs	r2, r1
 800218a:	60da      	str	r2, [r3, #12]
      break;
 800218c:	e009      	b.n	80021a2 <HAL_TIM_PWM_Start_IT+0x112>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68da      	ldr	r2, [r3, #12]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2110      	movs	r1, #16
 800219a:	430a      	orrs	r2, r1
 800219c:	60da      	str	r2, [r3, #12]
      break;
 800219e:	e000      	b.n	80021a2 <HAL_TIM_PWM_Start_IT+0x112>
      break;
 80021a0:	46c0      	nop			; (mov r8, r8)
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6839      	ldr	r1, [r7, #0]
 80021a8:	2201      	movs	r2, #1
 80021aa:	0018      	movs	r0, r3
 80021ac:	f000 fc9c 	bl	8002ae8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a24      	ldr	r2, [pc, #144]	; (8002248 <HAL_TIM_PWM_Start_IT+0x1b8>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d009      	beq.n	80021ce <HAL_TIM_PWM_Start_IT+0x13e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a23      	ldr	r2, [pc, #140]	; (800224c <HAL_TIM_PWM_Start_IT+0x1bc>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d004      	beq.n	80021ce <HAL_TIM_PWM_Start_IT+0x13e>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a21      	ldr	r2, [pc, #132]	; (8002250 <HAL_TIM_PWM_Start_IT+0x1c0>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d101      	bne.n	80021d2 <HAL_TIM_PWM_Start_IT+0x142>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <HAL_TIM_PWM_Start_IT+0x144>
 80021d2:	2300      	movs	r3, #0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d008      	beq.n	80021ea <HAL_TIM_PWM_Start_IT+0x15a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2180      	movs	r1, #128	; 0x80
 80021e4:	0209      	lsls	r1, r1, #8
 80021e6:	430a      	orrs	r2, r1
 80021e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a16      	ldr	r2, [pc, #88]	; (8002248 <HAL_TIM_PWM_Start_IT+0x1b8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d00a      	beq.n	800220a <HAL_TIM_PWM_Start_IT+0x17a>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	05db      	lsls	r3, r3, #23
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d004      	beq.n	800220a <HAL_TIM_PWM_Start_IT+0x17a>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a13      	ldr	r2, [pc, #76]	; (8002254 <HAL_TIM_PWM_Start_IT+0x1c4>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d111      	bne.n	800222e <HAL_TIM_PWM_Start_IT+0x19e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2207      	movs	r2, #7
 8002212:	4013      	ands	r3, r2
 8002214:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b06      	cmp	r3, #6
 800221a:	d010      	beq.n	800223e <HAL_TIM_PWM_Start_IT+0x1ae>
    {
      __HAL_TIM_ENABLE(htim);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2101      	movs	r1, #1
 8002228:	430a      	orrs	r2, r1
 800222a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800222c:	e007      	b.n	800223e <HAL_TIM_PWM_Start_IT+0x1ae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2101      	movs	r1, #1
 800223a:	430a      	orrs	r2, r1
 800223c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	0018      	movs	r0, r3
 8002242:	46bd      	mov	sp, r7
 8002244:	b004      	add	sp, #16
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40012c00 	.word	0x40012c00
 800224c:	40014400 	.word	0x40014400
 8002250:	40014800 	.word	0x40014800
 8002254:	40000400 	.word	0x40000400

08002258 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	2202      	movs	r2, #2
 8002268:	4013      	ands	r3, r2
 800226a:	2b02      	cmp	r3, #2
 800226c:	d124      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	2202      	movs	r2, #2
 8002276:	4013      	ands	r3, r2
 8002278:	2b02      	cmp	r3, #2
 800227a:	d11d      	bne.n	80022b8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2203      	movs	r2, #3
 8002282:	4252      	negs	r2, r2
 8002284:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2201      	movs	r2, #1
 800228a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	699b      	ldr	r3, [r3, #24]
 8002292:	2203      	movs	r2, #3
 8002294:	4013      	ands	r3, r2
 8002296:	d004      	beq.n	80022a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	0018      	movs	r0, r3
 800229c:	f000 f9be 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 80022a0:	e007      	b.n	80022b2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	0018      	movs	r0, r3
 80022a6:	f000 f9b1 	bl	800260c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	0018      	movs	r0, r3
 80022ae:	f7fd ffc9 	bl	8000244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	2204      	movs	r2, #4
 80022c0:	4013      	ands	r3, r2
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	d125      	bne.n	8002312 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2204      	movs	r2, #4
 80022ce:	4013      	ands	r3, r2
 80022d0:	2b04      	cmp	r3, #4
 80022d2:	d11e      	bne.n	8002312 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2205      	movs	r2, #5
 80022da:	4252      	negs	r2, r2
 80022dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2202      	movs	r2, #2
 80022e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	699a      	ldr	r2, [r3, #24]
 80022ea:	23c0      	movs	r3, #192	; 0xc0
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4013      	ands	r3, r2
 80022f0:	d004      	beq.n	80022fc <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	0018      	movs	r0, r3
 80022f6:	f000 f991 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 80022fa:	e007      	b.n	800230c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	0018      	movs	r0, r3
 8002300:	f000 f984 	bl	800260c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	0018      	movs	r0, r3
 8002308:	f7fd ff9c 	bl	8000244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2200      	movs	r2, #0
 8002310:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	2208      	movs	r2, #8
 800231a:	4013      	ands	r3, r2
 800231c:	2b08      	cmp	r3, #8
 800231e:	d124      	bne.n	800236a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	68db      	ldr	r3, [r3, #12]
 8002326:	2208      	movs	r2, #8
 8002328:	4013      	ands	r3, r2
 800232a:	2b08      	cmp	r3, #8
 800232c:	d11d      	bne.n	800236a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2209      	movs	r2, #9
 8002334:	4252      	negs	r2, r2
 8002336:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2204      	movs	r2, #4
 800233c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	2203      	movs	r2, #3
 8002346:	4013      	ands	r3, r2
 8002348:	d004      	beq.n	8002354 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	0018      	movs	r0, r3
 800234e:	f000 f965 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 8002352:	e007      	b.n	8002364 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	0018      	movs	r0, r3
 8002358:	f000 f958 	bl	800260c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	0018      	movs	r0, r3
 8002360:	f7fd ff70 	bl	8000244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	2210      	movs	r2, #16
 8002372:	4013      	ands	r3, r2
 8002374:	2b10      	cmp	r3, #16
 8002376:	d125      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2210      	movs	r2, #16
 8002380:	4013      	ands	r3, r2
 8002382:	2b10      	cmp	r3, #16
 8002384:	d11e      	bne.n	80023c4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2211      	movs	r2, #17
 800238c:	4252      	negs	r2, r2
 800238e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2208      	movs	r2, #8
 8002394:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	69da      	ldr	r2, [r3, #28]
 800239c:	23c0      	movs	r3, #192	; 0xc0
 800239e:	009b      	lsls	r3, r3, #2
 80023a0:	4013      	ands	r3, r2
 80023a2:	d004      	beq.n	80023ae <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	0018      	movs	r0, r3
 80023a8:	f000 f938 	bl	800261c <HAL_TIM_IC_CaptureCallback>
 80023ac:	e007      	b.n	80023be <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	0018      	movs	r0, r3
 80023b2:	f000 f92b 	bl	800260c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	0018      	movs	r0, r3
 80023ba:	f7fd ff43 	bl	8000244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2200      	movs	r2, #0
 80023c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	2201      	movs	r2, #1
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d10f      	bne.n	80023f2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	4013      	ands	r3, r2
 80023dc:	2b01      	cmp	r3, #1
 80023de:	d108      	bne.n	80023f2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2202      	movs	r2, #2
 80023e6:	4252      	negs	r2, r2
 80023e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	0018      	movs	r0, r3
 80023ee:	f000 f905 	bl	80025fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	2280      	movs	r2, #128	; 0x80
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b80      	cmp	r3, #128	; 0x80
 80023fe:	d10f      	bne.n	8002420 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	2280      	movs	r2, #128	; 0x80
 8002408:	4013      	ands	r3, r2
 800240a:	2b80      	cmp	r3, #128	; 0x80
 800240c:	d108      	bne.n	8002420 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2281      	movs	r2, #129	; 0x81
 8002414:	4252      	negs	r2, r2
 8002416:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	0018      	movs	r0, r3
 800241c:	f000 fc46 	bl	8002cac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	691b      	ldr	r3, [r3, #16]
 8002426:	2240      	movs	r2, #64	; 0x40
 8002428:	4013      	ands	r3, r2
 800242a:	2b40      	cmp	r3, #64	; 0x40
 800242c:	d10f      	bne.n	800244e <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2240      	movs	r2, #64	; 0x40
 8002436:	4013      	ands	r3, r2
 8002438:	2b40      	cmp	r3, #64	; 0x40
 800243a:	d108      	bne.n	800244e <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2241      	movs	r2, #65	; 0x41
 8002442:	4252      	negs	r2, r2
 8002444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	0018      	movs	r0, r3
 800244a:	f000 f8ef 	bl	800262c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	2220      	movs	r2, #32
 8002456:	4013      	ands	r3, r2
 8002458:	2b20      	cmp	r3, #32
 800245a:	d10f      	bne.n	800247c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68db      	ldr	r3, [r3, #12]
 8002462:	2220      	movs	r2, #32
 8002464:	4013      	ands	r3, r2
 8002466:	2b20      	cmp	r3, #32
 8002468:	d108      	bne.n	800247c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2221      	movs	r2, #33	; 0x21
 8002470:	4252      	negs	r2, r2
 8002472:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	0018      	movs	r0, r3
 8002478:	f000 fc10 	bl	8002c9c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800247c:	46c0      	nop			; (mov r8, r8)
 800247e:	46bd      	mov	sp, r7
 8002480:	b002      	add	sp, #8
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	223c      	movs	r2, #60	; 0x3c
 8002494:	5c9b      	ldrb	r3, [r3, r2]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d101      	bne.n	800249e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800249a:	2302      	movs	r3, #2
 800249c:	e0a7      	b.n	80025ee <HAL_TIM_PWM_ConfigChannel+0x16a>
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	223c      	movs	r2, #60	; 0x3c
 80024a2:	2101      	movs	r1, #1
 80024a4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2b0c      	cmp	r3, #12
 80024aa:	d100      	bne.n	80024ae <HAL_TIM_PWM_ConfigChannel+0x2a>
 80024ac:	e076      	b.n	800259c <HAL_TIM_PWM_ConfigChannel+0x118>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b0c      	cmp	r3, #12
 80024b2:	d900      	bls.n	80024b6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80024b4:	e095      	b.n	80025e2 <HAL_TIM_PWM_ConfigChannel+0x15e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d04e      	beq.n	800255a <HAL_TIM_PWM_ConfigChannel+0xd6>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d900      	bls.n	80024c4 <HAL_TIM_PWM_ConfigChannel+0x40>
 80024c2:	e08e      	b.n	80025e2 <HAL_TIM_PWM_ConfigChannel+0x15e>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_TIM_PWM_ConfigChannel+0x4e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d021      	beq.n	8002514 <HAL_TIM_PWM_ConfigChannel+0x90>
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
      break;
    }

    default:
      break;
 80024d0:	e087      	b.n	80025e2 <HAL_TIM_PWM_ConfigChannel+0x15e>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	0011      	movs	r1, r2
 80024da:	0018      	movs	r0, r3
 80024dc:	f000 f924 	bl	8002728 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	699a      	ldr	r2, [r3, #24]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2108      	movs	r1, #8
 80024ec:	430a      	orrs	r2, r1
 80024ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699a      	ldr	r2, [r3, #24]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2104      	movs	r1, #4
 80024fc:	438a      	bics	r2, r1
 80024fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	6999      	ldr	r1, [r3, #24]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	691a      	ldr	r2, [r3, #16]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	619a      	str	r2, [r3, #24]
      break;
 8002512:	e067      	b.n	80025e4 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68ba      	ldr	r2, [r7, #8]
 800251a:	0011      	movs	r1, r2
 800251c:	0018      	movs	r0, r3
 800251e:	f000 f981 	bl	8002824 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	699a      	ldr	r2, [r3, #24]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2180      	movs	r1, #128	; 0x80
 800252e:	0109      	lsls	r1, r1, #4
 8002530:	430a      	orrs	r2, r1
 8002532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	492e      	ldr	r1, [pc, #184]	; (80025f8 <HAL_TIM_PWM_ConfigChannel+0x174>)
 8002540:	400a      	ands	r2, r1
 8002542:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6999      	ldr	r1, [r3, #24]
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	021a      	lsls	r2, r3, #8
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	619a      	str	r2, [r3, #24]
      break;
 8002558:	e044      	b.n	80025e4 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	0011      	movs	r1, r2
 8002562:	0018      	movs	r0, r3
 8002564:	f000 f9dc 	bl	8002920 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69da      	ldr	r2, [r3, #28]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2108      	movs	r1, #8
 8002574:	430a      	orrs	r2, r1
 8002576:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	69da      	ldr	r2, [r3, #28]
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2104      	movs	r1, #4
 8002584:	438a      	bics	r2, r1
 8002586:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	69d9      	ldr	r1, [r3, #28]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	691a      	ldr	r2, [r3, #16]
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	61da      	str	r2, [r3, #28]
      break;
 800259a:	e023      	b.n	80025e4 <HAL_TIM_PWM_ConfigChannel+0x160>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	0011      	movs	r1, r2
 80025a4:	0018      	movs	r0, r3
 80025a6:	f000 fa3b 	bl	8002a20 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	69da      	ldr	r2, [r3, #28]
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	2180      	movs	r1, #128	; 0x80
 80025b6:	0109      	lsls	r1, r1, #4
 80025b8:	430a      	orrs	r2, r1
 80025ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	69da      	ldr	r2, [r3, #28]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	490c      	ldr	r1, [pc, #48]	; (80025f8 <HAL_TIM_PWM_ConfigChannel+0x174>)
 80025c8:	400a      	ands	r2, r1
 80025ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	69d9      	ldr	r1, [r3, #28]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	021a      	lsls	r2, r3, #8
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	61da      	str	r2, [r3, #28]
      break;
 80025e0:	e000      	b.n	80025e4 <HAL_TIM_PWM_ConfigChannel+0x160>
      break;
 80025e2:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	223c      	movs	r2, #60	; 0x3c
 80025e8:	2100      	movs	r1, #0
 80025ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	0018      	movs	r0, r3
 80025f0:	46bd      	mov	sp, r7
 80025f2:	b004      	add	sp, #16
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	fffffbff 	.word	0xfffffbff

080025fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002604:	46c0      	nop			; (mov r8, r8)
 8002606:	46bd      	mov	sp, r7
 8002608:	b002      	add	sp, #8
 800260a:	bd80      	pop	{r7, pc}

0800260c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002614:	46c0      	nop			; (mov r8, r8)
 8002616:	46bd      	mov	sp, r7
 8002618:	b002      	add	sp, #8
 800261a:	bd80      	pop	{r7, pc}

0800261c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002624:	46c0      	nop			; (mov r8, r8)
 8002626:	46bd      	mov	sp, r7
 8002628:	b002      	add	sp, #8
 800262a:	bd80      	pop	{r7, pc}

0800262c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002634:	46c0      	nop			; (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	b002      	add	sp, #8
 800263a:	bd80      	pop	{r7, pc}

0800263c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a30      	ldr	r2, [pc, #192]	; (8002710 <TIM_Base_SetConfig+0xd4>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d008      	beq.n	8002666 <TIM_Base_SetConfig+0x2a>
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	2380      	movs	r3, #128	; 0x80
 8002658:	05db      	lsls	r3, r3, #23
 800265a:	429a      	cmp	r2, r3
 800265c:	d003      	beq.n	8002666 <TIM_Base_SetConfig+0x2a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a2c      	ldr	r2, [pc, #176]	; (8002714 <TIM_Base_SetConfig+0xd8>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d108      	bne.n	8002678 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2270      	movs	r2, #112	; 0x70
 800266a:	4393      	bics	r3, r2
 800266c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4313      	orrs	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a25      	ldr	r2, [pc, #148]	; (8002710 <TIM_Base_SetConfig+0xd4>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d014      	beq.n	80026aa <TIM_Base_SetConfig+0x6e>
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	2380      	movs	r3, #128	; 0x80
 8002684:	05db      	lsls	r3, r3, #23
 8002686:	429a      	cmp	r2, r3
 8002688:	d00f      	beq.n	80026aa <TIM_Base_SetConfig+0x6e>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a21      	ldr	r2, [pc, #132]	; (8002714 <TIM_Base_SetConfig+0xd8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d00b      	beq.n	80026aa <TIM_Base_SetConfig+0x6e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a20      	ldr	r2, [pc, #128]	; (8002718 <TIM_Base_SetConfig+0xdc>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d007      	beq.n	80026aa <TIM_Base_SetConfig+0x6e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4a1f      	ldr	r2, [pc, #124]	; (800271c <TIM_Base_SetConfig+0xe0>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d003      	beq.n	80026aa <TIM_Base_SetConfig+0x6e>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	4a1e      	ldr	r2, [pc, #120]	; (8002720 <TIM_Base_SetConfig+0xe4>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d108      	bne.n	80026bc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4a1d      	ldr	r2, [pc, #116]	; (8002724 <TIM_Base_SetConfig+0xe8>)
 80026ae:	4013      	ands	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2280      	movs	r2, #128	; 0x80
 80026c0:	4393      	bics	r3, r2
 80026c2:	001a      	movs	r2, r3
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	4313      	orrs	r3, r2
 80026ca:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	689a      	ldr	r2, [r3, #8]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a0a      	ldr	r2, [pc, #40]	; (8002710 <TIM_Base_SetConfig+0xd4>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d007      	beq.n	80026fa <TIM_Base_SetConfig+0xbe>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a0b      	ldr	r2, [pc, #44]	; (800271c <TIM_Base_SetConfig+0xe0>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d003      	beq.n	80026fa <TIM_Base_SetConfig+0xbe>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a0a      	ldr	r2, [pc, #40]	; (8002720 <TIM_Base_SetConfig+0xe4>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d103      	bne.n	8002702 <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	691a      	ldr	r2, [r3, #16]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	615a      	str	r2, [r3, #20]
}
 8002708:	46c0      	nop			; (mov r8, r8)
 800270a:	46bd      	mov	sp, r7
 800270c:	b004      	add	sp, #16
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40012c00 	.word	0x40012c00
 8002714:	40000400 	.word	0x40000400
 8002718:	40002000 	.word	0x40002000
 800271c:	40014400 	.word	0x40014400
 8002720:	40014800 	.word	0x40014800
 8002724:	fffffcff 	.word	0xfffffcff

08002728 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1b      	ldr	r3, [r3, #32]
 8002736:	2201      	movs	r2, #1
 8002738:	4393      	bics	r3, r2
 800273a:	001a      	movs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2270      	movs	r2, #112	; 0x70
 8002756:	4393      	bics	r3, r2
 8002758:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	2203      	movs	r2, #3
 800275e:	4393      	bics	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	4313      	orrs	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	2202      	movs	r2, #2
 8002770:	4393      	bics	r3, r2
 8002772:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	4313      	orrs	r3, r2
 800277c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a23      	ldr	r2, [pc, #140]	; (8002810 <TIM_OC1_SetConfig+0xe8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d007      	beq.n	8002796 <TIM_OC1_SetConfig+0x6e>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a22      	ldr	r2, [pc, #136]	; (8002814 <TIM_OC1_SetConfig+0xec>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d003      	beq.n	8002796 <TIM_OC1_SetConfig+0x6e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a21      	ldr	r2, [pc, #132]	; (8002818 <TIM_OC1_SetConfig+0xf0>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d10c      	bne.n	80027b0 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	2208      	movs	r2, #8
 800279a:	4393      	bics	r3, r2
 800279c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68db      	ldr	r3, [r3, #12]
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	2204      	movs	r2, #4
 80027ac:	4393      	bics	r3, r2
 80027ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	4a17      	ldr	r2, [pc, #92]	; (8002810 <TIM_OC1_SetConfig+0xe8>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d007      	beq.n	80027c8 <TIM_OC1_SetConfig+0xa0>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4a16      	ldr	r2, [pc, #88]	; (8002814 <TIM_OC1_SetConfig+0xec>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d003      	beq.n	80027c8 <TIM_OC1_SetConfig+0xa0>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a15      	ldr	r2, [pc, #84]	; (8002818 <TIM_OC1_SetConfig+0xf0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d111      	bne.n	80027ec <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	4a14      	ldr	r2, [pc, #80]	; (800281c <TIM_OC1_SetConfig+0xf4>)
 80027cc:	4013      	ands	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4a13      	ldr	r2, [pc, #76]	; (8002820 <TIM_OC1_SetConfig+0xf8>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	693a      	ldr	r2, [r7, #16]
 80027de:	4313      	orrs	r3, r2
 80027e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	693a      	ldr	r2, [r7, #16]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685a      	ldr	r2, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	621a      	str	r2, [r3, #32]
}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	46bd      	mov	sp, r7
 800280a:	b006      	add	sp, #24
 800280c:	bd80      	pop	{r7, pc}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	40012c00 	.word	0x40012c00
 8002814:	40014400 	.word	0x40014400
 8002818:	40014800 	.word	0x40014800
 800281c:	fffffeff 	.word	0xfffffeff
 8002820:	fffffdff 	.word	0xfffffdff

08002824 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a1b      	ldr	r3, [r3, #32]
 8002832:	2210      	movs	r2, #16
 8002834:	4393      	bics	r3, r2
 8002836:	001a      	movs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	699b      	ldr	r3, [r3, #24]
 800284c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	4a2c      	ldr	r2, [pc, #176]	; (8002904 <TIM_OC2_SetConfig+0xe0>)
 8002852:	4013      	ands	r3, r2
 8002854:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	4a2b      	ldr	r2, [pc, #172]	; (8002908 <TIM_OC2_SetConfig+0xe4>)
 800285a:	4013      	ands	r3, r2
 800285c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	021b      	lsls	r3, r3, #8
 8002864:	68fa      	ldr	r2, [r7, #12]
 8002866:	4313      	orrs	r3, r2
 8002868:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	2220      	movs	r2, #32
 800286e:	4393      	bics	r3, r2
 8002870:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	4313      	orrs	r3, r2
 800287c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a22      	ldr	r2, [pc, #136]	; (800290c <TIM_OC2_SetConfig+0xe8>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d10d      	bne.n	80028a2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	2280      	movs	r2, #128	; 0x80
 800288a:	4393      	bics	r3, r2
 800288c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	4313      	orrs	r3, r2
 8002898:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2240      	movs	r2, #64	; 0x40
 800289e:	4393      	bics	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a19      	ldr	r2, [pc, #100]	; (800290c <TIM_OC2_SetConfig+0xe8>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d007      	beq.n	80028ba <TIM_OC2_SetConfig+0x96>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a18      	ldr	r2, [pc, #96]	; (8002910 <TIM_OC2_SetConfig+0xec>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d003      	beq.n	80028ba <TIM_OC2_SetConfig+0x96>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a17      	ldr	r2, [pc, #92]	; (8002914 <TIM_OC2_SetConfig+0xf0>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d113      	bne.n	80028e2 <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	4a16      	ldr	r2, [pc, #88]	; (8002918 <TIM_OC2_SetConfig+0xf4>)
 80028be:	4013      	ands	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4a15      	ldr	r2, [pc, #84]	; (800291c <TIM_OC2_SetConfig+0xf8>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685a      	ldr	r2, [r3, #4]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	621a      	str	r2, [r3, #32]
}
 80028fc:	46c0      	nop			; (mov r8, r8)
 80028fe:	46bd      	mov	sp, r7
 8002900:	b006      	add	sp, #24
 8002902:	bd80      	pop	{r7, pc}
 8002904:	ffff8fff 	.word	0xffff8fff
 8002908:	fffffcff 	.word	0xfffffcff
 800290c:	40012c00 	.word	0x40012c00
 8002910:	40014400 	.word	0x40014400
 8002914:	40014800 	.word	0x40014800
 8002918:	fffffbff 	.word	0xfffffbff
 800291c:	fffff7ff 	.word	0xfffff7ff

08002920 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	4a33      	ldr	r2, [pc, #204]	; (80029fc <TIM_OC3_SetConfig+0xdc>)
 8002930:	401a      	ands	r2, r3
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2270      	movs	r2, #112	; 0x70
 800294c:	4393      	bics	r3, r2
 800294e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2203      	movs	r2, #3
 8002954:	4393      	bics	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	4313      	orrs	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	4a26      	ldr	r2, [pc, #152]	; (8002a00 <TIM_OC3_SetConfig+0xe0>)
 8002966:	4013      	ands	r3, r2
 8002968:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	021b      	lsls	r3, r3, #8
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	4313      	orrs	r3, r2
 8002974:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a22      	ldr	r2, [pc, #136]	; (8002a04 <TIM_OC3_SetConfig+0xe4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d10d      	bne.n	800299a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	4a21      	ldr	r2, [pc, #132]	; (8002a08 <TIM_OC3_SetConfig+0xe8>)
 8002982:	4013      	ands	r3, r2
 8002984:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	021b      	lsls	r3, r3, #8
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	4313      	orrs	r3, r2
 8002990:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	4a1d      	ldr	r2, [pc, #116]	; (8002a0c <TIM_OC3_SetConfig+0xec>)
 8002996:	4013      	ands	r3, r2
 8002998:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4a19      	ldr	r2, [pc, #100]	; (8002a04 <TIM_OC3_SetConfig+0xe4>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d007      	beq.n	80029b2 <TIM_OC3_SetConfig+0x92>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4a1a      	ldr	r2, [pc, #104]	; (8002a10 <TIM_OC3_SetConfig+0xf0>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d003      	beq.n	80029b2 <TIM_OC3_SetConfig+0x92>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	4a19      	ldr	r2, [pc, #100]	; (8002a14 <TIM_OC3_SetConfig+0xf4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d113      	bne.n	80029da <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80029b2:	693b      	ldr	r3, [r7, #16]
 80029b4:	4a18      	ldr	r2, [pc, #96]	; (8002a18 <TIM_OC3_SetConfig+0xf8>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	4a17      	ldr	r2, [pc, #92]	; (8002a1c <TIM_OC3_SetConfig+0xfc>)
 80029be:	4013      	ands	r3, r2
 80029c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	011b      	lsls	r3, r3, #4
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	693a      	ldr	r2, [r7, #16]
 80029de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	697a      	ldr	r2, [r7, #20]
 80029f2:	621a      	str	r2, [r3, #32]
}
 80029f4:	46c0      	nop			; (mov r8, r8)
 80029f6:	46bd      	mov	sp, r7
 80029f8:	b006      	add	sp, #24
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	fffffeff 	.word	0xfffffeff
 8002a00:	fffffdff 	.word	0xfffffdff
 8002a04:	40012c00 	.word	0x40012c00
 8002a08:	fffff7ff 	.word	0xfffff7ff
 8002a0c:	fffffbff 	.word	0xfffffbff
 8002a10:	40014400 	.word	0x40014400
 8002a14:	40014800 	.word	0x40014800
 8002a18:	ffffefff 	.word	0xffffefff
 8002a1c:	ffffdfff 	.word	0xffffdfff

08002a20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	4a26      	ldr	r2, [pc, #152]	; (8002ac8 <TIM_OC4_SetConfig+0xa8>)
 8002a30:	401a      	ands	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	69db      	ldr	r3, [r3, #28]
 8002a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4a20      	ldr	r2, [pc, #128]	; (8002acc <TIM_OC4_SetConfig+0xac>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4a1f      	ldr	r2, [pc, #124]	; (8002ad0 <TIM_OC4_SetConfig+0xb0>)
 8002a54:	4013      	ands	r3, r2
 8002a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	021b      	lsls	r3, r3, #8
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	4a1b      	ldr	r2, [pc, #108]	; (8002ad4 <TIM_OC4_SetConfig+0xb4>)
 8002a68:	4013      	ands	r3, r2
 8002a6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	031b      	lsls	r3, r3, #12
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a17      	ldr	r2, [pc, #92]	; (8002ad8 <TIM_OC4_SetConfig+0xb8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d007      	beq.n	8002a90 <TIM_OC4_SetConfig+0x70>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a16      	ldr	r2, [pc, #88]	; (8002adc <TIM_OC4_SetConfig+0xbc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d003      	beq.n	8002a90 <TIM_OC4_SetConfig+0x70>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	4a15      	ldr	r2, [pc, #84]	; (8002ae0 <TIM_OC4_SetConfig+0xc0>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d109      	bne.n	8002aa4 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	4a14      	ldr	r2, [pc, #80]	; (8002ae4 <TIM_OC4_SetConfig+0xc4>)
 8002a94:	4013      	ands	r3, r2
 8002a96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	695b      	ldr	r3, [r3, #20]
 8002a9c:	019b      	lsls	r3, r3, #6
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68fa      	ldr	r2, [r7, #12]
 8002aae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	621a      	str	r2, [r3, #32]
}
 8002abe:	46c0      	nop			; (mov r8, r8)
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	b006      	add	sp, #24
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	46c0      	nop			; (mov r8, r8)
 8002ac8:	ffffefff 	.word	0xffffefff
 8002acc:	ffff8fff 	.word	0xffff8fff
 8002ad0:	fffffcff 	.word	0xfffffcff
 8002ad4:	ffffdfff 	.word	0xffffdfff
 8002ad8:	40012c00 	.word	0x40012c00
 8002adc:	40014400 	.word	0x40014400
 8002ae0:	40014800 	.word	0x40014800
 8002ae4:	ffffbfff 	.word	0xffffbfff

08002ae8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	60b9      	str	r1, [r7, #8]
 8002af2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	221f      	movs	r2, #31
 8002af8:	4013      	ands	r3, r2
 8002afa:	2201      	movs	r2, #1
 8002afc:	409a      	lsls	r2, r3
 8002afe:	0013      	movs	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	43d2      	mvns	r2, r2
 8002b0a:	401a      	ands	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a1a      	ldr	r2, [r3, #32]
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	211f      	movs	r1, #31
 8002b18:	400b      	ands	r3, r1
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4099      	lsls	r1, r3
 8002b1e:	000b      	movs	r3, r1
 8002b20:	431a      	orrs	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	621a      	str	r2, [r3, #32]
}
 8002b26:	46c0      	nop			; (mov r8, r8)
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	b006      	add	sp, #24
 8002b2c:	bd80      	pop	{r7, pc}
	...

08002b30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
 8002b38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	223c      	movs	r2, #60	; 0x3c
 8002b3e:	5c9b      	ldrb	r3, [r3, r2]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d101      	bne.n	8002b48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b44:	2302      	movs	r3, #2
 8002b46:	e042      	b.n	8002bce <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	223c      	movs	r2, #60	; 0x3c
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	223d      	movs	r2, #61	; 0x3d
 8002b54:	2102      	movs	r1, #2
 8002b56:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2270      	movs	r2, #112	; 0x70
 8002b6c:	4393      	bics	r3, r2
 8002b6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68fa      	ldr	r2, [r7, #12]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a14      	ldr	r2, [pc, #80]	; (8002bd8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	05db      	lsls	r3, r3, #23
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d004      	beq.n	8002ba2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a0f      	ldr	r2, [pc, #60]	; (8002bdc <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d10c      	bne.n	8002bbc <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2280      	movs	r2, #128	; 0x80
 8002ba6:	4393      	bics	r3, r2
 8002ba8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	223d      	movs	r2, #61	; 0x3d
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	223c      	movs	r2, #60	; 0x3c
 8002bc8:	2100      	movs	r1, #0
 8002bca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	0018      	movs	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	b004      	add	sp, #16
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	46c0      	nop			; (mov r8, r8)
 8002bd8:	40012c00 	.word	0x40012c00
 8002bdc:	40000400 	.word	0x40000400

08002be0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	223c      	movs	r2, #60	; 0x3c
 8002bf2:	5c9b      	ldrb	r3, [r3, r2]
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d101      	bne.n	8002bfc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e03e      	b.n	8002c7a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	223c      	movs	r2, #60	; 0x3c
 8002c00:	2101      	movs	r1, #1
 8002c02:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	22ff      	movs	r2, #255	; 0xff
 8002c08:	4393      	bics	r3, r2
 8002c0a:	001a      	movs	r2, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	68db      	ldr	r3, [r3, #12]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4a1b      	ldr	r2, [pc, #108]	; (8002c84 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002c18:	401a      	ands	r2, r3
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	4a18      	ldr	r2, [pc, #96]	; (8002c88 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002c26:	401a      	ands	r2, r3
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	4a16      	ldr	r2, [pc, #88]	; (8002c8c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002c34:	401a      	ands	r2, r3
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4a13      	ldr	r2, [pc, #76]	; (8002c90 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002c42:	401a      	ands	r2, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4a11      	ldr	r2, [pc, #68]	; (8002c94 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002c50:	401a      	ands	r2, r3
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	4a0e      	ldr	r2, [pc, #56]	; (8002c98 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002c5e:	401a      	ands	r2, r3
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	223c      	movs	r2, #60	; 0x3c
 8002c74:	2100      	movs	r1, #0
 8002c76:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	0018      	movs	r0, r3
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	b004      	add	sp, #16
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	fffffcff 	.word	0xfffffcff
 8002c88:	fffffbff 	.word	0xfffffbff
 8002c8c:	fffff7ff 	.word	0xfffff7ff
 8002c90:	ffffefff 	.word	0xffffefff
 8002c94:	ffffdfff 	.word	0xffffdfff
 8002c98:	ffffbfff 	.word	0xffffbfff

08002c9c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ca4:	46c0      	nop			; (mov r8, r8)
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	b002      	add	sp, #8
 8002caa:	bd80      	pop	{r7, pc}

08002cac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cb4:	46c0      	nop			; (mov r8, r8)
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b002      	add	sp, #8
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d101      	bne.n	8002cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e044      	b.n	8002d58 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d107      	bne.n	8002ce6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2274      	movs	r2, #116	; 0x74
 8002cda:	2100      	movs	r1, #0
 8002cdc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f7fd ffaf 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2224      	movs	r2, #36	; 0x24
 8002cea:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	438a      	bics	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f000 f9ca 	bl	8003098 <UART_SetConfig>
 8002d04:	0003      	movs	r3, r0
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e024      	b.n	8002d58 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	0018      	movs	r0, r3
 8002d1a:	f000 fafd 	bl	8003318 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	490d      	ldr	r1, [pc, #52]	; (8002d60 <HAL_UART_Init+0xa4>)
 8002d2a:	400a      	ands	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	212a      	movs	r1, #42	; 0x2a
 8002d3a:	438a      	bics	r2, r1
 8002d3c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2101      	movs	r1, #1
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	0018      	movs	r0, r3
 8002d52:	f000 fb95 	bl	8003480 <UART_CheckIdleState>
 8002d56:	0003      	movs	r3, r0
}
 8002d58:	0018      	movs	r0, r3
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b002      	add	sp, #8
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	ffffb7ff 	.word	0xffffb7ff

08002d64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08a      	sub	sp, #40	; 0x28
 8002d68:	af02      	add	r7, sp, #8
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	603b      	str	r3, [r7, #0]
 8002d70:	1dbb      	adds	r3, r7, #6
 8002d72:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	d000      	beq.n	8002d7e <HAL_UART_Transmit+0x1a>
 8002d7c:	e096      	b.n	8002eac <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d003      	beq.n	8002d8c <HAL_UART_Transmit+0x28>
 8002d84:	1dbb      	adds	r3, r7, #6
 8002d86:	881b      	ldrh	r3, [r3, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e08e      	b.n	8002eae <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	2380      	movs	r3, #128	; 0x80
 8002d96:	015b      	lsls	r3, r3, #5
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d109      	bne.n	8002db0 <HAL_UART_Transmit+0x4c>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d105      	bne.n	8002db0 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	2201      	movs	r2, #1
 8002da8:	4013      	ands	r3, r2
 8002daa:	d001      	beq.n	8002db0 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e07e      	b.n	8002eae <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2274      	movs	r2, #116	; 0x74
 8002db4:	5c9b      	ldrb	r3, [r3, r2]
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d101      	bne.n	8002dbe <HAL_UART_Transmit+0x5a>
 8002dba:	2302      	movs	r3, #2
 8002dbc:	e077      	b.n	8002eae <HAL_UART_Transmit+0x14a>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2274      	movs	r2, #116	; 0x74
 8002dc2:	2101      	movs	r1, #1
 8002dc4:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2280      	movs	r2, #128	; 0x80
 8002dca:	2100      	movs	r1, #0
 8002dcc:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2221      	movs	r2, #33	; 0x21
 8002dd2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dd4:	f7fe f88c 	bl	8000ef0 <HAL_GetTick>
 8002dd8:	0003      	movs	r3, r0
 8002dda:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	1dba      	adds	r2, r7, #6
 8002de0:	2150      	movs	r1, #80	; 0x50
 8002de2:	8812      	ldrh	r2, [r2, #0]
 8002de4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	1dba      	adds	r2, r7, #6
 8002dea:	2152      	movs	r1, #82	; 0x52
 8002dec:	8812      	ldrh	r2, [r2, #0]
 8002dee:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	015b      	lsls	r3, r3, #5
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d108      	bne.n	8002e0e <HAL_UART_Transmit+0xaa>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	691b      	ldr	r3, [r3, #16]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d104      	bne.n	8002e0e <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8002e04:	2300      	movs	r3, #0
 8002e06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	61bb      	str	r3, [r7, #24]
 8002e0c:	e003      	b.n	8002e16 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2274      	movs	r2, #116	; 0x74
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8002e1e:	e02d      	b.n	8002e7c <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	68f8      	ldr	r0, [r7, #12]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	0013      	movs	r3, r2
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2180      	movs	r1, #128	; 0x80
 8002e2e:	f000 fb6f 	bl	8003510 <UART_WaitOnFlagUntilTimeout>
 8002e32:	1e03      	subs	r3, r0, #0
 8002e34:	d001      	beq.n	8002e3a <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e039      	b.n	8002eae <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10b      	bne.n	8002e58 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	881a      	ldrh	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	05d2      	lsls	r2, r2, #23
 8002e4a:	0dd2      	lsrs	r2, r2, #23
 8002e4c:	b292      	uxth	r2, r2
 8002e4e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	3302      	adds	r3, #2
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	e008      	b.n	8002e6a <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	781a      	ldrb	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	b292      	uxth	r2, r2
 8002e62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	3301      	adds	r3, #1
 8002e68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2252      	movs	r2, #82	; 0x52
 8002e6e:	5a9b      	ldrh	r3, [r3, r2]
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b299      	uxth	r1, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2252      	movs	r2, #82	; 0x52
 8002e7a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2252      	movs	r2, #82	; 0x52
 8002e80:	5a9b      	ldrh	r3, [r3, r2]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1cb      	bne.n	8002e20 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	0013      	movs	r3, r2
 8002e92:	2200      	movs	r2, #0
 8002e94:	2140      	movs	r1, #64	; 0x40
 8002e96:	f000 fb3b 	bl	8003510 <UART_WaitOnFlagUntilTimeout>
 8002e9a:	1e03      	subs	r3, r0, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e005      	b.n	8002eae <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2220      	movs	r2, #32
 8002ea6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e000      	b.n	8002eae <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002eac:	2302      	movs	r3, #2
  }
}
 8002eae:	0018      	movs	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b008      	add	sp, #32
 8002eb4:	bd80      	pop	{r7, pc}
	...

08002eb8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b08a      	sub	sp, #40	; 0x28
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	603b      	str	r3, [r7, #0]
 8002ec4:	1dbb      	adds	r3, r7, #6
 8002ec6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ecc:	2b20      	cmp	r3, #32
 8002ece:	d000      	beq.n	8002ed2 <HAL_UART_Receive+0x1a>
 8002ed0:	e0da      	b.n	8003088 <HAL_UART_Receive+0x1d0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_UART_Receive+0x28>
 8002ed8:	1dbb      	adds	r3, r7, #6
 8002eda:	881b      	ldrh	r3, [r3, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d101      	bne.n	8002ee4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e0d2      	b.n	800308a <HAL_UART_Receive+0x1d2>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	2380      	movs	r3, #128	; 0x80
 8002eea:	015b      	lsls	r3, r3, #5
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d109      	bne.n	8002f04 <HAL_UART_Receive+0x4c>
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d105      	bne.n	8002f04 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	2201      	movs	r2, #1
 8002efc:	4013      	ands	r3, r2
 8002efe:	d001      	beq.n	8002f04 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e0c2      	b.n	800308a <HAL_UART_Receive+0x1d2>
      }
    }

    __HAL_LOCK(huart);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2274      	movs	r2, #116	; 0x74
 8002f08:	5c9b      	ldrb	r3, [r3, r2]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_UART_Receive+0x5a>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e0bb      	b.n	800308a <HAL_UART_Receive+0x1d2>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2274      	movs	r2, #116	; 0x74
 8002f16:	2101      	movs	r1, #1
 8002f18:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2280      	movs	r2, #128	; 0x80
 8002f1e:	2100      	movs	r1, #0
 8002f20:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2222      	movs	r2, #34	; 0x22
 8002f26:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f2e:	f7fd ffdf 	bl	8000ef0 <HAL_GetTick>
 8002f32:	0003      	movs	r3, r0
 8002f34:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	1dba      	adds	r2, r7, #6
 8002f3a:	2158      	movs	r1, #88	; 0x58
 8002f3c:	8812      	ldrh	r2, [r2, #0]
 8002f3e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	1dba      	adds	r2, r7, #6
 8002f44:	215a      	movs	r1, #90	; 0x5a
 8002f46:	8812      	ldrh	r2, [r2, #0]
 8002f48:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	2380      	movs	r3, #128	; 0x80
 8002f50:	015b      	lsls	r3, r3, #5
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d10d      	bne.n	8002f72 <HAL_UART_Receive+0xba>
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d104      	bne.n	8002f68 <HAL_UART_Receive+0xb0>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	225c      	movs	r2, #92	; 0x5c
 8002f62:	494c      	ldr	r1, [pc, #304]	; (8003094 <HAL_UART_Receive+0x1dc>)
 8002f64:	5299      	strh	r1, [r3, r2]
 8002f66:	e02e      	b.n	8002fc6 <HAL_UART_Receive+0x10e>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	225c      	movs	r2, #92	; 0x5c
 8002f6c:	21ff      	movs	r1, #255	; 0xff
 8002f6e:	5299      	strh	r1, [r3, r2]
 8002f70:	e029      	b.n	8002fc6 <HAL_UART_Receive+0x10e>
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10d      	bne.n	8002f96 <HAL_UART_Receive+0xde>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d104      	bne.n	8002f8c <HAL_UART_Receive+0xd4>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	225c      	movs	r2, #92	; 0x5c
 8002f86:	21ff      	movs	r1, #255	; 0xff
 8002f88:	5299      	strh	r1, [r3, r2]
 8002f8a:	e01c      	b.n	8002fc6 <HAL_UART_Receive+0x10e>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	225c      	movs	r2, #92	; 0x5c
 8002f90:	217f      	movs	r1, #127	; 0x7f
 8002f92:	5299      	strh	r1, [r3, r2]
 8002f94:	e017      	b.n	8002fc6 <HAL_UART_Receive+0x10e>
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	2380      	movs	r3, #128	; 0x80
 8002f9c:	055b      	lsls	r3, r3, #21
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d10d      	bne.n	8002fbe <HAL_UART_Receive+0x106>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d104      	bne.n	8002fb4 <HAL_UART_Receive+0xfc>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	225c      	movs	r2, #92	; 0x5c
 8002fae:	217f      	movs	r1, #127	; 0x7f
 8002fb0:	5299      	strh	r1, [r3, r2]
 8002fb2:	e008      	b.n	8002fc6 <HAL_UART_Receive+0x10e>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	225c      	movs	r2, #92	; 0x5c
 8002fb8:	213f      	movs	r1, #63	; 0x3f
 8002fba:	5299      	strh	r1, [r3, r2]
 8002fbc:	e003      	b.n	8002fc6 <HAL_UART_Receive+0x10e>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	225c      	movs	r2, #92	; 0x5c
 8002fc2:	2100      	movs	r1, #0
 8002fc4:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002fc6:	2312      	movs	r3, #18
 8002fc8:	18fb      	adds	r3, r7, r3
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	215c      	movs	r1, #92	; 0x5c
 8002fce:	5a52      	ldrh	r2, [r2, r1]
 8002fd0:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	689a      	ldr	r2, [r3, #8]
 8002fd6:	2380      	movs	r3, #128	; 0x80
 8002fd8:	015b      	lsls	r3, r3, #5
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d108      	bne.n	8002ff0 <HAL_UART_Receive+0x138>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d104      	bne.n	8002ff0 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	e003      	b.n	8002ff8 <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2274      	movs	r2, #116	; 0x74
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003000:	e037      	b.n	8003072 <HAL_UART_Receive+0x1ba>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003002:	697a      	ldr	r2, [r7, #20]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	0013      	movs	r3, r2
 800300c:	2200      	movs	r2, #0
 800300e:	2120      	movs	r1, #32
 8003010:	f000 fa7e 	bl	8003510 <UART_WaitOnFlagUntilTimeout>
 8003014:	1e03      	subs	r3, r0, #0
 8003016:	d001      	beq.n	800301c <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e036      	b.n	800308a <HAL_UART_Receive+0x1d2>
      }
      if (pdata8bits == NULL)
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d10e      	bne.n	8003040 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003028:	b29b      	uxth	r3, r3
 800302a:	2212      	movs	r2, #18
 800302c:	18ba      	adds	r2, r7, r2
 800302e:	8812      	ldrh	r2, [r2, #0]
 8003030:	4013      	ands	r3, r2
 8003032:	b29a      	uxth	r2, r3
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	3302      	adds	r3, #2
 800303c:	61bb      	str	r3, [r7, #24]
 800303e:	e00f      	b.n	8003060 <HAL_UART_Receive+0x1a8>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003046:	b29b      	uxth	r3, r3
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2212      	movs	r2, #18
 800304c:	18ba      	adds	r2, r7, r2
 800304e:	8812      	ldrh	r2, [r2, #0]
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	4013      	ands	r3, r2
 8003054:	b2da      	uxtb	r2, r3
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	3301      	adds	r3, #1
 800305e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	225a      	movs	r2, #90	; 0x5a
 8003064:	5a9b      	ldrh	r3, [r3, r2]
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b299      	uxth	r1, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	225a      	movs	r2, #90	; 0x5a
 8003070:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	225a      	movs	r2, #90	; 0x5a
 8003076:	5a9b      	ldrh	r3, [r3, r2]
 8003078:	b29b      	uxth	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1c1      	bne.n	8003002 <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2220      	movs	r2, #32
 8003082:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003084:	2300      	movs	r3, #0
 8003086:	e000      	b.n	800308a <HAL_UART_Receive+0x1d2>
  }
  else
  {
    return HAL_BUSY;
 8003088:	2302      	movs	r3, #2
  }
}
 800308a:	0018      	movs	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	b008      	add	sp, #32
 8003090:	bd80      	pop	{r7, pc}
 8003092:	46c0      	nop			; (mov r8, r8)
 8003094:	000001ff 	.word	0x000001ff

08003098 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b088      	sub	sp, #32
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80030a0:	231e      	movs	r3, #30
 80030a2:	18fb      	adds	r3, r7, r3
 80030a4:	2200      	movs	r2, #0
 80030a6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689a      	ldr	r2, [r3, #8]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	431a      	orrs	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	4313      	orrs	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a8d      	ldr	r2, [pc, #564]	; (80032fc <UART_SetConfig+0x264>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	0019      	movs	r1, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	4a88      	ldr	r2, [pc, #544]	; (8003300 <UART_SetConfig+0x268>)
 80030de:	4013      	ands	r3, r2
 80030e0:	0019      	movs	r1, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	68da      	ldr	r2, [r3, #12]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4a7f      	ldr	r2, [pc, #508]	; (8003304 <UART_SetConfig+0x26c>)
 8003106:	4013      	ands	r3, r2
 8003108:	0019      	movs	r1, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	697a      	ldr	r2, [r7, #20]
 8003110:	430a      	orrs	r2, r1
 8003112:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a7b      	ldr	r2, [pc, #492]	; (8003308 <UART_SetConfig+0x270>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d127      	bne.n	800316e <UART_SetConfig+0xd6>
 800311e:	4b7b      	ldr	r3, [pc, #492]	; (800330c <UART_SetConfig+0x274>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003122:	2203      	movs	r2, #3
 8003124:	4013      	ands	r3, r2
 8003126:	2b03      	cmp	r3, #3
 8003128:	d00d      	beq.n	8003146 <UART_SetConfig+0xae>
 800312a:	d81b      	bhi.n	8003164 <UART_SetConfig+0xcc>
 800312c:	2b02      	cmp	r3, #2
 800312e:	d014      	beq.n	800315a <UART_SetConfig+0xc2>
 8003130:	d818      	bhi.n	8003164 <UART_SetConfig+0xcc>
 8003132:	2b00      	cmp	r3, #0
 8003134:	d002      	beq.n	800313c <UART_SetConfig+0xa4>
 8003136:	2b01      	cmp	r3, #1
 8003138:	d00a      	beq.n	8003150 <UART_SetConfig+0xb8>
 800313a:	e013      	b.n	8003164 <UART_SetConfig+0xcc>
 800313c:	231f      	movs	r3, #31
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	2200      	movs	r2, #0
 8003142:	701a      	strb	r2, [r3, #0]
 8003144:	e021      	b.n	800318a <UART_SetConfig+0xf2>
 8003146:	231f      	movs	r3, #31
 8003148:	18fb      	adds	r3, r7, r3
 800314a:	2202      	movs	r2, #2
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	e01c      	b.n	800318a <UART_SetConfig+0xf2>
 8003150:	231f      	movs	r3, #31
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	2204      	movs	r2, #4
 8003156:	701a      	strb	r2, [r3, #0]
 8003158:	e017      	b.n	800318a <UART_SetConfig+0xf2>
 800315a:	231f      	movs	r3, #31
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	2208      	movs	r2, #8
 8003160:	701a      	strb	r2, [r3, #0]
 8003162:	e012      	b.n	800318a <UART_SetConfig+0xf2>
 8003164:	231f      	movs	r3, #31
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	2210      	movs	r2, #16
 800316a:	701a      	strb	r2, [r3, #0]
 800316c:	e00d      	b.n	800318a <UART_SetConfig+0xf2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a67      	ldr	r2, [pc, #412]	; (8003310 <UART_SetConfig+0x278>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d104      	bne.n	8003182 <UART_SetConfig+0xea>
 8003178:	231f      	movs	r3, #31
 800317a:	18fb      	adds	r3, r7, r3
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
 8003180:	e003      	b.n	800318a <UART_SetConfig+0xf2>
 8003182:	231f      	movs	r3, #31
 8003184:	18fb      	adds	r3, r7, r3
 8003186:	2210      	movs	r2, #16
 8003188:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	69da      	ldr	r2, [r3, #28]
 800318e:	2380      	movs	r3, #128	; 0x80
 8003190:	021b      	lsls	r3, r3, #8
 8003192:	429a      	cmp	r2, r3
 8003194:	d15d      	bne.n	8003252 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003196:	231f      	movs	r3, #31
 8003198:	18fb      	adds	r3, r7, r3
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b08      	cmp	r3, #8
 800319e:	d015      	beq.n	80031cc <UART_SetConfig+0x134>
 80031a0:	dc18      	bgt.n	80031d4 <UART_SetConfig+0x13c>
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d00d      	beq.n	80031c2 <UART_SetConfig+0x12a>
 80031a6:	dc15      	bgt.n	80031d4 <UART_SetConfig+0x13c>
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <UART_SetConfig+0x11a>
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d005      	beq.n	80031bc <UART_SetConfig+0x124>
 80031b0:	e010      	b.n	80031d4 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b2:	f7fe fe19 	bl	8001de8 <HAL_RCC_GetPCLK1Freq>
 80031b6:	0003      	movs	r3, r0
 80031b8:	61bb      	str	r3, [r7, #24]
        break;
 80031ba:	e012      	b.n	80031e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031bc:	4b55      	ldr	r3, [pc, #340]	; (8003314 <UART_SetConfig+0x27c>)
 80031be:	61bb      	str	r3, [r7, #24]
        break;
 80031c0:	e00f      	b.n	80031e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031c2:	f7fe fd87 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 80031c6:	0003      	movs	r3, r0
 80031c8:	61bb      	str	r3, [r7, #24]
        break;
 80031ca:	e00a      	b.n	80031e2 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031cc:	2380      	movs	r3, #128	; 0x80
 80031ce:	021b      	lsls	r3, r3, #8
 80031d0:	61bb      	str	r3, [r7, #24]
        break;
 80031d2:	e006      	b.n	80031e2 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031d8:	231e      	movs	r3, #30
 80031da:	18fb      	adds	r3, r7, r3
 80031dc:	2201      	movs	r2, #1
 80031de:	701a      	strb	r2, [r3, #0]
        break;
 80031e0:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d100      	bne.n	80031ea <UART_SetConfig+0x152>
 80031e8:	e07b      	b.n	80032e2 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	005a      	lsls	r2, r3, #1
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	085b      	lsrs	r3, r3, #1
 80031f4:	18d2      	adds	r2, r2, r3
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	0019      	movs	r1, r3
 80031fc:	0010      	movs	r0, r2
 80031fe:	f7fc ff95 	bl	800012c <__udivsi3>
 8003202:	0003      	movs	r3, r0
 8003204:	b29b      	uxth	r3, r3
 8003206:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2b0f      	cmp	r3, #15
 800320c:	d91c      	bls.n	8003248 <UART_SetConfig+0x1b0>
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	2380      	movs	r3, #128	; 0x80
 8003212:	025b      	lsls	r3, r3, #9
 8003214:	429a      	cmp	r2, r3
 8003216:	d217      	bcs.n	8003248 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	b29a      	uxth	r2, r3
 800321c:	200e      	movs	r0, #14
 800321e:	183b      	adds	r3, r7, r0
 8003220:	210f      	movs	r1, #15
 8003222:	438a      	bics	r2, r1
 8003224:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	085b      	lsrs	r3, r3, #1
 800322a:	b29b      	uxth	r3, r3
 800322c:	2207      	movs	r2, #7
 800322e:	4013      	ands	r3, r2
 8003230:	b299      	uxth	r1, r3
 8003232:	183b      	adds	r3, r7, r0
 8003234:	183a      	adds	r2, r7, r0
 8003236:	8812      	ldrh	r2, [r2, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	183a      	adds	r2, r7, r0
 8003242:	8812      	ldrh	r2, [r2, #0]
 8003244:	60da      	str	r2, [r3, #12]
 8003246:	e04c      	b.n	80032e2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003248:	231e      	movs	r3, #30
 800324a:	18fb      	adds	r3, r7, r3
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
 8003250:	e047      	b.n	80032e2 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003252:	231f      	movs	r3, #31
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b08      	cmp	r3, #8
 800325a:	d015      	beq.n	8003288 <UART_SetConfig+0x1f0>
 800325c:	dc18      	bgt.n	8003290 <UART_SetConfig+0x1f8>
 800325e:	2b04      	cmp	r3, #4
 8003260:	d00d      	beq.n	800327e <UART_SetConfig+0x1e6>
 8003262:	dc15      	bgt.n	8003290 <UART_SetConfig+0x1f8>
 8003264:	2b00      	cmp	r3, #0
 8003266:	d002      	beq.n	800326e <UART_SetConfig+0x1d6>
 8003268:	2b02      	cmp	r3, #2
 800326a:	d005      	beq.n	8003278 <UART_SetConfig+0x1e0>
 800326c:	e010      	b.n	8003290 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800326e:	f7fe fdbb 	bl	8001de8 <HAL_RCC_GetPCLK1Freq>
 8003272:	0003      	movs	r3, r0
 8003274:	61bb      	str	r3, [r7, #24]
        break;
 8003276:	e012      	b.n	800329e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003278:	4b26      	ldr	r3, [pc, #152]	; (8003314 <UART_SetConfig+0x27c>)
 800327a:	61bb      	str	r3, [r7, #24]
        break;
 800327c:	e00f      	b.n	800329e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800327e:	f7fe fd29 	bl	8001cd4 <HAL_RCC_GetSysClockFreq>
 8003282:	0003      	movs	r3, r0
 8003284:	61bb      	str	r3, [r7, #24]
        break;
 8003286:	e00a      	b.n	800329e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003288:	2380      	movs	r3, #128	; 0x80
 800328a:	021b      	lsls	r3, r3, #8
 800328c:	61bb      	str	r3, [r7, #24]
        break;
 800328e:	e006      	b.n	800329e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003294:	231e      	movs	r3, #30
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	2201      	movs	r2, #1
 800329a:	701a      	strb	r2, [r3, #0]
        break;
 800329c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d01e      	beq.n	80032e2 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	085a      	lsrs	r2, r3, #1
 80032aa:	69bb      	ldr	r3, [r7, #24]
 80032ac:	18d2      	adds	r2, r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	0019      	movs	r1, r3
 80032b4:	0010      	movs	r0, r2
 80032b6:	f7fc ff39 	bl	800012c <__udivsi3>
 80032ba:	0003      	movs	r3, r0
 80032bc:	b29b      	uxth	r3, r3
 80032be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	2b0f      	cmp	r3, #15
 80032c4:	d909      	bls.n	80032da <UART_SetConfig+0x242>
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	025b      	lsls	r3, r3, #9
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d204      	bcs.n	80032da <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	693a      	ldr	r2, [r7, #16]
 80032d6:	60da      	str	r2, [r3, #12]
 80032d8:	e003      	b.n	80032e2 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80032da:	231e      	movs	r3, #30
 80032dc:	18fb      	adds	r3, r7, r3
 80032de:	2201      	movs	r2, #1
 80032e0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032ee:	231e      	movs	r3, #30
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	781b      	ldrb	r3, [r3, #0]
}
 80032f4:	0018      	movs	r0, r3
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b008      	add	sp, #32
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	efff69f3 	.word	0xefff69f3
 8003300:	ffffcfff 	.word	0xffffcfff
 8003304:	fffff4ff 	.word	0xfffff4ff
 8003308:	40013800 	.word	0x40013800
 800330c:	40021000 	.word	0x40021000
 8003310:	40004400 	.word	0x40004400
 8003314:	007a1200 	.word	0x007a1200

08003318 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003324:	2201      	movs	r2, #1
 8003326:	4013      	ands	r3, r2
 8003328:	d00b      	beq.n	8003342 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	4a4a      	ldr	r2, [pc, #296]	; (800345c <UART_AdvFeatureConfig+0x144>)
 8003332:	4013      	ands	r3, r2
 8003334:	0019      	movs	r1, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	2202      	movs	r2, #2
 8003348:	4013      	ands	r3, r2
 800334a:	d00b      	beq.n	8003364 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	4a43      	ldr	r2, [pc, #268]	; (8003460 <UART_AdvFeatureConfig+0x148>)
 8003354:	4013      	ands	r3, r2
 8003356:	0019      	movs	r1, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	430a      	orrs	r2, r1
 8003362:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	2204      	movs	r2, #4
 800336a:	4013      	ands	r3, r2
 800336c:	d00b      	beq.n	8003386 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	4a3b      	ldr	r2, [pc, #236]	; (8003464 <UART_AdvFeatureConfig+0x14c>)
 8003376:	4013      	ands	r3, r2
 8003378:	0019      	movs	r1, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	430a      	orrs	r2, r1
 8003384:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800338a:	2208      	movs	r2, #8
 800338c:	4013      	ands	r3, r2
 800338e:	d00b      	beq.n	80033a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	4a34      	ldr	r2, [pc, #208]	; (8003468 <UART_AdvFeatureConfig+0x150>)
 8003398:	4013      	ands	r3, r2
 800339a:	0019      	movs	r1, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	2210      	movs	r2, #16
 80033ae:	4013      	ands	r3, r2
 80033b0:	d00b      	beq.n	80033ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	4a2c      	ldr	r2, [pc, #176]	; (800346c <UART_AdvFeatureConfig+0x154>)
 80033ba:	4013      	ands	r3, r2
 80033bc:	0019      	movs	r1, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	2220      	movs	r2, #32
 80033d0:	4013      	ands	r3, r2
 80033d2:	d00b      	beq.n	80033ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	4a25      	ldr	r2, [pc, #148]	; (8003470 <UART_AdvFeatureConfig+0x158>)
 80033dc:	4013      	ands	r3, r2
 80033de:	0019      	movs	r1, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	430a      	orrs	r2, r1
 80033ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	2240      	movs	r2, #64	; 0x40
 80033f2:	4013      	ands	r3, r2
 80033f4:	d01d      	beq.n	8003432 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	4a1d      	ldr	r2, [pc, #116]	; (8003474 <UART_AdvFeatureConfig+0x15c>)
 80033fe:	4013      	ands	r3, r2
 8003400:	0019      	movs	r1, r3
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003412:	2380      	movs	r3, #128	; 0x80
 8003414:	035b      	lsls	r3, r3, #13
 8003416:	429a      	cmp	r2, r3
 8003418:	d10b      	bne.n	8003432 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	4a15      	ldr	r2, [pc, #84]	; (8003478 <UART_AdvFeatureConfig+0x160>)
 8003422:	4013      	ands	r3, r2
 8003424:	0019      	movs	r1, r3
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003436:	2280      	movs	r2, #128	; 0x80
 8003438:	4013      	ands	r3, r2
 800343a:	d00b      	beq.n	8003454 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	4a0e      	ldr	r2, [pc, #56]	; (800347c <UART_AdvFeatureConfig+0x164>)
 8003444:	4013      	ands	r3, r2
 8003446:	0019      	movs	r1, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	605a      	str	r2, [r3, #4]
  }
}
 8003454:	46c0      	nop			; (mov r8, r8)
 8003456:	46bd      	mov	sp, r7
 8003458:	b002      	add	sp, #8
 800345a:	bd80      	pop	{r7, pc}
 800345c:	fffdffff 	.word	0xfffdffff
 8003460:	fffeffff 	.word	0xfffeffff
 8003464:	fffbffff 	.word	0xfffbffff
 8003468:	ffff7fff 	.word	0xffff7fff
 800346c:	ffffefff 	.word	0xffffefff
 8003470:	ffffdfff 	.word	0xffffdfff
 8003474:	ffefffff 	.word	0xffefffff
 8003478:	ff9fffff 	.word	0xff9fffff
 800347c:	fff7ffff 	.word	0xfff7ffff

08003480 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af02      	add	r7, sp, #8
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2280      	movs	r2, #128	; 0x80
 800348c:	2100      	movs	r1, #0
 800348e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003490:	f7fd fd2e 	bl	8000ef0 <HAL_GetTick>
 8003494:	0003      	movs	r3, r0
 8003496:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2208      	movs	r2, #8
 80034a0:	4013      	ands	r3, r2
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d10c      	bne.n	80034c0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2280      	movs	r2, #128	; 0x80
 80034aa:	0391      	lsls	r1, r2, #14
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	4a17      	ldr	r2, [pc, #92]	; (800350c <UART_CheckIdleState+0x8c>)
 80034b0:	9200      	str	r2, [sp, #0]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f000 f82c 	bl	8003510 <UART_WaitOnFlagUntilTimeout>
 80034b8:	1e03      	subs	r3, r0, #0
 80034ba:	d001      	beq.n	80034c0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e021      	b.n	8003504 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2204      	movs	r2, #4
 80034c8:	4013      	ands	r3, r2
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d10c      	bne.n	80034e8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2280      	movs	r2, #128	; 0x80
 80034d2:	03d1      	lsls	r1, r2, #15
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4a0d      	ldr	r2, [pc, #52]	; (800350c <UART_CheckIdleState+0x8c>)
 80034d8:	9200      	str	r2, [sp, #0]
 80034da:	2200      	movs	r2, #0
 80034dc:	f000 f818 	bl	8003510 <UART_WaitOnFlagUntilTimeout>
 80034e0:	1e03      	subs	r3, r0, #0
 80034e2:	d001      	beq.n	80034e8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e00d      	b.n	8003504 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2220      	movs	r2, #32
 80034ec:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2220      	movs	r2, #32
 80034f2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2274      	movs	r2, #116	; 0x74
 80034fe:	2100      	movs	r1, #0
 8003500:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003502:	2300      	movs	r3, #0
}
 8003504:	0018      	movs	r0, r3
 8003506:	46bd      	mov	sp, r7
 8003508:	b004      	add	sp, #16
 800350a:	bd80      	pop	{r7, pc}
 800350c:	01ffffff 	.word	0x01ffffff

08003510 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	603b      	str	r3, [r7, #0]
 800351c:	1dfb      	adds	r3, r7, #7
 800351e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003520:	e05e      	b.n	80035e0 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	3301      	adds	r3, #1
 8003526:	d05b      	beq.n	80035e0 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003528:	f7fd fce2 	bl	8000ef0 <HAL_GetTick>
 800352c:	0002      	movs	r2, r0
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	69ba      	ldr	r2, [r7, #24]
 8003534:	429a      	cmp	r2, r3
 8003536:	d302      	bcc.n	800353e <UART_WaitOnFlagUntilTimeout+0x2e>
 8003538:	69bb      	ldr	r3, [r7, #24]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d11b      	bne.n	8003576 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	492f      	ldr	r1, [pc, #188]	; (8003608 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800354a:	400a      	ands	r2, r1
 800354c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2101      	movs	r1, #1
 800355a:	438a      	bics	r2, r1
 800355c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2220      	movs	r2, #32
 8003562:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2220      	movs	r2, #32
 8003568:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2274      	movs	r2, #116	; 0x74
 800356e:	2100      	movs	r1, #0
 8003570:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e044      	b.n	8003600 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	2204      	movs	r2, #4
 800357e:	4013      	ands	r3, r2
 8003580:	d02e      	beq.n	80035e0 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69da      	ldr	r2, [r3, #28]
 8003588:	2380      	movs	r3, #128	; 0x80
 800358a:	011b      	lsls	r3, r3, #4
 800358c:	401a      	ands	r2, r3
 800358e:	2380      	movs	r3, #128	; 0x80
 8003590:	011b      	lsls	r3, r3, #4
 8003592:	429a      	cmp	r2, r3
 8003594:	d124      	bne.n	80035e0 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2280      	movs	r2, #128	; 0x80
 800359c:	0112      	lsls	r2, r2, #4
 800359e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4917      	ldr	r1, [pc, #92]	; (8003608 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80035ac:	400a      	ands	r2, r1
 80035ae:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689a      	ldr	r2, [r3, #8]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2101      	movs	r1, #1
 80035bc:	438a      	bics	r2, r1
 80035be:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2280      	movs	r2, #128	; 0x80
 80035d0:	2120      	movs	r1, #32
 80035d2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2274      	movs	r2, #116	; 0x74
 80035d8:	2100      	movs	r1, #0
 80035da:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e00f      	b.n	8003600 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	4013      	ands	r3, r2
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	425a      	negs	r2, r3
 80035f0:	4153      	adcs	r3, r2
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	001a      	movs	r2, r3
 80035f6:	1dfb      	adds	r3, r7, #7
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d091      	beq.n	8003522 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	0018      	movs	r0, r3
 8003602:	46bd      	mov	sp, r7
 8003604:	b004      	add	sp, #16
 8003606:	bd80      	pop	{r7, pc}
 8003608:	fffffe5f 	.word	0xfffffe5f

0800360c <__errno>:
 800360c:	4b01      	ldr	r3, [pc, #4]	; (8003614 <__errno+0x8>)
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	4770      	bx	lr
 8003612:	46c0      	nop			; (mov r8, r8)
 8003614:	20000014 	.word	0x20000014

08003618 <__libc_init_array>:
 8003618:	b570      	push	{r4, r5, r6, lr}
 800361a:	2600      	movs	r6, #0
 800361c:	4d0c      	ldr	r5, [pc, #48]	; (8003650 <__libc_init_array+0x38>)
 800361e:	4c0d      	ldr	r4, [pc, #52]	; (8003654 <__libc_init_array+0x3c>)
 8003620:	1b64      	subs	r4, r4, r5
 8003622:	10a4      	asrs	r4, r4, #2
 8003624:	42a6      	cmp	r6, r4
 8003626:	d109      	bne.n	800363c <__libc_init_array+0x24>
 8003628:	2600      	movs	r6, #0
 800362a:	f000 fc47 	bl	8003ebc <_init>
 800362e:	4d0a      	ldr	r5, [pc, #40]	; (8003658 <__libc_init_array+0x40>)
 8003630:	4c0a      	ldr	r4, [pc, #40]	; (800365c <__libc_init_array+0x44>)
 8003632:	1b64      	subs	r4, r4, r5
 8003634:	10a4      	asrs	r4, r4, #2
 8003636:	42a6      	cmp	r6, r4
 8003638:	d105      	bne.n	8003646 <__libc_init_array+0x2e>
 800363a:	bd70      	pop	{r4, r5, r6, pc}
 800363c:	00b3      	lsls	r3, r6, #2
 800363e:	58eb      	ldr	r3, [r5, r3]
 8003640:	4798      	blx	r3
 8003642:	3601      	adds	r6, #1
 8003644:	e7ee      	b.n	8003624 <__libc_init_array+0xc>
 8003646:	00b3      	lsls	r3, r6, #2
 8003648:	58eb      	ldr	r3, [r5, r3]
 800364a:	4798      	blx	r3
 800364c:	3601      	adds	r6, #1
 800364e:	e7f2      	b.n	8003636 <__libc_init_array+0x1e>
 8003650:	08003f74 	.word	0x08003f74
 8003654:	08003f74 	.word	0x08003f74
 8003658:	08003f74 	.word	0x08003f74
 800365c:	08003f78 	.word	0x08003f78

08003660 <memset>:
 8003660:	0003      	movs	r3, r0
 8003662:	1882      	adds	r2, r0, r2
 8003664:	4293      	cmp	r3, r2
 8003666:	d100      	bne.n	800366a <memset+0xa>
 8003668:	4770      	bx	lr
 800366a:	7019      	strb	r1, [r3, #0]
 800366c:	3301      	adds	r3, #1
 800366e:	e7f9      	b.n	8003664 <memset+0x4>

08003670 <siprintf>:
 8003670:	b40e      	push	{r1, r2, r3}
 8003672:	b500      	push	{lr}
 8003674:	490b      	ldr	r1, [pc, #44]	; (80036a4 <siprintf+0x34>)
 8003676:	b09c      	sub	sp, #112	; 0x70
 8003678:	ab1d      	add	r3, sp, #116	; 0x74
 800367a:	9002      	str	r0, [sp, #8]
 800367c:	9006      	str	r0, [sp, #24]
 800367e:	9107      	str	r1, [sp, #28]
 8003680:	9104      	str	r1, [sp, #16]
 8003682:	4809      	ldr	r0, [pc, #36]	; (80036a8 <siprintf+0x38>)
 8003684:	4909      	ldr	r1, [pc, #36]	; (80036ac <siprintf+0x3c>)
 8003686:	cb04      	ldmia	r3!, {r2}
 8003688:	9105      	str	r1, [sp, #20]
 800368a:	6800      	ldr	r0, [r0, #0]
 800368c:	a902      	add	r1, sp, #8
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	f000 f870 	bl	8003774 <_svfiprintf_r>
 8003694:	2300      	movs	r3, #0
 8003696:	9a02      	ldr	r2, [sp, #8]
 8003698:	7013      	strb	r3, [r2, #0]
 800369a:	b01c      	add	sp, #112	; 0x70
 800369c:	bc08      	pop	{r3}
 800369e:	b003      	add	sp, #12
 80036a0:	4718      	bx	r3
 80036a2:	46c0      	nop			; (mov r8, r8)
 80036a4:	7fffffff 	.word	0x7fffffff
 80036a8:	20000014 	.word	0x20000014
 80036ac:	ffff0208 	.word	0xffff0208

080036b0 <__ssputs_r>:
 80036b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036b2:	688e      	ldr	r6, [r1, #8]
 80036b4:	b085      	sub	sp, #20
 80036b6:	0007      	movs	r7, r0
 80036b8:	000c      	movs	r4, r1
 80036ba:	9203      	str	r2, [sp, #12]
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	429e      	cmp	r6, r3
 80036c0:	d83c      	bhi.n	800373c <__ssputs_r+0x8c>
 80036c2:	2390      	movs	r3, #144	; 0x90
 80036c4:	898a      	ldrh	r2, [r1, #12]
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	421a      	tst	r2, r3
 80036ca:	d034      	beq.n	8003736 <__ssputs_r+0x86>
 80036cc:	2503      	movs	r5, #3
 80036ce:	6909      	ldr	r1, [r1, #16]
 80036d0:	6823      	ldr	r3, [r4, #0]
 80036d2:	1a5b      	subs	r3, r3, r1
 80036d4:	9302      	str	r3, [sp, #8]
 80036d6:	6963      	ldr	r3, [r4, #20]
 80036d8:	9802      	ldr	r0, [sp, #8]
 80036da:	435d      	muls	r5, r3
 80036dc:	0feb      	lsrs	r3, r5, #31
 80036de:	195d      	adds	r5, r3, r5
 80036e0:	9b01      	ldr	r3, [sp, #4]
 80036e2:	106d      	asrs	r5, r5, #1
 80036e4:	3301      	adds	r3, #1
 80036e6:	181b      	adds	r3, r3, r0
 80036e8:	42ab      	cmp	r3, r5
 80036ea:	d900      	bls.n	80036ee <__ssputs_r+0x3e>
 80036ec:	001d      	movs	r5, r3
 80036ee:	0553      	lsls	r3, r2, #21
 80036f0:	d532      	bpl.n	8003758 <__ssputs_r+0xa8>
 80036f2:	0029      	movs	r1, r5
 80036f4:	0038      	movs	r0, r7
 80036f6:	f000 fb31 	bl	8003d5c <_malloc_r>
 80036fa:	1e06      	subs	r6, r0, #0
 80036fc:	d109      	bne.n	8003712 <__ssputs_r+0x62>
 80036fe:	230c      	movs	r3, #12
 8003700:	603b      	str	r3, [r7, #0]
 8003702:	2340      	movs	r3, #64	; 0x40
 8003704:	2001      	movs	r0, #1
 8003706:	89a2      	ldrh	r2, [r4, #12]
 8003708:	4240      	negs	r0, r0
 800370a:	4313      	orrs	r3, r2
 800370c:	81a3      	strh	r3, [r4, #12]
 800370e:	b005      	add	sp, #20
 8003710:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003712:	9a02      	ldr	r2, [sp, #8]
 8003714:	6921      	ldr	r1, [r4, #16]
 8003716:	f000 faba 	bl	8003c8e <memcpy>
 800371a:	89a3      	ldrh	r3, [r4, #12]
 800371c:	4a14      	ldr	r2, [pc, #80]	; (8003770 <__ssputs_r+0xc0>)
 800371e:	401a      	ands	r2, r3
 8003720:	2380      	movs	r3, #128	; 0x80
 8003722:	4313      	orrs	r3, r2
 8003724:	81a3      	strh	r3, [r4, #12]
 8003726:	9b02      	ldr	r3, [sp, #8]
 8003728:	6126      	str	r6, [r4, #16]
 800372a:	18f6      	adds	r6, r6, r3
 800372c:	6026      	str	r6, [r4, #0]
 800372e:	6165      	str	r5, [r4, #20]
 8003730:	9e01      	ldr	r6, [sp, #4]
 8003732:	1aed      	subs	r5, r5, r3
 8003734:	60a5      	str	r5, [r4, #8]
 8003736:	9b01      	ldr	r3, [sp, #4]
 8003738:	429e      	cmp	r6, r3
 800373a:	d900      	bls.n	800373e <__ssputs_r+0x8e>
 800373c:	9e01      	ldr	r6, [sp, #4]
 800373e:	0032      	movs	r2, r6
 8003740:	9903      	ldr	r1, [sp, #12]
 8003742:	6820      	ldr	r0, [r4, #0]
 8003744:	f000 faac 	bl	8003ca0 <memmove>
 8003748:	68a3      	ldr	r3, [r4, #8]
 800374a:	2000      	movs	r0, #0
 800374c:	1b9b      	subs	r3, r3, r6
 800374e:	60a3      	str	r3, [r4, #8]
 8003750:	6823      	ldr	r3, [r4, #0]
 8003752:	199e      	adds	r6, r3, r6
 8003754:	6026      	str	r6, [r4, #0]
 8003756:	e7da      	b.n	800370e <__ssputs_r+0x5e>
 8003758:	002a      	movs	r2, r5
 800375a:	0038      	movs	r0, r7
 800375c:	f000 fb5c 	bl	8003e18 <_realloc_r>
 8003760:	1e06      	subs	r6, r0, #0
 8003762:	d1e0      	bne.n	8003726 <__ssputs_r+0x76>
 8003764:	0038      	movs	r0, r7
 8003766:	6921      	ldr	r1, [r4, #16]
 8003768:	f000 faae 	bl	8003cc8 <_free_r>
 800376c:	e7c7      	b.n	80036fe <__ssputs_r+0x4e>
 800376e:	46c0      	nop			; (mov r8, r8)
 8003770:	fffffb7f 	.word	0xfffffb7f

08003774 <_svfiprintf_r>:
 8003774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003776:	b0a1      	sub	sp, #132	; 0x84
 8003778:	9003      	str	r0, [sp, #12]
 800377a:	001d      	movs	r5, r3
 800377c:	898b      	ldrh	r3, [r1, #12]
 800377e:	000f      	movs	r7, r1
 8003780:	0016      	movs	r6, r2
 8003782:	061b      	lsls	r3, r3, #24
 8003784:	d511      	bpl.n	80037aa <_svfiprintf_r+0x36>
 8003786:	690b      	ldr	r3, [r1, #16]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10e      	bne.n	80037aa <_svfiprintf_r+0x36>
 800378c:	2140      	movs	r1, #64	; 0x40
 800378e:	f000 fae5 	bl	8003d5c <_malloc_r>
 8003792:	6038      	str	r0, [r7, #0]
 8003794:	6138      	str	r0, [r7, #16]
 8003796:	2800      	cmp	r0, #0
 8003798:	d105      	bne.n	80037a6 <_svfiprintf_r+0x32>
 800379a:	230c      	movs	r3, #12
 800379c:	9a03      	ldr	r2, [sp, #12]
 800379e:	3801      	subs	r0, #1
 80037a0:	6013      	str	r3, [r2, #0]
 80037a2:	b021      	add	sp, #132	; 0x84
 80037a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037a6:	2340      	movs	r3, #64	; 0x40
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	2300      	movs	r3, #0
 80037ac:	ac08      	add	r4, sp, #32
 80037ae:	6163      	str	r3, [r4, #20]
 80037b0:	3320      	adds	r3, #32
 80037b2:	7663      	strb	r3, [r4, #25]
 80037b4:	3310      	adds	r3, #16
 80037b6:	76a3      	strb	r3, [r4, #26]
 80037b8:	9507      	str	r5, [sp, #28]
 80037ba:	0035      	movs	r5, r6
 80037bc:	782b      	ldrb	r3, [r5, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <_svfiprintf_r+0x52>
 80037c2:	2b25      	cmp	r3, #37	; 0x25
 80037c4:	d147      	bne.n	8003856 <_svfiprintf_r+0xe2>
 80037c6:	1bab      	subs	r3, r5, r6
 80037c8:	9305      	str	r3, [sp, #20]
 80037ca:	42b5      	cmp	r5, r6
 80037cc:	d00c      	beq.n	80037e8 <_svfiprintf_r+0x74>
 80037ce:	0032      	movs	r2, r6
 80037d0:	0039      	movs	r1, r7
 80037d2:	9803      	ldr	r0, [sp, #12]
 80037d4:	f7ff ff6c 	bl	80036b0 <__ssputs_r>
 80037d8:	1c43      	adds	r3, r0, #1
 80037da:	d100      	bne.n	80037de <_svfiprintf_r+0x6a>
 80037dc:	e0ae      	b.n	800393c <_svfiprintf_r+0x1c8>
 80037de:	6962      	ldr	r2, [r4, #20]
 80037e0:	9b05      	ldr	r3, [sp, #20]
 80037e2:	4694      	mov	ip, r2
 80037e4:	4463      	add	r3, ip
 80037e6:	6163      	str	r3, [r4, #20]
 80037e8:	782b      	ldrb	r3, [r5, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d100      	bne.n	80037f0 <_svfiprintf_r+0x7c>
 80037ee:	e0a5      	b.n	800393c <_svfiprintf_r+0x1c8>
 80037f0:	2201      	movs	r2, #1
 80037f2:	2300      	movs	r3, #0
 80037f4:	4252      	negs	r2, r2
 80037f6:	6062      	str	r2, [r4, #4]
 80037f8:	a904      	add	r1, sp, #16
 80037fa:	3254      	adds	r2, #84	; 0x54
 80037fc:	1852      	adds	r2, r2, r1
 80037fe:	1c6e      	adds	r6, r5, #1
 8003800:	6023      	str	r3, [r4, #0]
 8003802:	60e3      	str	r3, [r4, #12]
 8003804:	60a3      	str	r3, [r4, #8]
 8003806:	7013      	strb	r3, [r2, #0]
 8003808:	65a3      	str	r3, [r4, #88]	; 0x58
 800380a:	2205      	movs	r2, #5
 800380c:	7831      	ldrb	r1, [r6, #0]
 800380e:	4854      	ldr	r0, [pc, #336]	; (8003960 <_svfiprintf_r+0x1ec>)
 8003810:	f000 fa32 	bl	8003c78 <memchr>
 8003814:	1c75      	adds	r5, r6, #1
 8003816:	2800      	cmp	r0, #0
 8003818:	d11f      	bne.n	800385a <_svfiprintf_r+0xe6>
 800381a:	6822      	ldr	r2, [r4, #0]
 800381c:	06d3      	lsls	r3, r2, #27
 800381e:	d504      	bpl.n	800382a <_svfiprintf_r+0xb6>
 8003820:	2353      	movs	r3, #83	; 0x53
 8003822:	a904      	add	r1, sp, #16
 8003824:	185b      	adds	r3, r3, r1
 8003826:	2120      	movs	r1, #32
 8003828:	7019      	strb	r1, [r3, #0]
 800382a:	0713      	lsls	r3, r2, #28
 800382c:	d504      	bpl.n	8003838 <_svfiprintf_r+0xc4>
 800382e:	2353      	movs	r3, #83	; 0x53
 8003830:	a904      	add	r1, sp, #16
 8003832:	185b      	adds	r3, r3, r1
 8003834:	212b      	movs	r1, #43	; 0x2b
 8003836:	7019      	strb	r1, [r3, #0]
 8003838:	7833      	ldrb	r3, [r6, #0]
 800383a:	2b2a      	cmp	r3, #42	; 0x2a
 800383c:	d016      	beq.n	800386c <_svfiprintf_r+0xf8>
 800383e:	0035      	movs	r5, r6
 8003840:	2100      	movs	r1, #0
 8003842:	200a      	movs	r0, #10
 8003844:	68e3      	ldr	r3, [r4, #12]
 8003846:	782a      	ldrb	r2, [r5, #0]
 8003848:	1c6e      	adds	r6, r5, #1
 800384a:	3a30      	subs	r2, #48	; 0x30
 800384c:	2a09      	cmp	r2, #9
 800384e:	d94e      	bls.n	80038ee <_svfiprintf_r+0x17a>
 8003850:	2900      	cmp	r1, #0
 8003852:	d111      	bne.n	8003878 <_svfiprintf_r+0x104>
 8003854:	e017      	b.n	8003886 <_svfiprintf_r+0x112>
 8003856:	3501      	adds	r5, #1
 8003858:	e7b0      	b.n	80037bc <_svfiprintf_r+0x48>
 800385a:	4b41      	ldr	r3, [pc, #260]	; (8003960 <_svfiprintf_r+0x1ec>)
 800385c:	6822      	ldr	r2, [r4, #0]
 800385e:	1ac0      	subs	r0, r0, r3
 8003860:	2301      	movs	r3, #1
 8003862:	4083      	lsls	r3, r0
 8003864:	4313      	orrs	r3, r2
 8003866:	002e      	movs	r6, r5
 8003868:	6023      	str	r3, [r4, #0]
 800386a:	e7ce      	b.n	800380a <_svfiprintf_r+0x96>
 800386c:	9b07      	ldr	r3, [sp, #28]
 800386e:	1d19      	adds	r1, r3, #4
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	9107      	str	r1, [sp, #28]
 8003874:	2b00      	cmp	r3, #0
 8003876:	db01      	blt.n	800387c <_svfiprintf_r+0x108>
 8003878:	930b      	str	r3, [sp, #44]	; 0x2c
 800387a:	e004      	b.n	8003886 <_svfiprintf_r+0x112>
 800387c:	425b      	negs	r3, r3
 800387e:	60e3      	str	r3, [r4, #12]
 8003880:	2302      	movs	r3, #2
 8003882:	4313      	orrs	r3, r2
 8003884:	6023      	str	r3, [r4, #0]
 8003886:	782b      	ldrb	r3, [r5, #0]
 8003888:	2b2e      	cmp	r3, #46	; 0x2e
 800388a:	d10a      	bne.n	80038a2 <_svfiprintf_r+0x12e>
 800388c:	786b      	ldrb	r3, [r5, #1]
 800388e:	2b2a      	cmp	r3, #42	; 0x2a
 8003890:	d135      	bne.n	80038fe <_svfiprintf_r+0x18a>
 8003892:	9b07      	ldr	r3, [sp, #28]
 8003894:	3502      	adds	r5, #2
 8003896:	1d1a      	adds	r2, r3, #4
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	9207      	str	r2, [sp, #28]
 800389c:	2b00      	cmp	r3, #0
 800389e:	db2b      	blt.n	80038f8 <_svfiprintf_r+0x184>
 80038a0:	9309      	str	r3, [sp, #36]	; 0x24
 80038a2:	4e30      	ldr	r6, [pc, #192]	; (8003964 <_svfiprintf_r+0x1f0>)
 80038a4:	2203      	movs	r2, #3
 80038a6:	0030      	movs	r0, r6
 80038a8:	7829      	ldrb	r1, [r5, #0]
 80038aa:	f000 f9e5 	bl	8003c78 <memchr>
 80038ae:	2800      	cmp	r0, #0
 80038b0:	d006      	beq.n	80038c0 <_svfiprintf_r+0x14c>
 80038b2:	2340      	movs	r3, #64	; 0x40
 80038b4:	1b80      	subs	r0, r0, r6
 80038b6:	4083      	lsls	r3, r0
 80038b8:	6822      	ldr	r2, [r4, #0]
 80038ba:	3501      	adds	r5, #1
 80038bc:	4313      	orrs	r3, r2
 80038be:	6023      	str	r3, [r4, #0]
 80038c0:	7829      	ldrb	r1, [r5, #0]
 80038c2:	2206      	movs	r2, #6
 80038c4:	4828      	ldr	r0, [pc, #160]	; (8003968 <_svfiprintf_r+0x1f4>)
 80038c6:	1c6e      	adds	r6, r5, #1
 80038c8:	7621      	strb	r1, [r4, #24]
 80038ca:	f000 f9d5 	bl	8003c78 <memchr>
 80038ce:	2800      	cmp	r0, #0
 80038d0:	d03c      	beq.n	800394c <_svfiprintf_r+0x1d8>
 80038d2:	4b26      	ldr	r3, [pc, #152]	; (800396c <_svfiprintf_r+0x1f8>)
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d125      	bne.n	8003924 <_svfiprintf_r+0x1b0>
 80038d8:	2207      	movs	r2, #7
 80038da:	9b07      	ldr	r3, [sp, #28]
 80038dc:	3307      	adds	r3, #7
 80038de:	4393      	bics	r3, r2
 80038e0:	3308      	adds	r3, #8
 80038e2:	9307      	str	r3, [sp, #28]
 80038e4:	6963      	ldr	r3, [r4, #20]
 80038e6:	9a04      	ldr	r2, [sp, #16]
 80038e8:	189b      	adds	r3, r3, r2
 80038ea:	6163      	str	r3, [r4, #20]
 80038ec:	e765      	b.n	80037ba <_svfiprintf_r+0x46>
 80038ee:	4343      	muls	r3, r0
 80038f0:	0035      	movs	r5, r6
 80038f2:	2101      	movs	r1, #1
 80038f4:	189b      	adds	r3, r3, r2
 80038f6:	e7a6      	b.n	8003846 <_svfiprintf_r+0xd2>
 80038f8:	2301      	movs	r3, #1
 80038fa:	425b      	negs	r3, r3
 80038fc:	e7d0      	b.n	80038a0 <_svfiprintf_r+0x12c>
 80038fe:	2300      	movs	r3, #0
 8003900:	200a      	movs	r0, #10
 8003902:	001a      	movs	r2, r3
 8003904:	3501      	adds	r5, #1
 8003906:	6063      	str	r3, [r4, #4]
 8003908:	7829      	ldrb	r1, [r5, #0]
 800390a:	1c6e      	adds	r6, r5, #1
 800390c:	3930      	subs	r1, #48	; 0x30
 800390e:	2909      	cmp	r1, #9
 8003910:	d903      	bls.n	800391a <_svfiprintf_r+0x1a6>
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0c5      	beq.n	80038a2 <_svfiprintf_r+0x12e>
 8003916:	9209      	str	r2, [sp, #36]	; 0x24
 8003918:	e7c3      	b.n	80038a2 <_svfiprintf_r+0x12e>
 800391a:	4342      	muls	r2, r0
 800391c:	0035      	movs	r5, r6
 800391e:	2301      	movs	r3, #1
 8003920:	1852      	adds	r2, r2, r1
 8003922:	e7f1      	b.n	8003908 <_svfiprintf_r+0x194>
 8003924:	ab07      	add	r3, sp, #28
 8003926:	9300      	str	r3, [sp, #0]
 8003928:	003a      	movs	r2, r7
 800392a:	0021      	movs	r1, r4
 800392c:	4b10      	ldr	r3, [pc, #64]	; (8003970 <_svfiprintf_r+0x1fc>)
 800392e:	9803      	ldr	r0, [sp, #12]
 8003930:	e000      	b.n	8003934 <_svfiprintf_r+0x1c0>
 8003932:	bf00      	nop
 8003934:	9004      	str	r0, [sp, #16]
 8003936:	9b04      	ldr	r3, [sp, #16]
 8003938:	3301      	adds	r3, #1
 800393a:	d1d3      	bne.n	80038e4 <_svfiprintf_r+0x170>
 800393c:	89bb      	ldrh	r3, [r7, #12]
 800393e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8003940:	065b      	lsls	r3, r3, #25
 8003942:	d400      	bmi.n	8003946 <_svfiprintf_r+0x1d2>
 8003944:	e72d      	b.n	80037a2 <_svfiprintf_r+0x2e>
 8003946:	2001      	movs	r0, #1
 8003948:	4240      	negs	r0, r0
 800394a:	e72a      	b.n	80037a2 <_svfiprintf_r+0x2e>
 800394c:	ab07      	add	r3, sp, #28
 800394e:	9300      	str	r3, [sp, #0]
 8003950:	003a      	movs	r2, r7
 8003952:	0021      	movs	r1, r4
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <_svfiprintf_r+0x1fc>)
 8003956:	9803      	ldr	r0, [sp, #12]
 8003958:	f000 f87c 	bl	8003a54 <_printf_i>
 800395c:	e7ea      	b.n	8003934 <_svfiprintf_r+0x1c0>
 800395e:	46c0      	nop			; (mov r8, r8)
 8003960:	08003f40 	.word	0x08003f40
 8003964:	08003f46 	.word	0x08003f46
 8003968:	08003f4a 	.word	0x08003f4a
 800396c:	00000000 	.word	0x00000000
 8003970:	080036b1 	.word	0x080036b1

08003974 <_printf_common>:
 8003974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003976:	0015      	movs	r5, r2
 8003978:	9301      	str	r3, [sp, #4]
 800397a:	688a      	ldr	r2, [r1, #8]
 800397c:	690b      	ldr	r3, [r1, #16]
 800397e:	000c      	movs	r4, r1
 8003980:	9000      	str	r0, [sp, #0]
 8003982:	4293      	cmp	r3, r2
 8003984:	da00      	bge.n	8003988 <_printf_common+0x14>
 8003986:	0013      	movs	r3, r2
 8003988:	0022      	movs	r2, r4
 800398a:	602b      	str	r3, [r5, #0]
 800398c:	3243      	adds	r2, #67	; 0x43
 800398e:	7812      	ldrb	r2, [r2, #0]
 8003990:	2a00      	cmp	r2, #0
 8003992:	d001      	beq.n	8003998 <_printf_common+0x24>
 8003994:	3301      	adds	r3, #1
 8003996:	602b      	str	r3, [r5, #0]
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	069b      	lsls	r3, r3, #26
 800399c:	d502      	bpl.n	80039a4 <_printf_common+0x30>
 800399e:	682b      	ldr	r3, [r5, #0]
 80039a0:	3302      	adds	r3, #2
 80039a2:	602b      	str	r3, [r5, #0]
 80039a4:	6822      	ldr	r2, [r4, #0]
 80039a6:	2306      	movs	r3, #6
 80039a8:	0017      	movs	r7, r2
 80039aa:	401f      	ands	r7, r3
 80039ac:	421a      	tst	r2, r3
 80039ae:	d027      	beq.n	8003a00 <_printf_common+0x8c>
 80039b0:	0023      	movs	r3, r4
 80039b2:	3343      	adds	r3, #67	; 0x43
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	1e5a      	subs	r2, r3, #1
 80039b8:	4193      	sbcs	r3, r2
 80039ba:	6822      	ldr	r2, [r4, #0]
 80039bc:	0692      	lsls	r2, r2, #26
 80039be:	d430      	bmi.n	8003a22 <_printf_common+0xae>
 80039c0:	0022      	movs	r2, r4
 80039c2:	9901      	ldr	r1, [sp, #4]
 80039c4:	9800      	ldr	r0, [sp, #0]
 80039c6:	9e08      	ldr	r6, [sp, #32]
 80039c8:	3243      	adds	r2, #67	; 0x43
 80039ca:	47b0      	blx	r6
 80039cc:	1c43      	adds	r3, r0, #1
 80039ce:	d025      	beq.n	8003a1c <_printf_common+0xa8>
 80039d0:	2306      	movs	r3, #6
 80039d2:	6820      	ldr	r0, [r4, #0]
 80039d4:	682a      	ldr	r2, [r5, #0]
 80039d6:	68e1      	ldr	r1, [r4, #12]
 80039d8:	2500      	movs	r5, #0
 80039da:	4003      	ands	r3, r0
 80039dc:	2b04      	cmp	r3, #4
 80039de:	d103      	bne.n	80039e8 <_printf_common+0x74>
 80039e0:	1a8d      	subs	r5, r1, r2
 80039e2:	43eb      	mvns	r3, r5
 80039e4:	17db      	asrs	r3, r3, #31
 80039e6:	401d      	ands	r5, r3
 80039e8:	68a3      	ldr	r3, [r4, #8]
 80039ea:	6922      	ldr	r2, [r4, #16]
 80039ec:	4293      	cmp	r3, r2
 80039ee:	dd01      	ble.n	80039f4 <_printf_common+0x80>
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	18ed      	adds	r5, r5, r3
 80039f4:	2700      	movs	r7, #0
 80039f6:	42bd      	cmp	r5, r7
 80039f8:	d120      	bne.n	8003a3c <_printf_common+0xc8>
 80039fa:	2000      	movs	r0, #0
 80039fc:	e010      	b.n	8003a20 <_printf_common+0xac>
 80039fe:	3701      	adds	r7, #1
 8003a00:	68e3      	ldr	r3, [r4, #12]
 8003a02:	682a      	ldr	r2, [r5, #0]
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	42bb      	cmp	r3, r7
 8003a08:	ddd2      	ble.n	80039b0 <_printf_common+0x3c>
 8003a0a:	0022      	movs	r2, r4
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	9901      	ldr	r1, [sp, #4]
 8003a10:	9800      	ldr	r0, [sp, #0]
 8003a12:	9e08      	ldr	r6, [sp, #32]
 8003a14:	3219      	adds	r2, #25
 8003a16:	47b0      	blx	r6
 8003a18:	1c43      	adds	r3, r0, #1
 8003a1a:	d1f0      	bne.n	80039fe <_printf_common+0x8a>
 8003a1c:	2001      	movs	r0, #1
 8003a1e:	4240      	negs	r0, r0
 8003a20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a22:	2030      	movs	r0, #48	; 0x30
 8003a24:	18e1      	adds	r1, r4, r3
 8003a26:	3143      	adds	r1, #67	; 0x43
 8003a28:	7008      	strb	r0, [r1, #0]
 8003a2a:	0021      	movs	r1, r4
 8003a2c:	1c5a      	adds	r2, r3, #1
 8003a2e:	3145      	adds	r1, #69	; 0x45
 8003a30:	7809      	ldrb	r1, [r1, #0]
 8003a32:	18a2      	adds	r2, r4, r2
 8003a34:	3243      	adds	r2, #67	; 0x43
 8003a36:	3302      	adds	r3, #2
 8003a38:	7011      	strb	r1, [r2, #0]
 8003a3a:	e7c1      	b.n	80039c0 <_printf_common+0x4c>
 8003a3c:	0022      	movs	r2, r4
 8003a3e:	2301      	movs	r3, #1
 8003a40:	9901      	ldr	r1, [sp, #4]
 8003a42:	9800      	ldr	r0, [sp, #0]
 8003a44:	9e08      	ldr	r6, [sp, #32]
 8003a46:	321a      	adds	r2, #26
 8003a48:	47b0      	blx	r6
 8003a4a:	1c43      	adds	r3, r0, #1
 8003a4c:	d0e6      	beq.n	8003a1c <_printf_common+0xa8>
 8003a4e:	3701      	adds	r7, #1
 8003a50:	e7d1      	b.n	80039f6 <_printf_common+0x82>
	...

08003a54 <_printf_i>:
 8003a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a56:	b08b      	sub	sp, #44	; 0x2c
 8003a58:	9206      	str	r2, [sp, #24]
 8003a5a:	000a      	movs	r2, r1
 8003a5c:	3243      	adds	r2, #67	; 0x43
 8003a5e:	9307      	str	r3, [sp, #28]
 8003a60:	9005      	str	r0, [sp, #20]
 8003a62:	9204      	str	r2, [sp, #16]
 8003a64:	7e0a      	ldrb	r2, [r1, #24]
 8003a66:	000c      	movs	r4, r1
 8003a68:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003a6a:	2a78      	cmp	r2, #120	; 0x78
 8003a6c:	d806      	bhi.n	8003a7c <_printf_i+0x28>
 8003a6e:	2a62      	cmp	r2, #98	; 0x62
 8003a70:	d808      	bhi.n	8003a84 <_printf_i+0x30>
 8003a72:	2a00      	cmp	r2, #0
 8003a74:	d100      	bne.n	8003a78 <_printf_i+0x24>
 8003a76:	e0c0      	b.n	8003bfa <_printf_i+0x1a6>
 8003a78:	2a58      	cmp	r2, #88	; 0x58
 8003a7a:	d052      	beq.n	8003b22 <_printf_i+0xce>
 8003a7c:	0026      	movs	r6, r4
 8003a7e:	3642      	adds	r6, #66	; 0x42
 8003a80:	7032      	strb	r2, [r6, #0]
 8003a82:	e022      	b.n	8003aca <_printf_i+0x76>
 8003a84:	0010      	movs	r0, r2
 8003a86:	3863      	subs	r0, #99	; 0x63
 8003a88:	2815      	cmp	r0, #21
 8003a8a:	d8f7      	bhi.n	8003a7c <_printf_i+0x28>
 8003a8c:	f7fc fb44 	bl	8000118 <__gnu_thumb1_case_shi>
 8003a90:	001f0016 	.word	0x001f0016
 8003a94:	fff6fff6 	.word	0xfff6fff6
 8003a98:	fff6fff6 	.word	0xfff6fff6
 8003a9c:	fff6001f 	.word	0xfff6001f
 8003aa0:	fff6fff6 	.word	0xfff6fff6
 8003aa4:	00a8fff6 	.word	0x00a8fff6
 8003aa8:	009a0036 	.word	0x009a0036
 8003aac:	fff6fff6 	.word	0xfff6fff6
 8003ab0:	fff600b9 	.word	0xfff600b9
 8003ab4:	fff60036 	.word	0xfff60036
 8003ab8:	009efff6 	.word	0x009efff6
 8003abc:	0026      	movs	r6, r4
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	3642      	adds	r6, #66	; 0x42
 8003ac2:	1d11      	adds	r1, r2, #4
 8003ac4:	6019      	str	r1, [r3, #0]
 8003ac6:	6813      	ldr	r3, [r2, #0]
 8003ac8:	7033      	strb	r3, [r6, #0]
 8003aca:	2301      	movs	r3, #1
 8003acc:	e0a7      	b.n	8003c1e <_printf_i+0x1ca>
 8003ace:	6808      	ldr	r0, [r1, #0]
 8003ad0:	6819      	ldr	r1, [r3, #0]
 8003ad2:	1d0a      	adds	r2, r1, #4
 8003ad4:	0605      	lsls	r5, r0, #24
 8003ad6:	d50b      	bpl.n	8003af0 <_printf_i+0x9c>
 8003ad8:	680d      	ldr	r5, [r1, #0]
 8003ada:	601a      	str	r2, [r3, #0]
 8003adc:	2d00      	cmp	r5, #0
 8003ade:	da03      	bge.n	8003ae8 <_printf_i+0x94>
 8003ae0:	232d      	movs	r3, #45	; 0x2d
 8003ae2:	9a04      	ldr	r2, [sp, #16]
 8003ae4:	426d      	negs	r5, r5
 8003ae6:	7013      	strb	r3, [r2, #0]
 8003ae8:	4b61      	ldr	r3, [pc, #388]	; (8003c70 <_printf_i+0x21c>)
 8003aea:	270a      	movs	r7, #10
 8003aec:	9303      	str	r3, [sp, #12]
 8003aee:	e032      	b.n	8003b56 <_printf_i+0x102>
 8003af0:	680d      	ldr	r5, [r1, #0]
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	0641      	lsls	r1, r0, #25
 8003af6:	d5f1      	bpl.n	8003adc <_printf_i+0x88>
 8003af8:	b22d      	sxth	r5, r5
 8003afa:	e7ef      	b.n	8003adc <_printf_i+0x88>
 8003afc:	680d      	ldr	r5, [r1, #0]
 8003afe:	6819      	ldr	r1, [r3, #0]
 8003b00:	1d08      	adds	r0, r1, #4
 8003b02:	6018      	str	r0, [r3, #0]
 8003b04:	062e      	lsls	r6, r5, #24
 8003b06:	d501      	bpl.n	8003b0c <_printf_i+0xb8>
 8003b08:	680d      	ldr	r5, [r1, #0]
 8003b0a:	e003      	b.n	8003b14 <_printf_i+0xc0>
 8003b0c:	066d      	lsls	r5, r5, #25
 8003b0e:	d5fb      	bpl.n	8003b08 <_printf_i+0xb4>
 8003b10:	680d      	ldr	r5, [r1, #0]
 8003b12:	b2ad      	uxth	r5, r5
 8003b14:	4b56      	ldr	r3, [pc, #344]	; (8003c70 <_printf_i+0x21c>)
 8003b16:	270a      	movs	r7, #10
 8003b18:	9303      	str	r3, [sp, #12]
 8003b1a:	2a6f      	cmp	r2, #111	; 0x6f
 8003b1c:	d117      	bne.n	8003b4e <_printf_i+0xfa>
 8003b1e:	2708      	movs	r7, #8
 8003b20:	e015      	b.n	8003b4e <_printf_i+0xfa>
 8003b22:	3145      	adds	r1, #69	; 0x45
 8003b24:	700a      	strb	r2, [r1, #0]
 8003b26:	4a52      	ldr	r2, [pc, #328]	; (8003c70 <_printf_i+0x21c>)
 8003b28:	9203      	str	r2, [sp, #12]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	6821      	ldr	r1, [r4, #0]
 8003b2e:	ca20      	ldmia	r2!, {r5}
 8003b30:	601a      	str	r2, [r3, #0]
 8003b32:	0608      	lsls	r0, r1, #24
 8003b34:	d550      	bpl.n	8003bd8 <_printf_i+0x184>
 8003b36:	07cb      	lsls	r3, r1, #31
 8003b38:	d502      	bpl.n	8003b40 <_printf_i+0xec>
 8003b3a:	2320      	movs	r3, #32
 8003b3c:	4319      	orrs	r1, r3
 8003b3e:	6021      	str	r1, [r4, #0]
 8003b40:	2710      	movs	r7, #16
 8003b42:	2d00      	cmp	r5, #0
 8003b44:	d103      	bne.n	8003b4e <_printf_i+0xfa>
 8003b46:	2320      	movs	r3, #32
 8003b48:	6822      	ldr	r2, [r4, #0]
 8003b4a:	439a      	bics	r2, r3
 8003b4c:	6022      	str	r2, [r4, #0]
 8003b4e:	0023      	movs	r3, r4
 8003b50:	2200      	movs	r2, #0
 8003b52:	3343      	adds	r3, #67	; 0x43
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	6863      	ldr	r3, [r4, #4]
 8003b58:	60a3      	str	r3, [r4, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	db03      	blt.n	8003b66 <_printf_i+0x112>
 8003b5e:	2204      	movs	r2, #4
 8003b60:	6821      	ldr	r1, [r4, #0]
 8003b62:	4391      	bics	r1, r2
 8003b64:	6021      	str	r1, [r4, #0]
 8003b66:	2d00      	cmp	r5, #0
 8003b68:	d102      	bne.n	8003b70 <_printf_i+0x11c>
 8003b6a:	9e04      	ldr	r6, [sp, #16]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00c      	beq.n	8003b8a <_printf_i+0x136>
 8003b70:	9e04      	ldr	r6, [sp, #16]
 8003b72:	0028      	movs	r0, r5
 8003b74:	0039      	movs	r1, r7
 8003b76:	f7fc fb5f 	bl	8000238 <__aeabi_uidivmod>
 8003b7a:	9b03      	ldr	r3, [sp, #12]
 8003b7c:	3e01      	subs	r6, #1
 8003b7e:	5c5b      	ldrb	r3, [r3, r1]
 8003b80:	7033      	strb	r3, [r6, #0]
 8003b82:	002b      	movs	r3, r5
 8003b84:	0005      	movs	r5, r0
 8003b86:	429f      	cmp	r7, r3
 8003b88:	d9f3      	bls.n	8003b72 <_printf_i+0x11e>
 8003b8a:	2f08      	cmp	r7, #8
 8003b8c:	d109      	bne.n	8003ba2 <_printf_i+0x14e>
 8003b8e:	6823      	ldr	r3, [r4, #0]
 8003b90:	07db      	lsls	r3, r3, #31
 8003b92:	d506      	bpl.n	8003ba2 <_printf_i+0x14e>
 8003b94:	6863      	ldr	r3, [r4, #4]
 8003b96:	6922      	ldr	r2, [r4, #16]
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	dc02      	bgt.n	8003ba2 <_printf_i+0x14e>
 8003b9c:	2330      	movs	r3, #48	; 0x30
 8003b9e:	3e01      	subs	r6, #1
 8003ba0:	7033      	strb	r3, [r6, #0]
 8003ba2:	9b04      	ldr	r3, [sp, #16]
 8003ba4:	1b9b      	subs	r3, r3, r6
 8003ba6:	6123      	str	r3, [r4, #16]
 8003ba8:	9b07      	ldr	r3, [sp, #28]
 8003baa:	0021      	movs	r1, r4
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	9805      	ldr	r0, [sp, #20]
 8003bb0:	9b06      	ldr	r3, [sp, #24]
 8003bb2:	aa09      	add	r2, sp, #36	; 0x24
 8003bb4:	f7ff fede 	bl	8003974 <_printf_common>
 8003bb8:	1c43      	adds	r3, r0, #1
 8003bba:	d135      	bne.n	8003c28 <_printf_i+0x1d4>
 8003bbc:	2001      	movs	r0, #1
 8003bbe:	4240      	negs	r0, r0
 8003bc0:	b00b      	add	sp, #44	; 0x2c
 8003bc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	6809      	ldr	r1, [r1, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	6022      	str	r2, [r4, #0]
 8003bcc:	0022      	movs	r2, r4
 8003bce:	2178      	movs	r1, #120	; 0x78
 8003bd0:	3245      	adds	r2, #69	; 0x45
 8003bd2:	7011      	strb	r1, [r2, #0]
 8003bd4:	4a27      	ldr	r2, [pc, #156]	; (8003c74 <_printf_i+0x220>)
 8003bd6:	e7a7      	b.n	8003b28 <_printf_i+0xd4>
 8003bd8:	0648      	lsls	r0, r1, #25
 8003bda:	d5ac      	bpl.n	8003b36 <_printf_i+0xe2>
 8003bdc:	b2ad      	uxth	r5, r5
 8003bde:	e7aa      	b.n	8003b36 <_printf_i+0xe2>
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	680d      	ldr	r5, [r1, #0]
 8003be4:	1d10      	adds	r0, r2, #4
 8003be6:	6949      	ldr	r1, [r1, #20]
 8003be8:	6018      	str	r0, [r3, #0]
 8003bea:	6813      	ldr	r3, [r2, #0]
 8003bec:	062e      	lsls	r6, r5, #24
 8003bee:	d501      	bpl.n	8003bf4 <_printf_i+0x1a0>
 8003bf0:	6019      	str	r1, [r3, #0]
 8003bf2:	e002      	b.n	8003bfa <_printf_i+0x1a6>
 8003bf4:	066d      	lsls	r5, r5, #25
 8003bf6:	d5fb      	bpl.n	8003bf0 <_printf_i+0x19c>
 8003bf8:	8019      	strh	r1, [r3, #0]
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	9e04      	ldr	r6, [sp, #16]
 8003bfe:	6123      	str	r3, [r4, #16]
 8003c00:	e7d2      	b.n	8003ba8 <_printf_i+0x154>
 8003c02:	681a      	ldr	r2, [r3, #0]
 8003c04:	1d11      	adds	r1, r2, #4
 8003c06:	6019      	str	r1, [r3, #0]
 8003c08:	6816      	ldr	r6, [r2, #0]
 8003c0a:	2100      	movs	r1, #0
 8003c0c:	0030      	movs	r0, r6
 8003c0e:	6862      	ldr	r2, [r4, #4]
 8003c10:	f000 f832 	bl	8003c78 <memchr>
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d001      	beq.n	8003c1c <_printf_i+0x1c8>
 8003c18:	1b80      	subs	r0, r0, r6
 8003c1a:	6060      	str	r0, [r4, #4]
 8003c1c:	6863      	ldr	r3, [r4, #4]
 8003c1e:	6123      	str	r3, [r4, #16]
 8003c20:	2300      	movs	r3, #0
 8003c22:	9a04      	ldr	r2, [sp, #16]
 8003c24:	7013      	strb	r3, [r2, #0]
 8003c26:	e7bf      	b.n	8003ba8 <_printf_i+0x154>
 8003c28:	6923      	ldr	r3, [r4, #16]
 8003c2a:	0032      	movs	r2, r6
 8003c2c:	9906      	ldr	r1, [sp, #24]
 8003c2e:	9805      	ldr	r0, [sp, #20]
 8003c30:	9d07      	ldr	r5, [sp, #28]
 8003c32:	47a8      	blx	r5
 8003c34:	1c43      	adds	r3, r0, #1
 8003c36:	d0c1      	beq.n	8003bbc <_printf_i+0x168>
 8003c38:	6823      	ldr	r3, [r4, #0]
 8003c3a:	079b      	lsls	r3, r3, #30
 8003c3c:	d415      	bmi.n	8003c6a <_printf_i+0x216>
 8003c3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c40:	68e0      	ldr	r0, [r4, #12]
 8003c42:	4298      	cmp	r0, r3
 8003c44:	dabc      	bge.n	8003bc0 <_printf_i+0x16c>
 8003c46:	0018      	movs	r0, r3
 8003c48:	e7ba      	b.n	8003bc0 <_printf_i+0x16c>
 8003c4a:	0022      	movs	r2, r4
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	9906      	ldr	r1, [sp, #24]
 8003c50:	9805      	ldr	r0, [sp, #20]
 8003c52:	9e07      	ldr	r6, [sp, #28]
 8003c54:	3219      	adds	r2, #25
 8003c56:	47b0      	blx	r6
 8003c58:	1c43      	adds	r3, r0, #1
 8003c5a:	d0af      	beq.n	8003bbc <_printf_i+0x168>
 8003c5c:	3501      	adds	r5, #1
 8003c5e:	68e3      	ldr	r3, [r4, #12]
 8003c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003c62:	1a9b      	subs	r3, r3, r2
 8003c64:	42ab      	cmp	r3, r5
 8003c66:	dcf0      	bgt.n	8003c4a <_printf_i+0x1f6>
 8003c68:	e7e9      	b.n	8003c3e <_printf_i+0x1ea>
 8003c6a:	2500      	movs	r5, #0
 8003c6c:	e7f7      	b.n	8003c5e <_printf_i+0x20a>
 8003c6e:	46c0      	nop			; (mov r8, r8)
 8003c70:	08003f51 	.word	0x08003f51
 8003c74:	08003f62 	.word	0x08003f62

08003c78 <memchr>:
 8003c78:	b2c9      	uxtb	r1, r1
 8003c7a:	1882      	adds	r2, r0, r2
 8003c7c:	4290      	cmp	r0, r2
 8003c7e:	d101      	bne.n	8003c84 <memchr+0xc>
 8003c80:	2000      	movs	r0, #0
 8003c82:	4770      	bx	lr
 8003c84:	7803      	ldrb	r3, [r0, #0]
 8003c86:	428b      	cmp	r3, r1
 8003c88:	d0fb      	beq.n	8003c82 <memchr+0xa>
 8003c8a:	3001      	adds	r0, #1
 8003c8c:	e7f6      	b.n	8003c7c <memchr+0x4>

08003c8e <memcpy>:
 8003c8e:	2300      	movs	r3, #0
 8003c90:	b510      	push	{r4, lr}
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d100      	bne.n	8003c98 <memcpy+0xa>
 8003c96:	bd10      	pop	{r4, pc}
 8003c98:	5ccc      	ldrb	r4, [r1, r3]
 8003c9a:	54c4      	strb	r4, [r0, r3]
 8003c9c:	3301      	adds	r3, #1
 8003c9e:	e7f8      	b.n	8003c92 <memcpy+0x4>

08003ca0 <memmove>:
 8003ca0:	b510      	push	{r4, lr}
 8003ca2:	4288      	cmp	r0, r1
 8003ca4:	d902      	bls.n	8003cac <memmove+0xc>
 8003ca6:	188b      	adds	r3, r1, r2
 8003ca8:	4298      	cmp	r0, r3
 8003caa:	d303      	bcc.n	8003cb4 <memmove+0x14>
 8003cac:	2300      	movs	r3, #0
 8003cae:	e007      	b.n	8003cc0 <memmove+0x20>
 8003cb0:	5c8b      	ldrb	r3, [r1, r2]
 8003cb2:	5483      	strb	r3, [r0, r2]
 8003cb4:	3a01      	subs	r2, #1
 8003cb6:	d2fb      	bcs.n	8003cb0 <memmove+0x10>
 8003cb8:	bd10      	pop	{r4, pc}
 8003cba:	5ccc      	ldrb	r4, [r1, r3]
 8003cbc:	54c4      	strb	r4, [r0, r3]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	d1fa      	bne.n	8003cba <memmove+0x1a>
 8003cc4:	e7f8      	b.n	8003cb8 <memmove+0x18>
	...

08003cc8 <_free_r>:
 8003cc8:	b570      	push	{r4, r5, r6, lr}
 8003cca:	0005      	movs	r5, r0
 8003ccc:	2900      	cmp	r1, #0
 8003cce:	d010      	beq.n	8003cf2 <_free_r+0x2a>
 8003cd0:	1f0c      	subs	r4, r1, #4
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	da00      	bge.n	8003cda <_free_r+0x12>
 8003cd8:	18e4      	adds	r4, r4, r3
 8003cda:	0028      	movs	r0, r5
 8003cdc:	f000 f8d4 	bl	8003e88 <__malloc_lock>
 8003ce0:	4a1d      	ldr	r2, [pc, #116]	; (8003d58 <_free_r+0x90>)
 8003ce2:	6813      	ldr	r3, [r2, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d105      	bne.n	8003cf4 <_free_r+0x2c>
 8003ce8:	6063      	str	r3, [r4, #4]
 8003cea:	6014      	str	r4, [r2, #0]
 8003cec:	0028      	movs	r0, r5
 8003cee:	f000 f8d3 	bl	8003e98 <__malloc_unlock>
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}
 8003cf4:	42a3      	cmp	r3, r4
 8003cf6:	d908      	bls.n	8003d0a <_free_r+0x42>
 8003cf8:	6821      	ldr	r1, [r4, #0]
 8003cfa:	1860      	adds	r0, r4, r1
 8003cfc:	4283      	cmp	r3, r0
 8003cfe:	d1f3      	bne.n	8003ce8 <_free_r+0x20>
 8003d00:	6818      	ldr	r0, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	1841      	adds	r1, r0, r1
 8003d06:	6021      	str	r1, [r4, #0]
 8003d08:	e7ee      	b.n	8003ce8 <_free_r+0x20>
 8003d0a:	001a      	movs	r2, r3
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d001      	beq.n	8003d16 <_free_r+0x4e>
 8003d12:	42a3      	cmp	r3, r4
 8003d14:	d9f9      	bls.n	8003d0a <_free_r+0x42>
 8003d16:	6811      	ldr	r1, [r2, #0]
 8003d18:	1850      	adds	r0, r2, r1
 8003d1a:	42a0      	cmp	r0, r4
 8003d1c:	d10b      	bne.n	8003d36 <_free_r+0x6e>
 8003d1e:	6820      	ldr	r0, [r4, #0]
 8003d20:	1809      	adds	r1, r1, r0
 8003d22:	1850      	adds	r0, r2, r1
 8003d24:	6011      	str	r1, [r2, #0]
 8003d26:	4283      	cmp	r3, r0
 8003d28:	d1e0      	bne.n	8003cec <_free_r+0x24>
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	1841      	adds	r1, r0, r1
 8003d30:	6011      	str	r1, [r2, #0]
 8003d32:	6053      	str	r3, [r2, #4]
 8003d34:	e7da      	b.n	8003cec <_free_r+0x24>
 8003d36:	42a0      	cmp	r0, r4
 8003d38:	d902      	bls.n	8003d40 <_free_r+0x78>
 8003d3a:	230c      	movs	r3, #12
 8003d3c:	602b      	str	r3, [r5, #0]
 8003d3e:	e7d5      	b.n	8003cec <_free_r+0x24>
 8003d40:	6821      	ldr	r1, [r4, #0]
 8003d42:	1860      	adds	r0, r4, r1
 8003d44:	4283      	cmp	r3, r0
 8003d46:	d103      	bne.n	8003d50 <_free_r+0x88>
 8003d48:	6818      	ldr	r0, [r3, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	1841      	adds	r1, r0, r1
 8003d4e:	6021      	str	r1, [r4, #0]
 8003d50:	6063      	str	r3, [r4, #4]
 8003d52:	6054      	str	r4, [r2, #4]
 8003d54:	e7ca      	b.n	8003cec <_free_r+0x24>
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	200008a4 	.word	0x200008a4

08003d5c <_malloc_r>:
 8003d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5e:	2303      	movs	r3, #3
 8003d60:	1ccd      	adds	r5, r1, #3
 8003d62:	439d      	bics	r5, r3
 8003d64:	3508      	adds	r5, #8
 8003d66:	0006      	movs	r6, r0
 8003d68:	2d0c      	cmp	r5, #12
 8003d6a:	d21f      	bcs.n	8003dac <_malloc_r+0x50>
 8003d6c:	250c      	movs	r5, #12
 8003d6e:	42a9      	cmp	r1, r5
 8003d70:	d81e      	bhi.n	8003db0 <_malloc_r+0x54>
 8003d72:	0030      	movs	r0, r6
 8003d74:	f000 f888 	bl	8003e88 <__malloc_lock>
 8003d78:	4925      	ldr	r1, [pc, #148]	; (8003e10 <_malloc_r+0xb4>)
 8003d7a:	680a      	ldr	r2, [r1, #0]
 8003d7c:	0014      	movs	r4, r2
 8003d7e:	2c00      	cmp	r4, #0
 8003d80:	d11a      	bne.n	8003db8 <_malloc_r+0x5c>
 8003d82:	4f24      	ldr	r7, [pc, #144]	; (8003e14 <_malloc_r+0xb8>)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d104      	bne.n	8003d94 <_malloc_r+0x38>
 8003d8a:	0021      	movs	r1, r4
 8003d8c:	0030      	movs	r0, r6
 8003d8e:	f000 f869 	bl	8003e64 <_sbrk_r>
 8003d92:	6038      	str	r0, [r7, #0]
 8003d94:	0029      	movs	r1, r5
 8003d96:	0030      	movs	r0, r6
 8003d98:	f000 f864 	bl	8003e64 <_sbrk_r>
 8003d9c:	1c43      	adds	r3, r0, #1
 8003d9e:	d12b      	bne.n	8003df8 <_malloc_r+0x9c>
 8003da0:	230c      	movs	r3, #12
 8003da2:	0030      	movs	r0, r6
 8003da4:	6033      	str	r3, [r6, #0]
 8003da6:	f000 f877 	bl	8003e98 <__malloc_unlock>
 8003daa:	e003      	b.n	8003db4 <_malloc_r+0x58>
 8003dac:	2d00      	cmp	r5, #0
 8003dae:	dade      	bge.n	8003d6e <_malloc_r+0x12>
 8003db0:	230c      	movs	r3, #12
 8003db2:	6033      	str	r3, [r6, #0]
 8003db4:	2000      	movs	r0, #0
 8003db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003db8:	6823      	ldr	r3, [r4, #0]
 8003dba:	1b5b      	subs	r3, r3, r5
 8003dbc:	d419      	bmi.n	8003df2 <_malloc_r+0x96>
 8003dbe:	2b0b      	cmp	r3, #11
 8003dc0:	d903      	bls.n	8003dca <_malloc_r+0x6e>
 8003dc2:	6023      	str	r3, [r4, #0]
 8003dc4:	18e4      	adds	r4, r4, r3
 8003dc6:	6025      	str	r5, [r4, #0]
 8003dc8:	e003      	b.n	8003dd2 <_malloc_r+0x76>
 8003dca:	6863      	ldr	r3, [r4, #4]
 8003dcc:	42a2      	cmp	r2, r4
 8003dce:	d10e      	bne.n	8003dee <_malloc_r+0x92>
 8003dd0:	600b      	str	r3, [r1, #0]
 8003dd2:	0030      	movs	r0, r6
 8003dd4:	f000 f860 	bl	8003e98 <__malloc_unlock>
 8003dd8:	0020      	movs	r0, r4
 8003dda:	2207      	movs	r2, #7
 8003ddc:	300b      	adds	r0, #11
 8003dde:	1d23      	adds	r3, r4, #4
 8003de0:	4390      	bics	r0, r2
 8003de2:	1ac2      	subs	r2, r0, r3
 8003de4:	4298      	cmp	r0, r3
 8003de6:	d0e6      	beq.n	8003db6 <_malloc_r+0x5a>
 8003de8:	1a1b      	subs	r3, r3, r0
 8003dea:	50a3      	str	r3, [r4, r2]
 8003dec:	e7e3      	b.n	8003db6 <_malloc_r+0x5a>
 8003dee:	6053      	str	r3, [r2, #4]
 8003df0:	e7ef      	b.n	8003dd2 <_malloc_r+0x76>
 8003df2:	0022      	movs	r2, r4
 8003df4:	6864      	ldr	r4, [r4, #4]
 8003df6:	e7c2      	b.n	8003d7e <_malloc_r+0x22>
 8003df8:	2303      	movs	r3, #3
 8003dfa:	1cc4      	adds	r4, r0, #3
 8003dfc:	439c      	bics	r4, r3
 8003dfe:	42a0      	cmp	r0, r4
 8003e00:	d0e1      	beq.n	8003dc6 <_malloc_r+0x6a>
 8003e02:	1a21      	subs	r1, r4, r0
 8003e04:	0030      	movs	r0, r6
 8003e06:	f000 f82d 	bl	8003e64 <_sbrk_r>
 8003e0a:	1c43      	adds	r3, r0, #1
 8003e0c:	d1db      	bne.n	8003dc6 <_malloc_r+0x6a>
 8003e0e:	e7c7      	b.n	8003da0 <_malloc_r+0x44>
 8003e10:	200008a4 	.word	0x200008a4
 8003e14:	200008a8 	.word	0x200008a8

08003e18 <_realloc_r>:
 8003e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e1a:	0007      	movs	r7, r0
 8003e1c:	000d      	movs	r5, r1
 8003e1e:	0016      	movs	r6, r2
 8003e20:	2900      	cmp	r1, #0
 8003e22:	d105      	bne.n	8003e30 <_realloc_r+0x18>
 8003e24:	0011      	movs	r1, r2
 8003e26:	f7ff ff99 	bl	8003d5c <_malloc_r>
 8003e2a:	0004      	movs	r4, r0
 8003e2c:	0020      	movs	r0, r4
 8003e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e30:	2a00      	cmp	r2, #0
 8003e32:	d103      	bne.n	8003e3c <_realloc_r+0x24>
 8003e34:	f7ff ff48 	bl	8003cc8 <_free_r>
 8003e38:	0034      	movs	r4, r6
 8003e3a:	e7f7      	b.n	8003e2c <_realloc_r+0x14>
 8003e3c:	f000 f834 	bl	8003ea8 <_malloc_usable_size_r>
 8003e40:	002c      	movs	r4, r5
 8003e42:	42b0      	cmp	r0, r6
 8003e44:	d2f2      	bcs.n	8003e2c <_realloc_r+0x14>
 8003e46:	0031      	movs	r1, r6
 8003e48:	0038      	movs	r0, r7
 8003e4a:	f7ff ff87 	bl	8003d5c <_malloc_r>
 8003e4e:	1e04      	subs	r4, r0, #0
 8003e50:	d0ec      	beq.n	8003e2c <_realloc_r+0x14>
 8003e52:	0029      	movs	r1, r5
 8003e54:	0032      	movs	r2, r6
 8003e56:	f7ff ff1a 	bl	8003c8e <memcpy>
 8003e5a:	0029      	movs	r1, r5
 8003e5c:	0038      	movs	r0, r7
 8003e5e:	f7ff ff33 	bl	8003cc8 <_free_r>
 8003e62:	e7e3      	b.n	8003e2c <_realloc_r+0x14>

08003e64 <_sbrk_r>:
 8003e64:	2300      	movs	r3, #0
 8003e66:	b570      	push	{r4, r5, r6, lr}
 8003e68:	4d06      	ldr	r5, [pc, #24]	; (8003e84 <_sbrk_r+0x20>)
 8003e6a:	0004      	movs	r4, r0
 8003e6c:	0008      	movs	r0, r1
 8003e6e:	602b      	str	r3, [r5, #0]
 8003e70:	f7fc ff66 	bl	8000d40 <_sbrk>
 8003e74:	1c43      	adds	r3, r0, #1
 8003e76:	d103      	bne.n	8003e80 <_sbrk_r+0x1c>
 8003e78:	682b      	ldr	r3, [r5, #0]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d000      	beq.n	8003e80 <_sbrk_r+0x1c>
 8003e7e:	6023      	str	r3, [r4, #0]
 8003e80:	bd70      	pop	{r4, r5, r6, pc}
 8003e82:	46c0      	nop			; (mov r8, r8)
 8003e84:	200009c4 	.word	0x200009c4

08003e88 <__malloc_lock>:
 8003e88:	b510      	push	{r4, lr}
 8003e8a:	4802      	ldr	r0, [pc, #8]	; (8003e94 <__malloc_lock+0xc>)
 8003e8c:	f000 f814 	bl	8003eb8 <__retarget_lock_acquire_recursive>
 8003e90:	bd10      	pop	{r4, pc}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	200009cc 	.word	0x200009cc

08003e98 <__malloc_unlock>:
 8003e98:	b510      	push	{r4, lr}
 8003e9a:	4802      	ldr	r0, [pc, #8]	; (8003ea4 <__malloc_unlock+0xc>)
 8003e9c:	f000 f80d 	bl	8003eba <__retarget_lock_release_recursive>
 8003ea0:	bd10      	pop	{r4, pc}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	200009cc 	.word	0x200009cc

08003ea8 <_malloc_usable_size_r>:
 8003ea8:	1f0b      	subs	r3, r1, #4
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	1f18      	subs	r0, r3, #4
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	da01      	bge.n	8003eb6 <_malloc_usable_size_r+0xe>
 8003eb2:	580b      	ldr	r3, [r1, r0]
 8003eb4:	18c0      	adds	r0, r0, r3
 8003eb6:	4770      	bx	lr

08003eb8 <__retarget_lock_acquire_recursive>:
 8003eb8:	4770      	bx	lr

08003eba <__retarget_lock_release_recursive>:
 8003eba:	4770      	bx	lr

08003ebc <_init>:
 8003ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ebe:	46c0      	nop			; (mov r8, r8)
 8003ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ec2:	bc08      	pop	{r3}
 8003ec4:	469e      	mov	lr, r3
 8003ec6:	4770      	bx	lr

08003ec8 <_fini>:
 8003ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eca:	46c0      	nop			; (mov r8, r8)
 8003ecc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ece:	bc08      	pop	{r3}
 8003ed0:	469e      	mov	lr, r3
 8003ed2:	4770      	bx	lr
